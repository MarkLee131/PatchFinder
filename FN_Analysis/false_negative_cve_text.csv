cve,links,cwe,cna,cvss2,owner,repo,commit_id,label,desc_token,msg_token,diff_token
CVE-2013-7459,"['https://github.com/dlitz/pycrypto/commit/8dbe0dc3eea5c689d4f76b37b93fe216cf1f00d4', 'https://github.com/dlitz/pycrypto/issues/176']","('CWE-119', 'Improper Restriction of Operations within the Bounds of a Memory Buffer')",MITRE,7.5,dlitz,pycrypto,8dbe0dc3eea5c689d4f76b37b93fe216cf1f00d4,1,Heap-based buffer overflow in the ALGnew function in block_templace.c in Python Cryptography Toolkit ( aka pycrypto ) allows remote attackers to execute arbitrary code as demonstrated by a crafted iv parameter to cryptmsg.py .,"throw exception when iv is used with ecb or ctr the iv parameter is currently ignored when initializing a cipher in ecb or ctr mode . for ctr mode , it is confusing : it takes some time to see that a different parameter is needed ( the counter ) . for ecb mode , it is outright dangerous . this patch forces an exception to be raised .","diff - - git a / lib / crypto / selftest / cipher / common . py b / lib / crypto / selftest / cipher / common . py \ n @ @ - 605 , 19 + 605 , 34 @ @ class roundtriptest ( unittest . testcase ) : \ n - for mode in ( self . module . mode_ecb , self . module . mode_cbc , self . module . mode_cfb , self . module . mode_ofb , self . module . mode_openpgp ) : \ n + \ n + ## ecb mode\n+        mode = self.module.mode_ecb\n+        encryption_cipher = self.module.new(a2b_hex(self.key), mode)\n+        ciphertext = encryption_cipher.encrypt(self.plaintext)\n+        decryption_cipher = self.module.new(a2b_hex(self.key), mode)\n+        decrypted_plaintext = decryption_cipher.decrypt(ciphertext)\n+        self.assertequal(self.plaintext, decrypted_plaintext)\n+\n+        ## openpgp mode\n+        mode = self.module.mode_openpgp\n+        encryption_cipher = self.module.new(a2b_hex(self.key), mode, self.iv)\n+        eiv_ciphertext = encryption_cipher.encrypt(self.plaintext)\n+        eiv = eiv_ciphertext[:self.module.block_size+2]\n+        ciphertext = eiv_ciphertext[self.module.block_size+2:]\n+        decryption_cipher = self.module.new(a2b_hex(self.key), mode, eiv)\n+        decrypted_plaintext = decryption_cipher.decrypt(ciphertext)\n+        self.assertequal(self.plaintext, decrypted_plaintext)\n+\n+        ## all other non-aead modes (but ctr)\n+        for mode in (self.module.mode_cbc, self.module.mode_cfb, self.module.mode_ofb):\n-\n-            if mode != self.module.mode_openpgp:\n-                decryption_cipher = self.module.new(a2b_hex(self.key), mode, self.iv)\n-            else:\n-                eiv = ciphertext[:self.module.block_size+2]\n-                ciphertext = ciphertext[self.module.block_size+2:]\n-                decryption_cipher = self.module.new(a2b_hex(self.key), mode, eiv)\n+            decryption_cipher = self.module.new(a2b_hex(self.key), mode, self.iv)\n+\ndiff --git a/src/block_template.c b/src/block_template.c\n@@ -158,6 +158,17 @@ algnew(pyobject *self, pyobject *args, pyobject *kwdict)\n+	if (ivlen != 0 && mode == mode_ecb)\n+	{\n+		pyerr_format(pyexc_valueerror, ""ecb mode does not use iv"");\n+		return null;\n+	}\n+	if (ivlen != 0 && mode == mode_ctr)\n+	{\n+		pyerr_format(pyexc_valueerror,\n+			""ctr mode needs counter parameter, not iv"");\n+		return null;\n+	}"
CVE-2011-2479,['https://github.com/torvalds/linux/commit/78f11a255749d09025f54d4e2df4fbcb031530e2'],"('CWE-399', 'Resource Management Errors')","Red Hat, Inc.",4.9,torvalds,linux,78f11a255749d09025f54d4e2df4fbcb031530e2,1,"The Linux kernel before 2.6.39 does not properly create transparent huge pages in response to a MAP_PRIVATE mmap system call on /dev/zero , which allows local users to cause a denial of service ( system crash ) via a crafted application .","mm : thp : fix /dev/zero map_private and vm_flags cleanups the huge_memory.c thp page fault was allowed to run if vm_ops was null ( which would succeed for /dev/zero map_private , as the f_op- > mmap wouldn't setup a special vma- > vm_ops and it would fallback to regular anonymous memory ) but other thp logics were n't fully activated for vmas with vm_file not null ( /dev/zero has a not null vma- > vm_file ) . so this removes the vm_file checks so that /dev/zero also can safely use thp ( the other albeit safer approach to fix this bug would have been to prevent the thp initial page fault to run if vm_file was set ) . after removing the vm_file checks , this also makes huge_memory.c stricter in khugepaged for the debug_vm=y case . it does n't replace the vm_file check with a is_pfn_mapping check ( but it keeps checking for vm_pfnmap under vm_bug_on ) because for a is_cow_mapping ( ) mapping vm_pfnmap should only be allowed to exist before the first page fault , and in turn when vma- > anon_vma is null ( so preventing khugepaged registration ) . so i tend to think the previous comment saying if vm_file was set , vm_pfnmap might have been set and we could still be registered in khugepaged ( despite anon_vma was not null to be registered in khugepaged ) was too paranoid . the is_linear_pfn_mapping check is also i think superfluous ( as described by comment ) but under debug_vm it is safe to stay . addresses https : //bugzilla.kernel.org/show_bug.cgi ? id=33682 signed-off-by : andrea arcangeli < aarcange @ redhat.com > reported-by : caspar zhang < bugs @ casparzhang.com > acked-by : mel gorman < mel @ csn.ul.ie > acked-by : rik van riel < riel @ redhat.com > cc : < stable @ kernel.org > [ 2.6.38.x ] signed-off-by : andrew morton < akpm @ linux-foundation.org > signed-off-by : linus torvalds < torvalds @ linux-foundation.org >","diff - - git a / include / linux / huge_mm . h b / include / linux / huge_mm . h \ n @ @ - 117 , 7 + 117 , 7 @ @ static inline void vma_adjust_trans_huge ( struct vm_area_struct * vma , \ n - if ( ! vma - > anon_vma | | vma - > vm_ops | | vma - > vm_file ) \ n + if ( ! vma - > anon_vma | | vma - > vm_ops ) \ ndiff - - git a / include / linux / mm . h b / include / linux / mm . h \ n @ @ - 137 , 7 + 137 , 8 @ @ extern unsigned int kobjsize ( const void * objp ) ; \ n - * special vmas that are non - mergable , non - mlock ( ) able \ n + * special vmas that are non - mergable , non - mlock ( ) able . \ n + * note : mm / huge_memory . c vm_no_thp depends on this definition . \ ndiff - - git a / mm / huge_memory . c b / mm / huge_memory . c \ n @ @ - 1408 , 6 + 1408 , 9 @ @ int split_huge_page ( struct page * page ) \ n + #define vm_no_thp (vm_special|vm_insertpage|vm_mixedmap|vm_sao| \\n+		   vm_hugetlb|vm_shared|vm_mayshare)\n+\n@@ -1416,11 +1419,7 @@ int hugepage_madvise(struct vm_area_struct *vma,\n-		if (*vm_flags & (vm_hugepage |\n-				 vm_shared   | vm_mayshare   |\n-				 vm_pfnmap   | vm_io      | vm_dontexpand |\n-				 vm_reserved | vm_hugetlb | vm_insertpage |\n-				 vm_mixedmap | vm_sao))\n+		if (*vm_flags & (vm_hugepage | vm_no_thp))\n@@ -1436,11 +1435,7 @@ int hugepage_madvise(struct vm_area_struct *vma,\n-		if (*vm_flags & (vm_nohugepage |\n-				 vm_shared   | vm_mayshare   |\n-				 vm_pfnmap   | vm_io      | vm_dontexpand |\n-				 vm_reserved | vm_hugetlb | vm_insertpage |\n-				 vm_mixedmap | vm_sao))\n+		if (*vm_flags & (vm_nohugepage | vm_no_thp))\n@@ -1574,10 +1569,14 @@ int khugepaged_enter_vma_merge(struct vm_area_struct *vma)\n-	if (vma->vm_file || vma->vm_ops)\n+	if (vma->vm_ops)\n-	vm_bug_on(is_linear_pfn_mapping(vma) || is_pfn_mapping(vma));\n+	/*\n+	 * if is_pfn_mapping() is true is_learn_pfn_mapping() must be\n+	 * true too, verify it here.\n+	 */\n+	vm_bug_on(is_linear_pfn_mapping(vma) || vma->vm_flags & vm_no_thp);\n@@ -1828,12 +1827,15 @@ static void collapse_huge_page(struct mm_struct *mm,\n-	/* vm_pfnmap vmas may have vm_ops null but vm_file set */\n-	if (!vma->anon_vma || vma->vm_ops || vma->vm_file)\n+	if (!vma->anon_vma || vma->vm_ops)\n-	vm_bug_on(is_linear_pfn_mapping(vma) || is_pfn_mapping(vma));\n+	/*\n+	 * if is_pfn_mapping() is true is_learn_pfn_mapping() must be\n+	 * true too, verify it here.\n+	 */\n+	vm_bug_on(is_linear_pfn_mapping(vma) || vma->vm_flags & vm_no_thp);\n@@ -2066,13 +2068,16 @@ static unsigned int khugepaged_scan_mm_slot(unsigned int pages,\n-		/* vm_pfnmap vmas may have vm_ops null but vm_file set */\n-		if (!vma->anon_vma || vma->vm_ops || vma->vm_file)\n+		if (!vma->anon_vma || vma->vm_ops)\n-\n-		vm_bug_on(is_linear_pfn_mapping(vma) || is_pfn_mapping(vma));\n+		/*\n+		 * if is_pfn_mapping() is true is_learn_pfn_mapping()\n+		 * must be true too, verify it here.\n+		 */\n+		vm_bug_on(is_linear_pfn_mapping(vma) ||\n+			  vma->vm_flags & vm_no_thp);"
CVE-2015-0823,['https://github.com/khaledhosny/ots/commit/003c62d28ae438aa8943cb31535563397f838a2c'],"('NVD-CWE-Other', 'Other')",Mozilla Corporation,7.5,khaledhosny,ots,003c62d28ae438aa8943cb31535563397f838a2c,1,"Multiple use-after-free vulnerabilities in OpenType Sanitiser , as used in Mozilla Firefox before 36.0 , might allow remote attackers to trigger problematic Developer Console information or possibly have unspecified other impact by leveraging incorrect macro expansion , related to the ots : :ots_gasp_parse function . < a href= '' http : //cwe.mitre.org/data/definitions/416.html '' > CWE-416 : Use After Free < /a >","[ ots ] fix ( potential ) use-after-free bugs make sure we don ’ t try to access the table after deleting it . not all the changed files are affected , but i changed them all for the sake of consistency .","diff - - git a / src / gasp . cc b / src / gasp . cc \ n @ @ - 11 , 10 + 11 , 10 @ @ \ n - delete file - > gasp ; \ \ n - file - > gasp = 0 ; \ \ n + delete file - > gasp ; \ \ n + file - > gasp = 0 ; \ \ ndiff - - git a / src / gdef . cc b / src / gdef . cc \ n @ @ - 231 , 9 + 231 , 9 @ @ bool parsemarkglyphsetsdeftable ( ots : : opentypefile * file , const uint8_t * data , \ n + ots_failure_msg ( msg_ "", table discarded"" ) ; \ \ n - ots_failure_msg ( msg_ "", table discarded"" ) ; \ \ ndiff - - git a / src / gpos . cc b / src / gpos . cc \ n @ @ - 677 , 9 + 677 , 9 @ @ bool parseextensionpositioning ( const ots : : opentypefile * file , \ n + ots_failure_msg ( msg_ "", table discarded"" ) ; \ \ n - ots_failure_msg ( msg_ "", table discarded"" ) ; \ \ ndiff - - git a / src / gsub . cc b / src / gsub . cc \ n @ @ - 530 , 9 + 530 , 9 @ @ bool parsereversechainingcontextsinglesubstitution ( \ n + ots_failure_msg ( msg_ "", table discarded"" ) ; \ \ n - ots_failure_msg ( msg_ "", table discarded"" ) ; \ \ ndiff - - git a / src / hdmx . cc b / src / hdmx . cc \ n @ @ - 13 , 10 + 13 , 10 @ @ \ n - delete file - > hdmx ; \ \ n - file - > hdmx = 0 ; \ \ n + delete file - > hdmx ; \ \ n + file - > hdmx = 0 ; \ \ ndiff - - git a / src / kern . cc b / src / kern . cc \ n @ @ - 11 , 9 + 11 , 9 @ @ \ n + ots_failure_msg ( msg_ "", table discarded"" ) ; \ \ n - ots_failure_msg ( msg_ "", table discarded"" ) ; \ \ ndiff - - git a / src / ltsh . cc b / src / ltsh . cc \ n @ @ - 13 , 10 + 13 , 10 @ @ \ n - delete file - > ltsh ; \ \ n - file - > ltsh = 0 ; \ \ n + delete file - > ltsh ; \ \ n + file - > ltsh = 0 ; \ \ ndiff - - git a / src / math . cc b / src / math . cc \ n @ @ - 518 , 9 + 518 , 9 @ @ bool parsemathvariantstable ( const ots : : opentypefile * file , \ n + ots_failure_msg ( msg_ "", table discarded"" ) ; \ \ n - ots_failure_msg ( msg_ "", table discarded"" ) ; \ \ ndiff - - git a / src / vdmx . cc b / src / vdmx . cc \ n @ @ - 11 , 10 + 11 , 10 @ @ \ n - delete file - > vdmx ; \ \ n - file - > vdmx = 0 ; \ \ n + delete file - > vdmx ; \ \ n + file - > vdmx = 0 ; \ \ ndiff - - git a / src / vorg . cc b / src / vorg . cc \ n @ @ - 13 , 10 + 13 , 10 @ @ \ n - delete file - > vorg ; \ \ n - file - > vorg = 0 ; \ \ n + delete file - > vorg ; \ \ n + file - > vorg = 0 ; \"
CVE-2014-3617,[],"('CWE-264', 'Permissions, Privileges, and Access Controls')","Red Hat, Inc.",4.0,moodle,moodle,8f2e80600bf0fc220b92706907fb3d683602e5c2,1,"The forum_print_latest_discussions function in mod/forum/lib.php in Moodle through 2.4.11 , 2.5.x before 2.5.8 , 2.6.x before 2.6.5 , and 2.7.x before 2.7.2 allows remote authenticated users to bypass the individual answer-posting requirement without the mod/forum : viewqandawithoutposting capability , and discover an author 's username , by leveraging the student role and visiting a Q & A forum .",mdl-46619 forum : link to the discussion only if users can not see posts .,"diff - - git a / mod / forum / lib . php b / mod / forum / lib . php \ n @ @ - 3703 , 14 + 3703 , 18 @ @ function forum_print_discussion_header ( & $ post , $ forum , $ group = - 1 , $ datestring = """" \ n - $ parenturl = ( empty ( $ post - > lastpostid ) ) ? '' : '&amp;parent=' . $ post - > lastpostid ; \ n + $ parenturl = '' ; \ n + \ n + // show link to last poster and their post if user can see them.\n+        $parenturl = (empty($post->lastpostid)) ? '' : '&amp;parent='.$post->lastpostid;\n+"
CVE-2014-9653,[],"('CWE-20', 'Improper Input Validation')",MITRE,7.5,file,file,445c8fb0ebff85195be94cd9f7e1df89cade5c7f,1,"readelf.c in file before 5.22 , as used in the Fileinfo component in PHP before 5.4.37 , 5.5.x before 5.5.21 , and 5.6.x before 5.6.5 , does not consider that pread calls sometimes read only a subset of the available data , which allows remote attackers to cause a denial of service ( uninitialized memory access ) or possibly have unspecified other impact via a crafted ELF file .","bail out on partial reads , from alexander cherepanov","diff - - git a / src / readelf . c b / src / readelf . c \ n @ @ - 27 , 7 + 27 , 7 @ @ \ n - file_rcsid ( ""@(#)$file: readelf.c,v 1.113 2014/12/11 14:10:53 christos exp $"" ) \ n + file_rcsid ( ""@(#)$file: readelf.c,v 1.114 2014/12/11 14:19:36 christos exp $"" ) \ n @ @ - 319 , 7 + 319 , 7 @ @ dophn_core ( struct magic_set * ms , int clazz , int swap , int fd , off_t off , \ n - if ( pread ( fd , xph_addr , xph_sizeof , off ) = = - 1 ) { \ n + if ( pread ( fd , xph_addr , xph_sizeof , off ) < ( ssize_t ) xph_sizeof ) { \ n @ @ - 928 , 6 + 928 , 7 @ @ doshn ( struct magic_set * ms , int clazz , int swap , int fd , off_t off , int num , \ n + ssize_t namesize ; \ n @ @ - 936 , 7 + 937 , 7 @ @ doshn ( struct magic_set * ms , int clazz , int swap , int fd , off_t off , int num , \ n - if ( pread ( fd , xsh_addr , xsh_sizeof , off + size * strtab ) = = - 1 ) { \ n + if ( pread ( fd , xsh_addr , xsh_sizeof , off + size * strtab ) < ( ssize_t ) xsh_sizeof ) { \ n @ @ - 944 , 15 + 945 , 15 @ @ doshn ( struct magic_set * ms , int clazz , int swap , int fd , off_t off , int num , \ n - if ( pread ( fd , name , sizeof ( name ) , name_off + xsh_name ) = = - 1 ) { \ n + if ( ( namesize = pread ( fd , name , sizeof ( name ) - 1 , name_off + xsh_name ) ) = = - 1 ) { \ n - name [ sizeof ( name ) - 1 ] = '\0' ; \ n + name [ namesize ] = '\0' ; \ n - if ( pread ( fd , xsh_addr , xsh_sizeof , off ) = = - 1 ) { \ n + if ( pread ( fd , xsh_addr , xsh_sizeof , off ) < ( ssize_t ) xsh_sizeof ) { \ n @ @ - 982 , 7 + 983 , 7 @ @ doshn ( struct magic_set * ms , int clazz , int swap , int fd , off_t off , int num , \ n - if ( pread ( fd , nbuf , xsh_size , xsh_offset ) = = - 1 ) { \ n + if ( pread ( fd , nbuf , xsh_size , xsh_offset ) < ( ssize_t ) xsh_size ) { \ n @ @ - 1178 , 7 + 1179 , 7 @ @ dophn_exec ( struct magic_set * ms , int clazz , int swap , int fd , off_t off , \ n - if ( pread ( fd , xph_addr , xph_sizeof , off ) = = - 1 ) { \ n + if ( pread ( fd , xph_addr , xph_sizeof , off ) < ( ssize_t ) xph_sizeof ) {"
CVE-2014-9621,[],"('CWE-399', 'Resource Management Errors')",MITRE,5.0,file,file,65437cee25199dbd385fb35901bc0011e164276c,1,The ELF parser in file 5.16 through 5.21 allows remote attackers to cause a denial of service via a long string .,"limit string printing to 100 chars , and add flags i forgot in the previous commit .","diff - - git a / src / readelf . c b / src / readelf . c \ n @ @ - 27 , 7 + 27 , 7 @ @ \ n - file_rcsid ( ""@(#)$file: readelf.c,v 1.115 2014/12/16 20:53:05 christos exp $"" ) \ n + file_rcsid ( ""@(#)$file: readelf.c,v 1.116 2014/12/16 23:18:40 christos exp $"" ) \ n @ @ - 900 , 19 + 900 , 23 @ @ donote ( struct magic_set * ms , void * vbuf , size_t offset , size_t size , \ n + if ( descsz > 100 ) \ n + descsz = 100 ; \ n - if ( file_printf ( ms , "", compiled for: %.*s"" , ( int ) descsz , \ n - ( const char * ) & nbuf [ doff ] ) = = - 1 ) \ n + * flags | = flags_did_netbsd_march ; \ n + if ( file_printf ( ms , "", compiled for: %.*s"" , \ n + ( int ) descsz , ( const char * ) & nbuf [ doff ] ) = = - 1 ) \ n + * flags | = flags_did_netbsd_cmodel ; \ n @ @ - 920 , 6 + 924 , 7 @ @ donote ( struct magic_set * ms , void * vbuf , size_t offset , size_t size , \ n + * flags | = flags_did_netbsd_unknown ;"
CVE-2015-3185,[],"('CWE-264', 'Permissions, Privileges, and Access Controls')","Red Hat, Inc.",4.3,apache,httpd,db81019ab88734ed35fa70294a0cfa7a19743f73,1,"The ap_some_auth_required function in server/request.c in the Apache HTTP Server 2.4.x before 2.4.14 does not consider that a Require directive may be associated with an authorization setting rather than an authentication setting , which allows remote attackers to bypass intended access restrictions in opportunistic circumstances by leveraging the presence of a module that relies on the 2.2 API behavior .",security : cve-2015-3185 ( cve.mitre.org ) replacement of ap_some_auth_required ( unusable in apache httpd 2.4 ) with new ap_some_authn_required and ap_force_authn hook . submitted by : breser git-svn-id : https : //svn.apache.org/repos/asf/httpd/httpd/trunk @ 1684524 13f79535-47bb-0310-9956-ffa450edef68,"diff - - git a / include / ap_mmn . h b / include / ap_mmn . h \ n @ @ - 482 , 6 + 482 , 8 @ @ \ n + * 20150222 . 3 ( 2 . 5 . 0 - dev ) add ap_some_authn_required , ap_force_authn hook . \ n + * deprecate broken ap_some_auth_required . \ n @ @ - 489 , 7 + 491 , 7 @ @ \ n - #define module_magic_number_minor 2                 /* 0...n */\n+#define module_magic_number_minor 3                 /* 0...n */\ndiff --git a/include/http_request.h b/include/http_request.h\n@@ -185,6 +185,9 @@ ap_declare(void) ap_internal_fast_redirect(request_rec *sub_req, request_rec *r)\n+ * @bug behavior changed in 2.4.x refactoring, api no longer usable\n+ * @deprecated @see ap_some_authn_required()\n+ *\n@@ -541,6 +544,16 @@ ap_declare_hook(void,insert_filter,(request_rec *r))\n+/**\n+ * this hook allows a module to force authn to be required when\n+ * processing a request.\n+ * this hook should be registered with ap_hook_force_authn().\n+ * @param r the current request\n+ * @return ok (force authn), declined (let later modules decide)\n+ * @ingroup hooks\n+ */\n+ap_declare_hook(int,force_authn,(request_rec *r))\n+\n@@ -587,6 +600,17 @@ ap_declare(apr_bucket *) ap_bucket_eor_make(apr_bucket *b, request_rec *r);\n+/**\n+ * can be used within any handler to determine if any authentication\n+ * is required for the current request.  note that if used with an\n+ * access_checker hook, an access_checker_ex hook or an authz provider; the\n+ * caller should take steps to avoid a loop since this function is\n+ * implemented by calling these hooks.\n+ * @param r the current request\n+ * @return true if authentication is required, false otherwise\n+ */\n+ap_declare(int) ap_some_authn_required(request_rec *r);\n+\ndiff --git a/server/request.c b/server/request.c\n@@ -71,6 +71,7 @@ apr_hook_struct(\n+    apr_hook_link(force_authn)\n@@ -97,6 +98,8 @@ ap_implement_hook_run_all(int, post_perdir_config,\n+ap_implement_hook_run_first(int,force_authn,\n+                            (request_rec *r), (r), declined)\n@@ -118,6 +121,39 @@ static int decl_die(int status, const char *phase, request_rec *r)\n+ap_declare(int) ap_some_authn_required(request_rec *r)\n+{\n+    int access_status;\n+\n+    switch (ap_satisfies(r)) {\n+    case satisfy_all:\n+    case satisfy_nospec:\n+        if ((access_status = ap_run_access_checker(r)) != ok) {\n+            break;\n+        }\n+\n+        access_status = ap_run_access_checker_ex(r);\n+        if (access_status == declined) {\n+            return true;\n+        }\n+\n+        break;\n+    case satisfy_any:\n+        if ((access_status = ap_run_access_checker(r)) == ok) {\n+            break;\n+        }\n+\n+        access_status = ap_run_access_checker_ex(r);\n+        if (access_status == declined) {\n+            return true;\n+        }\n+\n+        break;\n+    }\n+\n+    return false;\n+}\n+\n@@ -236,15 +272,8 @@ ap_declare(int) ap_process_request_internal(request_rec *r)\n-            if (access_status == ok) {\n-                ap_log_rerror(aplog_mark, aplog_trace3, 0, r,\n-                              ""request authorized without authentication by ""\n-                              ""access_checker_ex hook: %s"", r->uri);\n-            }\n-            else if (access_status != declined) {\n-                return decl_die(access_status, ""check access"", r);\n-            }\n-            else {\n+            if (access_status == declined\n+                || (access_status == ok && ap_run_force_authn(r) == ok)) {\n@@ -262,6 +291,14 @@ ap_declare(int) ap_process_request_internal(request_rec *r)\n+            else if (access_status == ok) {\n+                ap_log_rerror(aplog_mark, aplog_trace3, 0, r,\n+                              ""request authorized without authentication by ""\n+                              ""access_checker_ex hook: %s"", r->uri);\n+            }\n+            else {\n+                return decl_die(access_status, ""check access"", r);\n+            }\n@@ -273,15 +310,8 @@ ap_declare(int) ap_process_request_internal(request_rec *r)\n-            if (access_status == ok) {\n-                ap_log_rerror(aplog_mark, aplog_trace3, 0, r,\n-                              ""request authorized without authentication by ""\n-                              ""access_checker_ex hook: %s"", r->uri);\n-            }\n-            else if (access_status != declined) {\n-                return decl_die(access_status, ""check access"", r);\n-            }\n-            else {\n+            if (access_status == declined\n+                || (access_status == ok && ap_run_force_authn(r) == ok)) {\n@@ -299,6 +329,14 @@ ap_declare(int) ap_process_request_internal(request_rec *r)\n+            else if (access_status == ok) {\n+                ap_log_rerror(aplog_mark, aplog_trace3, 0, r,\n+                              ""request authorized without authentication by ""\n+                              ""access_checker_ex hook: %s"", r->uri);\n+            }\n+            else {\n+                return decl_die(access_status, ""check access"", r);\n+            }"
CVE-2015-1808,[],"('CWE-20', 'Improper Input Validation')","Red Hat, Inc.",3.5,jenkinsci,jenkins,889b46cc9146fda468023f3ada71070e240c13ac,1,Jenkins before 1.600 and LTS before 1.596.1 allows remote authenticated users to cause a denial of service ( improper plug-in and tool installation ) via crafted update center data .,merge pull request # 2 from jenkinsci-cert/security-163 [ security-163 ] non-browser-based downloadservice,"diff - - git a / core / src / main / java / hudson / pluginmanager . java b / core / src / main / java / hudson / pluginmanager . java \ n @ @ - 108 , 7 + 108 , 11 @ @ \ n + import hudson . model . downloadservice ; \ n + import hudson . util . formvalidation ; \ n + import org . kohsuke . accmod . restricted ; \ n + import org . kohsuke . accmod . restrictions . noexternaluse ; \ n @ @ - 775 , 6 + 779 , 24 @ @ public httpresponse douploadplugin ( staplerrequest req ) throws ioexception , servl \ n + @ restricted ( noexternaluse . class ) \ n + @ requirepost public httpresponse docheckupdatesserver ( ) throws ioexception { \ n + for ( updatesite site : jenkins . getinstance ( ) . getupdatecenter ( ) . getsites ( ) ) { \ n + formvalidation v = site . updatedirectlynow ( downloadservice . signaturecheck ) ; \ n + if ( v . kind ! = formvalidation . kind . ok ) { \ n + // todo crude but enough for now\n+                return v;\n+            }\n+        }\n+        for (downloadservice.downloadable d : downloadservice.downloadable.all()) {\n+            formvalidation v = d.updatenow();\n+            if (v.kind != formvalidation.kind.ok) {\n+                return v;\n+            }\n+        }\n+        return httpresponses.forwardtopreviouspage();\n+    }\n+\ndiff --git a/core/src/main/java/hudson/model/downloadservice.java b/core/src/main/java/hudson/model/downloadservice.java\n@@ -26,20 +26,25 @@\n+import hudson.proxyconfiguration;\n-import jenkins.model.jenkins;\n-import jenkins.util.jsonsignaturevalidator;\n-import net.sf.json.jsonexception;\n-import org.kohsuke.stapler.stapler;\n-\n+import java.io.inputstream;\n+import java.net.url;\n+import java.net.urlencoder;\n-\n+import jenkins.model.downloadsettings;\n+import jenkins.model.jenkins;\n+import jenkins.util.jsonsignaturevalidator;\n+import net.sf.json.jsonexception;\n+import org.kohsuke.accmod.restricted;\n+import org.kohsuke.accmod.restrictions.noexternaluse;\n+import org.kohsuke.stapler.stapler;\n@@ -62,6 +67,9 @@ public class downloadservice extends pagedecorator {\n+        if (!downloadsettings.usepostback()) {\n+            return """";\n+        }\n@@ -135,6 +143,58 @@ public downloadable getbyid(string id) {\n+    /**\n+     * loads json from a jsonp url.\n+     * metadata for downloadables and update centers is offered in two formats, both designed for download from the browser (predating {@link downloadsettings}):\n+     * html using {@code postmessage} for newer browsers, and jsonp as a fallback.\n+     * confusingly, the jsonp files are given the {@code *.json} file extension, when they are really javascript and should be {@code *.js}.\n+     * this method extracts the json from a jsonp url, since that is what we actually want when we download from the server.\n+     * (currently the true json is not published separately, and extracting from the {@code *.json.html} is more work.)\n+     * @param src a url to a jsonp file (typically including {@code id} and {@code version} query parameters)\n+     * @return the embedded json text\n+     * @throws ioexception if either downloading or processing failed\n+     */\n+    @restricted(noexternaluse.class)\n+    public static string loadjson(url src) throws ioexception {\n+        inputstream is = proxyconfiguration.open(src).getinputstream();\n+        try {\n+            string jsonp = ioutils.tostring(is, ""utf-8"");\n+            int start = jsonp.indexof('{');\n+            int end = jsonp.lastindexof('}');\n+            if (start >= 0 && end > start) {\n+                return jsonp.substring(start, end + 1);\n+            } else {\n+                throw new ioexception(""could not find json in "" + src);\n+            }\n+        } finally {\n+            is.close();\n+        }\n+    }\n+\n+    /**\n+     * loads json from a json-with-{@code postmessage} url.\n+     * @param src a url to a json html file (typically including {@code id} and {@code version} query parameters)\n+     * @return the embedded json text\n+     * @throws ioexception if either downloading or processing failed\n+     */\n+    @restricted(noexternaluse.class)\n+    public static string loadjsonhtml(url src) throws ioexception {\n+        inputstream is = proxyconfiguration.open(src).getinputstream();\n+        try {\n+            string jsonp = ioutils.tostring(is, ""utf-8"");\n+            string preamble = ""window.parent.postmessage(json.stringify("";\n+            int start = jsonp.indexof(preamble);\n+            int end = jsonp.lastindexof(""),'*');"");\n+            if (start >= 0 && end > start) {\n+                return jsonp.substring(start + preamble.length(), end).trim();\n+            } else {\n+                throw new ioexception(""could not find json in "" + src);\n+            }\n+        } finally {\n+            is.close();\n+        }\n+    }\n+\n@@ -248,26 +308,39 @@ public jsonobject getdata() throws ioexception {\n+            downloadsettings.checkpostbackaccess();\n+            formvalidation e = load(json, datatimestamp);\n+            if (e.kind != kind.ok) {\n+                logger.severe(e.renderhtml());\n+                throw e;\n+            }\n+            rsp.setcontenttype(""text/plain"");  // so browser won't try to parse response\n+        }\n+\n+        private formvalidation load(string json, long datatimestamp) throws ioexception {\n-                    logger.severe(e.renderhtml());\n-                    throw e;\n+                    return e;\n+            return formvalidation.ok();\n+        }\n-            rsp.setcontenttype(""text/plain"");  // so browser won't try to parse response\n+        @restricted(noexternaluse.class)\n+        public formvalidation updatenow() throws ioexception {\n+            return load(loadjsonhtml(new url(geturl() + "".html?id="" + urlencoder.encode(getid(), ""utf-8"") + ""&version="" + urlencoder.encode(jenkins.version, ""utf-8""))), system.currenttimemillis());\n@@ -296,7 +369,10 @@ public static downloadable get(string id) {\n-     * off by default until we know this is reasonably working.\n+     * may be used to temporarily disable signature checking on {@link downloadservice} and {@link updatecenter}.\n+     * useful when upstream signatures are broken, such as due to expired certificates.\n+     * should only be used when {@link downloadsettings#isusebrowser};\n+     * disabling signature checks for in-browser downloads is <em>very dangerous</em> as unprivileged users could submit spoofed metadata!\ndiff --git a/core/src/main/java/hudson/model/updatecenter.java b/core/src/main/java/hudson/model/updatecenter.java\n@@ -630,7 +630,7 @@ public list<plugin> getupdates() {\n-            future<formvalidation> future = site.updatedirectly(true);\n+            future<formvalidation> future = site.updatedirectly(downloadservice.signaturecheck);\ndiff --git a/core/src/main/java/hudson/model/updatesite.java b/core/src/main/java/hudson/model/updatesite.java\n@@ -27,32 +27,18 @@\n-import hudson.proxyconfiguration;\n+import static hudson.util.timeunit2.*;\n-import jenkins.model.jenkins;\n-import jenkins.util.jsonsignaturevalidator;\n-import net.sf.json.jsonexception;\n-import net.sf.json.jsonobject;\n-import org.apache.commons.lang.stringutils;\n-import org.kohsuke.stapler.databoundconstructor;\n-import org.kohsuke.stapler.httpresponse;\n-import org.kohsuke.stapler.staplerrequest;\n-import org.kohsuke.stapler.export.exported;\n-import org.kohsuke.stapler.export.exportedbean;\n-import org.kohsuke.stapler.interceptor.requirepost;\n-\n-import java.io.inputstream;\n-import java.net.urlconnection;\n@@ -66,10 +52,23 @@\n-\n-import static hudson.util.timeunit2.*;\n-\n+import javax.annotation.checkfornull;\n+import javax.annotation.nonnull;\n+import jenkins.model.jenkins;\n+import jenkins.model.downloadsettings;\n+import jenkins.util.jsonsignaturevalidator;\n+import net.sf.json.jsonexception;\n+import net.sf.json.jsonobject;\n+import org.apache.commons.lang.stringutils;\n+import org.kohsuke.accmod.restricted;\n+import org.kohsuke.accmod.restrictions.noexternaluse;\n+import org.kohsuke.stapler.databoundconstructor;\n+import org.kohsuke.stapler.httpresponse;\n+import org.kohsuke.stapler.staplerrequest;\n+import org.kohsuke.stapler.export.exported;\n+import org.kohsuke.stapler.export.exportedbean;\n+import org.kohsuke.stapler.interceptor.requirepost;\n@@ -154,42 +153,28 @@ public long getdatatimestamp() {\n-    public future<formvalidation> updatedirectly(final boolean signaturecheck) {\n+    public @checkfornull future<formvalidation> updatedirectly(final boolean signaturecheck) {\n-\n-                public formvalidation call() throws exception {\n-                    url src = new url(geturl() + ""?id="" + urlencoder.encode(getid(),""utf-8"")\n-                            + ""&version=""+urlencoder.encode(jenkins.version, ""utf-8""));\n-                    urlconnection conn = proxyconfiguration.open(src);\n-                    inputstream is = conn.getinputstream();\n-                    try {\n-                        string uncleanjson = ioutils.tostring(is,""utf-8"");\n-                        int jsonstart = uncleanjson.indexof(""{\"""");\n-                        if (jsonstart >= 0) {\n-                            uncleanjson = uncleanjson.substring(jsonstart);\n-                            int end = uncleanjson.lastindexof('}');\n-                            if (end>0)\n-                                uncleanjson = uncleanjson.substring(0,end+1);\n-                            return updatedata(uncleanjson, signaturecheck);\n-                        } else {\n-                            throw new ioexception(""could not find json in content of "" +\n-                            		""update center from url: ""+src.toexternalform());\n-                        }\n-                    } finally {\n-                        if (is != null)\n-                            is.close();\n-                    }\n+                @override public formvalidation call() throws exception {\n+                    return updatedirectlynow(signaturecheck);\n-        }\n+        } else {\n+        }\n+    }\n+\n+    @restricted(noexternaluse.class)\n+    public @nonnull formvalidation updatedirectlynow(boolean signaturecheck) throws ioexception {\n+        return updatedata(downloadservice.loadjson(new url(geturl() + ""?id="" + urlencoder.encode(getid(), ""utf-8"") + ""&version="" + urlencoder.encode(jenkins.version, ""utf-8""))), signaturecheck);\n+        downloadsettings.checkpostbackaccess();\ndiff --git a/core/src/main/java/hudson/util/formvalidation.java b/core/src/main/java/hudson/util/formvalidation.java\n@@ -239,9 +239,13 @@ private static formvalidation _errorwithmarkup(final string message, final kind\n+                staplerrequest req = stapler.getcurrentrequest();\n+                if (req == null) { // being called from some other context\n+                    return message;\n+                }\n-                        stapler.getcurrentrequest().getcontextpath()+ jenkins.resource_path+""/images/none.gif' height=16 width=1>""+\n+                        req.getcontextpath()+ jenkins.resource_path+""/images/none.gif' height=16 width=1>""+\ndiff --git a/core/src/main/java/jenkins/model/downloadsettings.java b/core/src/main/java/jenkins/model/downloadsettings.java\n@@ -0,0 +1,134 @@\n+/*\n+ * the mit license\n+ *\n+ * copyright 2014 jesse glick.\n+ *\n+ * permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the ""software""), to deal\n+ * in the software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the software, and to permit persons to whom the software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * the above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the software.\n+ *\n+ * the software is provided ""as is"", without warranty of any kind, express or\n+ * implied, including but not limited to the warranties of merchantability,\n+ * fitness for a particular purpose and noninfringement. in no event shall the\n+ * authors or copyright holders be liable for any claim, damages or other\n+ * liability, whether in an action of contract, tort or otherwise, arising from,\n+ * out of or in connection with the software or the use or other dealings in\n+ * the software.\n+ */\n+\n+package jenkins.model;\n+\n+import hudson.extension;\n+import hudson.main;\n+import hudson.model.administrativemonitor;\n+import hudson.model.asyncperiodicwork;\n+import hudson.model.downloadservice;\n+import hudson.model.tasklistener;\n+import hudson.model.updatesite;\n+import hudson.util.formvalidation;\n+import java.io.ioexception;\n+import net.sf.json.jsonobject;\n+import org.acegisecurity.accessdeniedexception;\n+import org.kohsuke.accmod.restricted;\n+import org.kohsuke.accmod.restrictions.noexternaluse;\n+import org.kohsuke.stapler.httpresponse;\n+import org.kohsuke.stapler.staplerrequest;\n+\n+/**\n+ * lets user configure how metadata files should be downloaded.\n+ * @see updatesite\n+ * @see downloadservice\n+ */\n+@restricted(noexternaluse.class) // no clear reason for this to be an api\n+@extension public final class downloadsettings extends globalconfiguration {\n+\n+    public static downloadsettings get() {\n+        return jenkins.getinstance().getinjector().getinstance(downloadsettings.class);\n+    }\n+\n+    private boolean usebrowser = false;\n+\n+    public downloadsettings() {\n+        load();\n+    }\n+\n+    @override public boolean configure(staplerrequest req, jsonobject json) throws formexception {\n+        req.bindjson(this, json);\n+        return true;\n+    }\n+\n+    public boolean isusebrowser() {\n+        return usebrowser;\n+    }\n+\n+    public void setusebrowser(boolean usebrowser) {\n+        this.usebrowser = usebrowser;\n+        save();\n+    }\n+\n+    @override public globalconfigurationcategory getcategory() {\n+        return globalconfigurationcategory.get(globalconfigurationcategory.security.class);\n+    }\n+\n+    public static boolean usepostback() {\n+        return get().isusebrowser() && jenkins.getinstance().haspermission(jenkins.administer);\n+    }\n+\n+    public static void checkpostbackaccess() throws accessdeniedexception {\n+        if (!get().isusebrowser()) {\n+            throw new accessdeniedexception(""browser-based download disabled"");\n+        }\n+        jenkins.getinstance().checkpermission(jenkins.administer);\n+    }\n+\n+    @extension public static final class dailycheck extends asyncperiodicwork {\n+\n+        public dailycheck() {\n+            super(""download metadata"");\n+        }\n+\n+        @override public long getrecurrenceperiod() {\n+            return day;\n+        }\n+\n+        @override public long getinitialdelay() {\n+            return main.isunittest ? day : 0;\n+        }\n+\n+        @override protected void execute(tasklistener listener) throws ioexception, interruptedexception {\n+            if (get().isusebrowser()) {\n+                return;\n+            }\n+            boolean due = false;\n+            for (updatesite site : jenkins.getinstance().getupdatecenter().getsites()) {\n+                if (site.isdue()) {\n+                    due = true;\n+                    break;\n+                }\n+            }\n+            if (!due) {\n+                return;\n+            }\n+            httpresponse rsp = jenkins.getinstance().getpluginmanager().docheckupdatesserver();\n+            if (rsp instanceof formvalidation) {\n+                listener.error(((formvalidation) rsp).renderhtml());\n+            }\n+        }\n+\n+    }\n+\n+    @extension public static final class warning extends administrativemonitor {\n+\n+        @override public boolean isactivated() {\n+            return downloadsettings.get().isusebrowser();\n+        }\n+\n+    }\n+\n+}\ndiff --git a/core/src/main/java/jenkins/util/jsonsignaturevalidator.java b/core/src/main/java/jenkins/util/jsonsignaturevalidator.java\n@@ -73,6 +73,9 @@ public formvalidation verifysignature(jsonobject o) throws ioexception {\n+                if (j == null) {\n+                    return formvalidation.error(""jenkins has shut down, cannot find root cas"");\n+                }\ndiff --git a/core/src/main/resources/hudson/pluginmanager/advanced.jelly b/core/src/main/resources/hudson/pluginmanager/advanced.jelly\n@@ -96,7 +96,8 @@ the software.\n-      <form method=""post"" action=""checkupdates"">\n+      <j:invokestatic var=""ds"" classname=""jenkins.model.downloadsettings"" method=""get""/>\n+      <form method=""post"" action=""${ds.usebrowser ? 'checkupdates' : 'checkupdatesserver'}"">\ndiff --git a/core/src/main/resources/hudson/model/updatecenter/pagedecoratorimpl/footer.jelly b/core/src/main/resources/hudson/model/updatecenter/pagedecoratorimpl/footer.jelly\n@@ -31,6 +31,8 @@ the software.\n+  <j:invokestatic var=""enabled"" classname=""jenkins.model.downloadsettings"" method=""usepostback""/>\n+  <j:if test=""${enabled}"">\n@@ -45,4 +47,5 @@ the software.\n+  </j:if>\ndiff --git a/core/src/main/resources/jenkins/model/downloadsettings/warning/message.jelly b/core/src/main/resources/jenkins/model/downloadsettings/warning/message.jelly\n@@ -0,0 +1,34 @@\n+<?xml version=""1.0"" encoding=""utf-8""?>\n+<!--\n+the mit license\n+\n+copyright 2015 jesse glick.\n+\n+permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the ""software""), to deal\n+in the software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the software, and to permit persons to whom the software is\n+furnished to do so, subject to the following conditions:\n+\n+the above copyright notice and this permission notice shall be included in\n+all copies or substantial portions of the software.\n+\n+the software is provided ""as is"", without warranty of any kind, express or\n+implied, including but not limited to the warranties of merchantability,\n+fitness for a particular purpose and noninfringement. in no event shall the\n+authors or copyright holders be liable for any claim, damages or other\n+liability, whether in an action of contract, tort or otherwise, arising from,\n+out of or in connection with the software or the use or other dealings in\n+the software.\n+-->\n+\n+<?jelly escape-by-default='true'?>\n+<j:jelly xmlns:j=""jelly:core"" xmlns:f=""/lib/form"">\n+    <div class=""warning"">\n+        <form method=""post"" action=""${rooturl}/${it.url}/disable"">\n+            <j:out value=""${%blurb(rooturl)}""/>\n+            <f:submit value=""${%dismiss}""/>\n+        </form>\n+    </div>\n+</j:jelly>\ndiff --git a/core/src/main/resources/jenkins/model/downloadsettings/warning/message.properties b/core/src/main/resources/jenkins/model/downloadsettings/warning/message.properties\n@@ -0,0 +1,26 @@\n+# the mit license\n+#\n+# copyright 2015 jesse glick.\n+#\n+# permission is hereby granted, free of charge, to any person obtaining a copy\n+# of this software and associated documentation files (the ""software""), to deal\n+# in the software without restriction, including without limitation the rights\n+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+# copies of the software, and to permit persons to whom the software is\n+# furnished to do so, subject to the following conditions:\n+#\n+# the above copyright notice and this permission notice shall be included in\n+# all copies or substantial portions of the software.\n+#\n+# the software is provided ""as is"", without warranty of any kind, express or\n+# implied, including but not limited to the warranties of merchantability,\n+# fitness for a particular purpose and noninfringement. in no event shall the\n+# authors or copyright holders be liable for any claim, damages or other\n+# liability, whether in an action of contract, tort or otherwise, arising from,\n+# out of or in connection with the software or the use or other dealings in\n+# the software.\n+\n+blurb=\\n+    you currently are using browser-based download to retrieve metadata for jenkins plugins and tools. \\n+    this has reliability issues and is not considered fully secure. \\n+    consider <a href=""{0}/configuresecurity"">switching to server-based download</a>.\ndiff --git a/core/src/main/resources/jenkins/model/downloadsettings/config.groovy b/core/src/main/resources/jenkins/model/downloadsettings/config.groovy\n@@ -0,0 +1,8 @@\n+package jenkins.security.downloadsettings\n+\n+def f = namespace(lib.formtaglib)\n+\n+// todo avoid indentation somehow\n+f.entry(field: ""usebrowser"") {\n+    f.checkbox(title: _(""use browser for metadata download""))\n+}\ndiff --git a/core/src/main/resources/jenkins/model/downloadsettings/help-usebrowser.html b/core/src/main/resources/jenkins/model/downloadsettings/help-usebrowser.html\n@@ -0,0 +1,10 @@\n+<p>\n+    check to force the user’s browser to download metadata rather than jenkins itself doing it.\n+    actual file downloads (plugins, tools) will still happen from jenkins itself,\n+    but this can be used to at least <em>see</em> new metadata when jenkins cannot access the internet\n+    (but your own browser can, perhaps using some special proxy that jenkins is not configured to use).\n+</p>\n+<p>\n+    use of browser mode is discouraged.\n+    it has robustness problems and has been limited to users with overall/administer.\n+</p>\ndiff --git a/test/pom.xml b/test/pom.xml\n@@ -197,7 +197,6 @@ the software.\n-          <redirecttestoutputtofile>true</redirecttestoutputtofile>\n@@ -257,6 +256,17 @@ the software.\n+    <profile>\n+      <id>all-tests</id>\n+      <activation>\n+        <property>\n+          <name>!test</name>\n+        </property>\n+      </activation>\n+      <properties>\n+        <maven.test.redirecttestoutputtofile>true</maven.test.redirecttestoutputtofile>\n+      </properties>\n+    </profile>\ndiff --git a/test/src/test/java/hudson/model/downloadservice2test.java b/test/src/test/java/hudson/model/downloadservice2test.java\n@@ -0,0 +1,64 @@\n+/*\n+ * the mit license\n+ *\n+ * copyright 2015 jesse glick.\n+ *\n+ * permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the ""software""), to deal\n+ * in the software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the software, and to permit persons to whom the software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * the above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the software.\n+ *\n+ * the software is provided ""as is"", without warranty of any kind, express or\n+ * implied, including but not limited to the warranties of merchantability,\n+ * fitness for a particular purpose and noninfringement. in no event shall the\n+ * authors or copyright holders be liable for any claim, damages or other\n+ * liability, whether in an action of contract, tort or otherwise, arising from,\n+ * out of or in connection with the software or the use or other dealings in\n+ * the software.\n+ */\n+\n+package hudson.model;\n+\n+import hudson.util.formvalidation;\n+import java.net.url;\n+import java.util.set;\n+import java.util.treeset;\n+import net.sf.json.jsonobject;\n+import org.junit.test;\n+import static org.junit.assert.*;\n+import org.junit.rule;\n+import org.jvnet.hudson.test.jenkinsrule;\n+import org.jvnet.hudson.test.withoutjenkins;\n+\n+//@issue(""security-163"")\n+public class downloadservice2test {\n+\n+    @rule public jenkinsrule r = new jenkinsrule();\n+\n+    @test public void updatenow() throws exception {\n+        for (downloadservice.downloadable d : downloadservice.downloadable.all()) {\n+            formvalidation v = d.updatenow();\n+            assertequals(v.tostring(), formvalidation.kind.ok, v.kind);\n+        }\n+    }\n+\n+    @withoutjenkins\n+    @test public void loadjsonhtml() throws exception {\n+        assertroots(""[list, signature]"", ""hudson.tasks.maven.maveninstaller.json.html""); // format used by most tools\n+        assertroots(""[data, signature, version]"", ""hudson.tools.jdkinstaller.json.html""); // anomalous format\n+    }\n+\n+    private static void assertroots(string expected, string file) throws exception {\n+        url resource = downloadservice2test.class.getresource(file);\n+        assertnotnull(file, resource);\n+        jsonobject json = jsonobject.fromobject(downloadservice.loadjsonhtml(resource));\n+        @suppresswarnings(""unchecked"") set<string> keyset = json.keyset();\n+        assertequals(expected, new treeset<string>(keyset).tostring());\n+    }\n+\n+}\ndiff --git a/test/src/test/java/hudson/model/downloadservicetest.java b/test/src/test/java/hudson/model/downloadservicetest.java\n@@ -1,13 +1,17 @@\n+import java.io.ioexception;\n+import java.net.url;\n+import java.util.set;\n+import java.util.treeset;\n+import jenkins.model.downloadsettings;\n+import org.jvnet.hudson.test.withoutjenkins;\n-import java.io.ioexception;\n-\n@@ -20,16 +24,14 @@ public class downloadservicetest extends hudsontestcase {\n+        if (jenkins == null) {\n+            return;\n+        }\n-    }\n-\n-    @override\n-    protected void teardown() throws exception {\n-        downloadable.all().remove(job);\n-        super.teardown();\n+        downloadsettings.get().setusebrowser(true);\n@@ -59,4 +61,20 @@ public void dodata(staplerresponse rsp) throws ioexception {\n+\n+    @withoutjenkins // could have been in core/src/test/ but update-center.json was already in test/src/test/ (used by updatesitetest)\n+    public void testloadjson() throws exception {\n+        assertroots(""[list]"", ""hudson.tasks.maven.maveninstaller.json""); // format used by most tools\n+        assertroots(""[data, version]"", ""hudson.tools.jdkinstaller.json""); // anomalous format\n+        assertroots(""[connectioncheckurl, core, id, plugins, signature, updatecenterversion]"", ""update-center.json"");\n+    }\n+\n+    private static void assertroots(string expected, string file) throws exception {\n+        url resource = downloadservicetest.class.getresource(file);\n+        assertnotnull(file, resource);\n+        jsonobject json = jsonobject.fromobject(downloadservice.loadjson(resource));\n+        @suppresswarnings(""unchecked"") set<string> keyset = json.keyset();\n+        assertequals(expected, new treeset<string>(keyset).tostring());\n+    }\n+\ndiff --git a/test/src/test/java/hudson/model/updatecentertest.java b/test/src/test/java/hudson/model/updatecentertest.java\n@@ -26,7 +26,6 @@\n-import org.apache.commons.io.ioutils;\n@@ -57,8 +56,8 @@ public class updatecentertest {\n-        string jsonp = ioutils.tostring(url.openstream());\n-        jsonobject json = jsonobject.fromobject(jsonp.substring(jsonp.indexof('(') + 1, jsonp.lastindexof(')')));\n+        string jsonp = downloadservice.loadjson(url);\n+        jsonobject json = jsonobject.fromobject(jsonp);\ndiff --git a/test/src/test/java/hudson/model/updatesitetest.java b/test/src/test/java/hudson/model/updatesitetest.java\n@@ -128,10 +128,4 @@ public void shutdownwebserver() throws exception {\n-    @test public void updatedirectlywithhtml() throws exception {\n-        updatesite us = new updatesite(""default"", new url(baseurl, ""update-center.json.html"").toexternalform());\n-        assertnull(us.getplugin(""adaptiveplugin""));\n-        assertequals(formvalidation.ok(), us.updatedirectly(false).get());\n-        assertnotnull(us.getplugin(""adaptiveplugin""));\n-    }\ndiff --git a/test/src/test/resources/hudson/model/hudson.tasks.maven.maveninstaller.json b/test/src/test/resources/hudson/model/hudson.tasks.maven.maveninstaller.json\n@@ -0,0 +1,137 @@\n+downloadservice.post('hudson.tasks.maven.maveninstaller',{""list"": [\n+    {\n+    ""id"": ""3.1.1"",\n+    ""name"": ""3.1.1"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.1.1-bin.zip""\n+  },\n+    {\n+    ""id"": ""3.1.0"",\n+    ""name"": ""3.1.0"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.1.0-bin.zip""\n+  },\n+    {\n+    ""id"": ""3.0.5"",\n+    ""name"": ""3.0.5"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.0.5-bin.zip""\n+  },\n+    {\n+    ""id"": ""3.0.4"",\n+    ""name"": ""3.0.4"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.0.4-bin.zip""\n+  },\n+    {\n+    ""id"": ""3.0.3"",\n+    ""name"": ""3.0.3"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.0.3-bin.zip""\n+  },\n+    {\n+    ""id"": ""3.0.2"",\n+    ""name"": ""3.0.2"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.0.2-bin.zip""\n+  },\n+    {\n+    ""id"": ""3.0.1"",\n+    ""name"": ""3.0.1"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.0.1-bin.zip""\n+  },\n+    {\n+    ""id"": ""3.0"",\n+    ""name"": ""3.0"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.0-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.2.1"",\n+    ""name"": ""2.2.1"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-2.2.1-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.2.0"",\n+    ""name"": ""2.2.0"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-2.2.0-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.1.0"",\n+    ""name"": ""2.1.0"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-2.1.0-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.0.11"",\n+    ""name"": ""2.0.11"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-2.0.11-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.0.10"",\n+    ""name"": ""2.0.10"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-2.0.10-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.0.9"",\n+    ""name"": ""2.0.9"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-2.0.9-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.0.8"",\n+    ""name"": ""2.0.8"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-2.0.8-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.0.7"",\n+    ""name"": ""2.0.7"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0.7-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.0.6"",\n+    ""name"": ""2.0.6"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0.6-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.0.5"",\n+    ""name"": ""2.0.5"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0.5-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.0.4"",\n+    ""name"": ""2.0.4"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0.4-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.0.3"",\n+    ""name"": ""2.0.3"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0.3-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.0.2"",\n+    ""name"": ""2.0.2"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0.2-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.0.1"",\n+    ""name"": ""2.0.1"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0.1-bin.zip""\n+  },\n+    {\n+    ""id"": ""2.0"",\n+    ""name"": ""2.0"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0-bin.zip""\n+  },\n+    {\n+    ""id"": ""1.1"",\n+    ""name"": ""1.1"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-1.1.zip""\n+  },\n+    {\n+    ""id"": ""1.0.2"",\n+    ""name"": ""1.0.2"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-1.0.2.zip""\n+  },\n+    {\n+    ""id"": ""1.0.1"",\n+    ""name"": ""1.0.1"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-1.0.1.zip""\n+  },\n+    {\n+    ""id"": ""1.0"",\n+    ""name"": ""1.0"",\n+    ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-1.0.zip""\n+  }\n+]})\ndiff --git a/test/src/test/resources/hudson/model/hudson.tasks.maven.maveninstaller.json.html b/test/src/test/resources/hudson/model/hudson.tasks.maven.maveninstaller.json.html\n@@ -0,0 +1,158 @@\n+﻿<!doctype html><html><head><meta http-equiv='content-type' content='text/html;charset=utf-8' /></head><body><script>window.onload = function () { window.parent.postmessage(json.stringify(\n+{\n+  ""list"":   [\n+        {\n+      ""id"": ""3.2.2"",\n+      ""name"": ""3.2.2"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.2.2-bin.zip""\n+    },\n+        {\n+      ""id"": ""3.2.1"",\n+      ""name"": ""3.2.1"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.2.1-bin.zip""\n+    },\n+        {\n+      ""id"": ""3.1.1"",\n+      ""name"": ""3.1.1"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.1.1-bin.zip""\n+    },\n+        {\n+      ""id"": ""3.1.0"",\n+      ""name"": ""3.1.0"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.1.0-bin.zip""\n+    },\n+        {\n+      ""id"": ""3.0.5"",\n+      ""name"": ""3.0.5"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.0.5-bin.zip""\n+    },\n+        {\n+      ""id"": ""3.0.4"",\n+      ""name"": ""3.0.4"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.0.4-bin.zip""\n+    },\n+        {\n+      ""id"": ""3.0.3"",\n+      ""name"": ""3.0.3"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.0.3-bin.zip""\n+    },\n+        {\n+      ""id"": ""3.0.2"",\n+      ""name"": ""3.0.2"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.0.2-bin.zip""\n+    },\n+        {\n+      ""id"": ""3.0.1"",\n+      ""name"": ""3.0.1"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.0.1-bin.zip""\n+    },\n+        {\n+      ""id"": ""3.0"",\n+      ""name"": ""3.0"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-3.0-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.2.1"",\n+      ""name"": ""2.2.1"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-2.2.1-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.2.0"",\n+      ""name"": ""2.2.0"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-2.2.0-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.1.0"",\n+      ""name"": ""2.1.0"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-2.1.0-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.0.11"",\n+      ""name"": ""2.0.11"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-2.0.11-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.0.10"",\n+      ""name"": ""2.0.10"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-2.0.10-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.0.9"",\n+      ""name"": ""2.0.9"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-2.0.9-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.0.8"",\n+      ""name"": ""2.0.8"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/apache-maven-2.0.8-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.0.7"",\n+      ""name"": ""2.0.7"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0.7-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.0.6"",\n+      ""name"": ""2.0.6"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0.6-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.0.5"",\n+      ""name"": ""2.0.5"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0.5-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.0.4"",\n+      ""name"": ""2.0.4"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0.4-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.0.3"",\n+      ""name"": ""2.0.3"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0.3-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.0.2"",\n+      ""name"": ""2.0.2"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0.2-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.0.1"",\n+      ""name"": ""2.0.1"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0.1-bin.zip""\n+    },\n+        {\n+      ""id"": ""2.0"",\n+      ""name"": ""2.0"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-2.0-bin.zip""\n+    },\n+        {\n+      ""id"": ""1.1"",\n+      ""name"": ""1.1"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-1.1.zip""\n+    },\n+        {\n+      ""id"": ""1.0.2"",\n+      ""name"": ""1.0.2"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-1.0.2.zip""\n+    },\n+        {\n+      ""id"": ""1.0.1"",\n+      ""name"": ""1.0.1"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-1.0.1.zip""\n+    },\n+        {\n+      ""id"": ""1.0"",\n+      ""name"": ""1.0"",\n+      ""url"": ""http://archive.apache.org/dist/maven/binaries/maven-1.0.zip""\n+    }\n+  ],\n+  ""signature"":   {\n+    ""certificates"": [""miicmtccayecbqderb70ma0gcsqgsib3dqebbauamigkmqswcqydvqqgewjvuzetmbega1uecbmkq2fsawzvcm5pyterma8ga1uebxmiu2fuiepvc2uxgdawbgnvbaotd0plbmtpbnmguhjvamvjddeambgga1ueaxmrs29oc3vrzsblyxdhz3vjagkxhtabbgkqhkig9w0bcqewdmtrqgtvahn1a2uub3jnmb4xdte0mdeynzixmdqwn1oxdte1mdeynzixmdqwn1owxjelmakga1uebhmcvvmxezarbgnvbagtcknhbglmb3juawexgdawbgnvbaotd0plbmtpbnmguhjvamvjddegmb4ga1ueaxmxq29tbxvuaxr5ifvwzgf0zsbdzw50zxiwxdanbgkqhkig9w0baqefaanladbiakeavayxdnnmyrevqkfsmmgnxj2mfmgur+jjavjx5wjc6mfiq1x33ps7qprhaklhmcg720xe30e2+i/5r00xcua+cwidaqabma0gcsqgsib3dqebbauaa4ibaqcv9qytq4miozdu/uzcvj2dfj8ms39ativtupihcwagcoir1sajki4dtdbz9wfnhh67tqrssowt7+hbjbvvh8wp1bi+oujwgqmjctuy14tbya3i5qzqm05svznvyy9ce5uxxnxe+fmwtrvnywbgpopgg9xnfesfn7nujpaybgm6fikbmepoel38ipujb5pbdvm+f1zpaejxnhgxnj3culu0xsi0h2wkcak1cjalacj+yswpzju5/xnjqsibxaeowh4u3jdqdgmsiovgzwndypvr/xhlt2mvdxhsu7kpnb8ojz9nc62g7qrc22bgua1cgvilljii2sf/xlxlu9csksf+""],\n+    ""correct_digest"": ""ncz9z7hawomg7mnvrevusr5b+ua="",\n+    ""correct_signature"": ""ne6nbps70d9hh1gomiklvhj+zlbnjbmmvpn0wn7mwf14mpvlcenkjouow9b1bq6ay5l6bj4ivvocbvfhjyrrcg=="",\n+    ""digest"": ""2jmj7l5rsw0yvb/vlwaykk/ybwk="",\n+    ""signature"": ""pzsbggnxzyoz2eltuahwshl0uz/bz50xcsud/dykq8fayfqt27n2ghzetxaukia4lfptlqtuim9+nysebxyutq==""\n+  }\n+}\n+),'*'); };</script></body></html>"
CVE-2015-5224,"['https://bugzilla.redhat.com/show_bug.cgi?id=1256686', 'https://github.com/karelzak/util-linux/commit/bde91c85bdc77975155058276f99d2e0f5eab5a9']","('NVD-CWE-Other', 'Insufficient Information')","Red Hat, Inc.",7.5,karelzak,util-linux,bde91c85bdc77975155058276f99d2e0f5eab5a9,1,The mkostemp function in login-utils in util-linux when used incorrectly allows remote attackers to cause file name collision and possibly other attacks .,"chsh , chfn , vipw : fix filenames collision the utils when compiled without libuser then mkostemp ( ) ing '' /etc/ % s.xxxxxx '' where the filename prefix is argv [ 0 ] basename . an attacker could repeatedly execute the util with modified argv [ 0 ] and after many many attempts mkostemp ( ) may generate suffix which makes sense . the result maybe temporary file with name like rc.status ld.so.preload or krb5.keytab , etc . note that distros usually use libuser based ch { sh , fn } or stuff from shadow-utils . it 's probably very minor security bug . addresses : cve-2015-5224 signed-off-by : karel zak < kzak @ redhat.com >","diff - - git a / include / fileutils . h b / include / fileutils . h \ n @ @ - 7 , 14 + 7 , 14 @ @ \ n - extern int xmkstemp ( char * * tmpname , char * dir ) ; \ n + extern int xmkstemp ( char * * tmpname , const char * dir , const char * prefix ) ; \ n - static inline file * xfmkstemp ( char * * tmpname , char * dir ) \ n + static inline file * xfmkstemp ( char * * tmpname , const char * dir , const char * prefix ) \ n - fd = xmkstemp ( tmpname , dir ) ; \ n + fd = xmkstemp ( tmpname , dir , prefix ) ; \ ndiff - - git a / lib / fileutils . c b / lib / fileutils . c \ n @ @ - 15 , 27 + 15 , 20 @ @ \ n - int xmkstemp ( char * * tmpname , char * dir ) \ n + int xmkstemp ( char * * tmpname , const char * dir , const char * prefix ) \ n - char * tmpenv ; \ n + const char * tmpenv ; \ n - if ( dir ! = null ) \ n - tmpenv = dir ; \ n - else \ n - tmpenv = getenv ( ""tmpdir"" ) ; \ n - \ n - if ( tmpenv ) \ n - rc = asprintf ( & localtmp , ""%s/%s.xxxxxx"" , tmpenv , \ n - program_invocation_short_name ) ; \ n - else \ n - rc = asprintf ( & localtmp , ""%s/%s.xxxxxx"" , _path_tmp , \ n - program_invocation_short_name ) ; \ n + tmpenv = dir ? dir : getenv ( ""tmpdir"" ) ; \ n + if ( ! tmpenv ) \ n + tmpenv = _path_tmp ; \ n + rc = asprintf ( & localtmp , ""%s/%s.xxxxxx"" , tmpenv , prefix ) ; \ n @ @ - 107 , 7 + 100 , 7 @ @ int main ( void ) \ n - f = xfmkstemp ( & tmpname , null ) ; \ n + f = xfmkstemp ( & tmpname , null , ""test"" ) ; \ ndiff - - git a / login - utils / chfn . c b / login - utils / chfn . c \ n @ @ - 373 , 7 + 373 , 7 @ @ static int save_new_data ( struct chfn_control * ctl ) \ n - if ( setpwnam ( ctl - > pw ) < 0 ) { \ n + if ( setpwnam ( ctl - > pw , "".chfn"" ) < 0 ) { \ ndiff - - git a / login - utils / chsh . c b / login - utils / chsh . c \ n @ @ - 323 , 7 + 323 , 7 @ @ int main ( int argc , char * * argv ) \ n - if ( setpwnam ( pw ) < 0 ) \ n + if ( setpwnam ( pw , "".chsh"" ) < 0 ) \ ndiff - - git a / login - utils / setpwnam . c b / login - utils / setpwnam . c \ n @ @ - 71 , 7 + 71 , 7 @ @ static void pw_init ( void ) ; \ n - int setpwnam ( struct passwd * pwd ) \ n + int setpwnam ( struct passwd * pwd , const char * prefix ) \ n @ @ - 81 , 11 + 81 , 10 @ @ int setpwnam ( struct passwd * pwd ) \ n - char * atomic_dir = ""/etc"" ; \ n - if ( ( fp = xfmkstemp ( & tmpname , atomic_dir ) ) = = null ) \ n + if ( ( fp = xfmkstemp ( & tmpname , ""/etc"" , prefix ) ) = = null ) \ ndiff - - git a / login - utils / setpwnam . h b / login - utils / setpwnam . h \ n @ @ - 11 , 6 + 11 , 8 @ @ \ n + #ifndef util_linux_setpwnam_h\n+#define util_linux_setpwnam_h\n@@ -26,4 +28,6 @@\n-extern int setpwnam (struct passwd *pwd);\n+extern int setpwnam (struct passwd *pwd, const char *prefix);\n+\n+#endif /* util_linux_setpwnam_h */\ndiff --git a/login-utils/vipw.c b/login-utils/vipw.c\n@@ -135,9 +135,8 @@ static file * pw_tmpfile(int lockfd)\n-	char *dir = ""/etc"";\n-	if ((fd = xfmkstemp(&tmpname, dir)) == null) {\n+	if ((fd = xfmkstemp(&tmpname, ""/etc"", "".vipw"")) == null) {"
CVE-2016-10251,"['https://blogs.gentoo.org/ago/2016/11/04/jasper-use-of-uninitialized-value-in-jpc_pi_nextcprl-jpc_t2cod-c/', 'https://github.com/mdadams/jasper/commit/1f0dfe5a42911b6880a1445f13f6d615ddb55387']","('CWE-190', 'Integer Overflow or Wraparound')",MITRE,6.8,mdadams,jasper,1f0dfe5a42911b6880a1445f13f6d615ddb55387,1,"Integer overflow in the jpc_pi_nextcprl function in jpc_t2cod.c in JasPer before 1.900.20 allows remote attackers to have unspecified impact via a crafted file , which triggers use of an uninitialized value .",fixed an integer overflow problem in the jpc codec that later resulted in the use of uninitialized data .,"diff - - git a / src / libjasper / jpc / jpc_t2cod . c b / src / libjasper / jpc / jpc_t2cod . c \ n @ @ - 432 , 18 + 432 , 18 @ @ static int jpc_pi_nextcprl ( register jpc_pi_t * pi ) \ n - pi - > xstep = pi - > picomp - > hsamp * ( 1 < < ( pirlvl - > prcwidthexpn + \ n - pi - > picomp - > numrlvls - 1 ) ) ; \ n - pi - > ystep = pi - > picomp - > vsamp * ( 1 < < ( pirlvl - > prcheightexpn + \ n - pi - > picomp - > numrlvls - 1 ) ) ; \ n + pi - > xstep = pi - > picomp - > hsamp * ( jas_cast ( uint_fast32_t , 1 ) < < \ n + ( pirlvl - > prcwidthexpn + pi - > picomp - > numrlvls - 1 ) ) ; \ n + pi - > ystep = pi - > picomp - > vsamp * ( jas_cast ( uint_fast32_t , 1 ) < < \ n + ( pirlvl - > prcheightexpn + pi - > picomp - > numrlvls - 1 ) ) ; \ n - pi - > xstep = jas_min ( pi - > xstep , pi - > picomp - > hsamp * ( 1 < < \ n - ( pirlvl - > prcwidthexpn + pi - > picomp - > numrlvls - \ n - rlvlno - 1 ) ) ) ; \ n - pi - > ystep = jas_min ( pi - > ystep , pi - > picomp - > vsamp * ( 1 < < \ n - ( pirlvl - > prcheightexpn + pi - > picomp - > numrlvls - \ n - rlvlno - 1 ) ) ) ; \ n + pi - > xstep = jas_min ( pi - > xstep , pi - > picomp - > hsamp * \ n + ( jas_cast ( uint_fast32_t , 1 ) < < ( pirlvl - > prcwidthexpn + \ n + pi - > picomp - > numrlvls - rlvlno - 1 ) ) ) ; \ n + pi - > ystep = jas_min ( pi - > ystep , pi - > picomp - > vsamp * \ n + ( jas_cast ( uint_fast32_t , 1 ) < < ( pirlvl - > prcheightexpn + \ n + pi - > picomp - > numrlvls - rlvlno - 1 ) ) ) ; \ ndiff - - git a / src / libjasper / jpc / jpc_t2cod . h b / src / libjasper / jpc / jpc_t2cod . h \ n @ @ - 129 , 10 + 129 , 10 @ @ typedef struct { \ n - int hsamp ; \ n + uint_fast32_t hsamp ; \ n - int vsamp ; \ n + uint_fast32_t vsamp ; \ n @ @ - 171 , 32 + 171 , 32 @ @ typedef struct { \ n - int x ; \ n + uint_fast32_t x ; \ n - int y ; \ n + uint_fast32_t y ; \ n - int xstep ; \ n + uint_fast32_t xstep ; \ n - int ystep ; \ n + uint_fast32_t ystep ; \ n - int xstart ; \ n + uint_fast32_t xstart ; \ n - int ystart ; \ n + uint_fast32_t ystart ; \ n - int xend ; \ n + uint_fast32_t xend ; \ n - int yend ; \ n + uint_fast32_t yend ;"
CVE-2016-10156,"['https://github.com/systemd/systemd/commit/06eeacb6fe029804f296b065b3ce91e796e1cd0e', 'https://github.com/systemd/systemd/commit/ee735086f8670be1591fa9593e80dd60163a7a2f']","('CWE-264', 'Permissions, Privileges, and Access Controls')",MITRE,7.2,systemd,systemd,ee735086f8670be1591fa9593e80dd60163a7a2f,1,"A flaw in systemd v228 in /src/basic/fs-util.c caused world writable suid files to be created when using the systemd timers features , allowing local attackers to escalate their privileges to root . This is fixed in v229 .",util-lib : use mode_invalid as invalid value for mode_t everywhere,"diff - - git a / src / basic / fs - util . c b / src / basic / fs - util . c \ n @ @ - 311 , 7 + 311 , 7 @ @ int touch_file ( const char * path , bool parents , usec_t stamp , uid_t uid , gid_t gi \ n - if ( mode > 0 ) { \ n + if ( mode ! = mode_invalid ) { \ n @ @ - 338 , 7 + 338 , 7 @ @ int touch_file ( const char * path , bool parents , usec_t stamp , uid_t uid , gid_t gi \ n - return touch_file ( path , false , usec_infinity , uid_invalid , gid_invalid , 0 ) ; \ n + return touch_file ( path , false , usec_infinity , uid_invalid , gid_invalid , mode_invalid ) ; \ ndiff - - git a / src / core / timer . c b / src / core / timer . c \ n @ @ - 519 , 7 + 519 , 7 @ @ static void timer_enter_running ( timer * t ) { \ n - touch_file ( t - > stamp_path , true , t - > last_trigger . realtime , uid_invalid , gid_invalid , 0 ) ; \ n + touch_file ( t - > stamp_path , true , t - > last_trigger . realtime , uid_invalid , gid_invalid , mode_invalid ) ; \ n @ @ - 555 , 7 + 555 , 7 @ @ static int timer_start ( unit * u ) { \ n - touch_file ( t - > stamp_path , true , usec_infinity , uid_invalid , gid_invalid , 0 ) ; \ n + touch_file ( t - > stamp_path , true , usec_infinity , uid_invalid , gid_invalid , mode_invalid ) ; \ ndiff - - git a / src / test / test - conf - files . c b / src / test / test - conf - files . c \ n @ @ - 26 , 6 + 26 , 7 @ @ \ n + #include ""parse-util.h""\n@@ -40,7 +41,7 @@ static void setup_test_dir(char *tmp_dir, const char *files, ...) {\n-                assert_se(touch_file(path, true, usec_infinity, uid_invalid, gid_invalid, 0) == 0);\n+                assert_se(touch_file(path, true, usec_infinity, uid_invalid, gid_invalid, mode_invalid) == 0);"
CVE-2016-2107,"['http://www.oracle.com/technetwork/security-advisory/cpujan2018-3236628.html', 'http://www.oracle.com/technetwork/security-advisory/cpujul2016-2881720.html', 'http://www.oracle.com/technetwork/security-advisory/cpujul2017-3236622.html', 'http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html', 'http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html', 'http://www.oracle.com/technetwork/security-advisory/cpuoct2017-3236626.html', 'http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html']","('CWE-310', 'Cryptographic Issues')","Red Hat, Inc.",2.6,openssl,openssl,70428eada9bc4cf31424d723d1f992baffeb0dfb,1,"The AES-NI implementation in OpenSSL before 1.0.1t and 1.0.2 before 1.0.2h does not consider memory allocation during a certain padding check , which allows remote attackers to obtain sensitive cleartext information via a padding-oracle attack against an AES CBC session . NOTE : this vulnerability exists because of an incorrect fix for CVE-2013-0169 .",check that we have enough padding characters . reviewed-by : emilia käsper < emilia @ openssl.org > cve-2016-2107 mr : # 2572,"diff - - git a / crypto / evp / e_aes_cbc_hmac_sha1 . c b / crypto / evp / e_aes_cbc_hmac_sha1 . c \ n @ @ - 59 , 6 + 59 , 7 @ @ \ n + #include ""internal/constant_time_locl.h""\n@@ -583,6 +584,8 @@ static int aesni_cbc_hmac_sha1_cipher(evp_cipher_ctx *ctx, unsigned char *out,\n+            ret &= constant_time_ge(maxpad, pad);\n+\ndiff --git a/crypto/evp/e_aes_cbc_hmac_sha256.c b/crypto/evp/e_aes_cbc_hmac_sha256.c\n@@ -59,6 +59,7 @@\n+#include ""internal/constant_time_locl.h""\n@@ -594,6 +595,8 @@ static int aesni_cbc_hmac_sha256_cipher(evp_cipher_ctx *ctx,\n+            ret &= constant_time_ge(maxpad, pad);\n+"
CVE-2016-9392,"['http://www.openwall.com/lists/oss-security/2016/11/17/1', 'https://blogs.gentoo.org/ago/2016/11/16/jasper-multiple-assertion-failure', 'https://bugzilla.redhat.com/show_bug.cgi?id=1396971', 'https://github.com/mdadams/jasper/commit/f7038068550fba0e41e1d0c355787f1dcd5bf330']","('NVD-CWE-Other', 'Other')",MITRE,4.3,mdadams,jasper,f7038068550fba0e41e1d0c355787f1dcd5bf330,1,The calcstepsizes function in jpc_dec.c in JasPer before 1.900.17 allows remote attackers to cause a denial of service ( assertion failure ) via a crafted file . < a href= '' http : //cwe.mitre.org/data/definitions/617.html '' > CWE-617 : Reachable Assertion < /a >,added some missing sanity checks on the data in a siz marker segment .,"diff - - git a / src / libjasper / jpc / jpc_cs . c b / src / libjasper / jpc / jpc_cs . c \ n @ @ - 489 , 6 + 489 , 8 @ @ static int jpc_siz_getparms ( jpc_ms_t * ms , jpc_cstate_t * cstate , \ n + siz - > comps = 0 ; \ n + \ n @ @ - 502 , 44 + 504 , 67 @ @ static int jpc_siz_getparms ( jpc_ms_t * ms , jpc_cstate_t * cstate , \ n - return - 1 ; \ n + goto error ; \ n - if ( ! siz - > width | | ! siz - > height | | ! siz - > tilewidth | | \ n - ! siz - > tileheight | | ! siz - > numcomps | | siz - > numcomps > 16384 ) { \ n - return - 1 ; \ n + if ( ! siz - > width | | ! siz - > height ) { \ n + jas_eprintf ( ""reference grid cannot have zero area\n"" ) ; \ n + goto error ; \ n - if ( siz - > tilexoff > = siz - > width | | siz - > tileyoff > = siz - > height ) { \ n - jas_eprintf ( ""all tiles are outside the image area\n"" ) ; \ n - return - 1 ; \ n + if ( ! siz - > tilewidth | | ! siz - > tileheight ) { \ n + jas_eprintf ( ""tile cannot have zero area\n"" ) ; \ n + goto error ; \ n + } \ n + if ( ! siz - > numcomps | | siz - > numcomps > 16384 ) { \ n + jas_eprintf ( ""number of components not in permissible range\n"" ) ; \ n + goto error ; \ n + if ( siz - > xoff > = siz - > width ) { \ n + jas_eprintf ( ""xosiz not in permissible range\n"" ) ; \ n + goto error ; \ n + } \ n + if ( siz - > yoff > = siz - > height ) { \ n + jas_eprintf ( ""yosiz not in permissible range\n"" ) ; \ n + goto error ; \ n + } \ n + if ( siz - > tilexoff > siz - > xoff | | siz - > tilexoff + siz - > tilewidth < = siz - > xoff ) { \ n + jas_eprintf ( ""xtosiz not in permissible range\n"" ) ; \ n + goto error ; \ n + } \ n + if ( siz - > tileyoff > siz - > yoff | | siz - > tileyoff + siz - > tileheight < = siz - > yoff ) { \ n + jas_eprintf ( ""ytosiz not in permissible range\n"" ) ; \ n + goto error ; \ n + } \ n + \ n - return - 1 ; \ n + goto error ; \ n - jas_free ( siz - > comps ) ; \ n - return - 1 ; \ n + goto error ; \ n - jas_free ( siz - > comps ) ; \ n - return - 1 ; \ n + goto error ; \ n - jas_free ( siz - > comps ) ; \ n - return - 1 ; \ n + goto error ; \ n - jas_free ( siz - > comps ) ; \ n - return - 1 ; \ n + goto error ; \ n + \ n + error : \ n + if ( siz - > comps ) { \ n + jas_free ( siz - > comps ) ; \ n + } \ n + return - 1 ;"
CVE-2016-5767,[],"('CWE-190', 'Integer Overflow or Wraparound')",MITRE,6.8,php,php-src,c395c6e5d7e8df37a21265ff76e48fe75ceb5ae6,1,"Integer overflow in the gdImageCreate function in gd.c in the GD Graphics Library ( aka libgd ) before 2.0.34RC1 , as used in PHP before 5.5.37 , 5.6.x before 5.6.23 , and 7.x before 7.0.8 , allows remote attackers to cause a denial of service ( heap-based buffer overflow and application crash ) or possibly have unspecified other impact via a crafted image dimensions .",ifixed bug # 72446 - integer overflow in gdimagepalettetotruecolor ( ) resulting in heap overflow,"diff - - git a / news b / news \ n @ @ - 18 , 6 + 18 , 8 @ @ php news \ n + . fixed bug #72446 (integer overflow in gdimagepalettetotruecolor() resulting\n+    in heap overflow). (pierre)\n- mbstring:\ndiff --git a/ext/gd/libgd/gd.c b/ext/gd/libgd/gd.c\n@@ -133,6 +133,10 @@ gdimageptr gdimagecreate (int sx, int sy)\n+	if (overflow2(sizeof(unsigned char *), sx)) {\n+		return null;\n+	}\n+\n@@ -1098,12 +1102,12 @@ void gdimageline (gdimageptr im, int x1, int y1, int x2, int y2, int color)\n-		/*\n+		/*\n-		gdimageaaline(im, x1, y1, x2, y2, im->aa_color);\n+		gdimageaaline(im, x1, y1, x2, y2, im->aa_color);\n@@ -1880,7 +1884,7 @@ void gdimagefill(gdimageptr im, int x, int y, int nc)\n-	alphablending_bak = im->alphablendingflag;\n+	alphablending_bak = im->alphablendingflag;\n@@ -1892,7 +1896,7 @@ void gdimagefill(gdimageptr im, int x, int y, int nc)\n-		im->alphablendingflag = alphablending_bak;\n+		im->alphablendingflag = alphablending_bak;\n@@ -1955,7 +1959,7 @@ skip:			for (x++; x<=x2 && (gdimagegetpixel(im, x, y)!=oc); x++);\n-	im->alphablendingflag = alphablending_bak;\n+	im->alphablendingflag = alphablending_bak;\n@@ -2061,7 +2065,7 @@ void gdimagerectangle (gdimageptr im, int x1, int y1, int x2, int y2, int color)\n-\n+\n@@ -2259,7 +2263,7 @@ void gdimagecopymerge (gdimageptr dst, gdimageptr src, int dstx, int dsty, int s\n-\n+\n@@ -2356,7 +2360,7 @@ void gdimagecopyresized (gdimageptr dst, gdimageptr src, int dstx, int dsty, int\n-\n+\n@@ -2901,7 +2905,7 @@ int gdalphablend (int dst, int src) {\n-\n+"
CVE-2016-5703,"['https://github.com/phpmyadmin/phpmyadmin/commit/ef6c66dca1b0cb0a1a482477938cfc859d2baee3', 'https://www.phpmyadmin.net/security/PMASA-2016-19/']","('CWE-89', ""Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"")",MITRE,7.5,phpmyadmin,phpmyadmin,ef6c66dca1b0cb0a1a482477938cfc859d2baee3,1,SQL injection vulnerability in libraries/central_columns.lib.php in phpMyAdmin 4.4.x before 4.4.15.7 and 4.6.x before 4.6.3 allows remote attackers to execute arbitrary SQL commands via a crafted database name that is mishandled in a central column query .,properly escape database name in central column queries signed-off-by : michal čihař < michal @ cihar.com >,"diff - - git a / libraries / central_columns . lib . php b / libraries / central_columns . lib . php \ n @ @ - 60 , 10 + 60 , 10 @ @ function pma_getcolumnslist ( $ db , $ from = 0 , $ num = 25 ) \ n - . 'where db_name = \' ' . $db . ' \ ';' ; \ n + . 'where db_name = \' ' . util::sqladdslashes($db) . ' \ ';' ; \ n - . 'where db_name = \' ' . $db . ' \ ' ' \ n + . 'where db_name = \' ' . util::sqladdslashes($db) . ' \ ' ' \ n @ @ - 91 , 7 + 91 , 7 @ @ function pma_getcentralcolumnscount ( $ db ) \ n - . 'where db_name = \' ' . $db . ' \ ';' ; \ n + . 'where db_name = \' ' . util::sqladdslashes($db) . ' \ ';' ; \ n @ @ - 122 , 7 + 122 , 7 @ @ function pma_findexistingcolnames ( $ db , $ cols , $ allfields = false ) \ n - . 'where db_name = \' ' . $db . ' \ ' and col_name in (' . $ cols . ');' ; \ n + . 'where db_name = \' ' . util::sqladdslashes($db) . ' \ ' and col_name in (' . $ cols . ');' ; \ n @ @ - 130 , 7 + 130 , 7 @ @ function pma_findexistingcolnames ( $ db , $ cols , $ allfields = false ) \ n - . 'where db_name = \' ' . $db . ' \ ' and col_name in (' . $ cols . ');' ; \ n + . 'where db_name = \' ' . util::sqladdslashes($db) . ' \ ' and col_name in (' . $ cols . ');' ; \ n @ @ - 376 , 7 + 376 , 7 @ @ function pma_deletecolumnsfromlist ( $ field_select , $ istable = true ) \ n - . 'where db_name = \' ' . $db . ' \ ' and col_name in (' . $ cols . ');' ; \ n + . 'where db_name = \' ' . util::sqladdslashes($db) . ' \ ' and col_name in (' . $ cols . ');' ; \ n @ @ - 1147 , 7 + 1147 , 7 @ @ function pma_getcentralcolumnslistraw ( $ db , $ table ) \ n - . 'where db_name = \' ' . $db . ' \ ';' ; \ n + . 'where db_name = \' ' . util::sqladdslashes($db) . ' \ ';' ; \ n @ @ - 1159 , 7 + 1159 , 7 @ @ function pma_getcentralcolumnslistraw ( $ db , $ table ) \ n - . 'where db_name = \' ' . $db . ' \ '' ; \ n + . 'where db_name = \' ' . util::sqladdslashes($db) . ' \ '' ;"
CVE-2016-4979,['http://httpd.apache.org/security/vulnerabilities_24.html'],"('CWE-284', 'Improper Access Control')","Red Hat, Inc.",5.0,apache,httpd,2d0e4eff04ea963128a41faaef21f987272e05a2,1,"The Apache HTTP Server 2.4.18 through 2.4.20 , when mod_http2 and mod_ssl are enabled , does not properly recognize the `` SSLVerifyClient require '' directive for HTTP/2 request authorization , which allows remote attackers to bypass intended access restrictions by leveraging the ability to send multiple requests over a single connection and aborting a renegotiation .",modssl : reset client-verify state when renegotiation is aborted git-svn-id : https : //svn.apache.org/repos/asf/httpd/httpd/trunk @ 1750779 13f79535-47bb-0310-9956-ffa450edef68,"diff - - git a / changes b / changes \ n @ @ - 1 , 6 + 1 , 9 @ @ \ n - * - coding : utf - 8 - * - \ n + * ) mod_ssl : reset client - verify state of ssl when aborting renegotiations . \ n + [ erki aring < erki @ example . ee > , stefan eissing ] \ n + \ ndiff - - git a / modules / ssl / ssl_engine_kernel . c b / modules / ssl / ssl_engine_kernel . c \ n @ @ - 727 , 6 + 727 , 7 @ @ int ssl_hook_access ( request_rec * r ) \ n + ssl_set_verify ( ssl , verify_old , ssl_callback_sslverify ) ;"
CVE-2016-6250,"['https://github.com/libarchive/libarchive/commit/3014e198', 'https://github.com/libarchive/libarchive/issues/711']","('CWE-190', 'Integer Overflow or Wraparound')",MITRE,7.5,libarchive,libarchive,3014e198,1,"Integer overflow in the ISO9660 writer in libarchive before 3.2.1 allows remote attackers to cause a denial of service ( application crash ) or execute arbitrary code via vectors related to verifying filename lengths when writing an ISO9660 archive , which trigger a buffer overflow .","issue 711 : be more careful about verifying filename lengths when writing iso9660 archives * do n't cast size_t to int , since this can lead to overflow on machines where sizeof ( int ) < sizeof ( size_t ) * check a + b > limit by writing it as a > limit || b > limit || a + b > limit to avoid problems when a + b wraps around .","diff - - git a / libarchive / archive_write_set_format_iso9660 . c b / libarchive / archive_write_set_format_iso9660 . c \ n @ @ - 6225 , 7 + 6225 , 7 @ @ isoent_gen_joliet_identifier ( struct archive_write * a , struct isoent * isoent , \ n - int ffmax , parent_len ; \ n + size_t ffmax , parent_len ; \ n @ @ - 6239 , 7 + 6239 , 7 @ @ isoent_gen_joliet_identifier ( struct archive_write * a , struct isoent * isoent , \ n - r = idr_start ( a , idr , isoent - > children . cnt , ffmax , 6 , 2 , & rb_ops ) ; \ n + r = idr_start ( a , idr , isoent - > children . cnt , ( int ) ffmax , 6 , 2 , & rb_ops ) ; \ n @ @ - 6252 , 7 + 6252 , 7 @ @ isoent_gen_joliet_identifier ( struct archive_write * a , struct isoent * isoent , \ n - if ( ( int ) ( l = np - > file - > basename_utf16 . length ) > ffmax ) \ n + if ( ( l = np - > file - > basename_utf16 . length ) > ffmax ) \ n @ @ - 6285 , 7 + 6285 , 7 @ @ isoent_gen_joliet_identifier ( struct archive_write * a , struct isoent * isoent , \ n - if ( ( int ) np - > file - > basename_utf16 . length > ffmax ) { \ n + if ( np - > file - > basename_utf16 . length > ffmax ) { \ n @ @ - 6302 , 7 + 6302 , 9 @ @ isoent_gen_joliet_identifier ( struct archive_write * a , struct isoent * isoent , \ n - if ( parent_len + np - > mb_len > 240 ) { \ n + if ( parent_len > 240 \ n + | | np - > mb_len > 240 \ n + | | parent_len + np - > mb_len > 240 ) { \ n @ @ - 6314 , 11 + 6316 , 11 @ @ isoent_gen_joliet_identifier ( struct archive_write * a , struct isoent * isoent , \ n - if ( ( int ) l = = ffmax ) \ n + if ( l = = ffmax ) \ n - else if ( ( int ) l = = ffmax - 2 ) \ n + else if ( l = = ffmax - 2 ) \ n - else if ( ( int ) l = = ffmax - 4 ) \ n + else if ( l = = ffmax - 4 )"
CVE-2016-9573,"['https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-9573', 'https://github.com/szukw000/openjpeg/commit/7b28bd2b723df6be09fe7791eba33147c1c47d0d']","('CWE-125', 'Out-of-bounds Read')","Red Hat, Inc.",5.8,szukw000,openjpeg,7b28bd2b723df6be09fe7791eba33147c1c47d0d,1,"An out-of-bounds read vulnerability was found in OpenJPEG 2.1.2 , in the j2k_to_image tool . Converting a specially crafted JPEG2000 file to another format could cause the application to crash or , potentially , disclose some data from the heap .",changes for issues # 863 and # 862,"diff - - git a / src / bin / jp2 / convert . c b / src / bin / jp2 / convert . c \ n @ @ - 906 , 7 + 906 , 8 @ @ int imagetotga ( opj_image_t * image , const char * outfile ) { \ n - | | ( image - > comps [ 0 ] . prec ! = image - > comps [ i + 1 ] . prec ) ) { \ n + | | ( image - > comps [ 0 ] . prec ! = image - > comps [ i + 1 ] . prec ) \ n + | | ( image - > comps [ 0 ] . sgnd ! = image - > comps [ i + 1 ] . sgnd ) ) { \ n @ @ - 1743 , 7 + 1744 , 7 @ @ int imagetopnm ( opj_image_t * image , const char * outfile , int force_split ) \ n - unsigned int compno , ncomp ; \ n + unsigned int compno , ncomp , ui ; \ n @ @ - 1768 , 6 + 1769 , 27 @ @ int imagetopnm ( opj_image_t * image , const char * outfile , int force_split ) \ n + for ( ui = 1 ; ui < ncomp ; + + ui ) { \ n + if ( image - > comps [ 0 ] . dx ! = image - > comps [ ui ] . dx ) { \ n + break ; \ n + } \ n + if ( image - > comps [ 0 ] . dy ! = image - > comps [ ui ] . dy ) { \ n + break ; \ n + } \ n + if ( image - > comps [ 0 ] . prec ! = image - > comps [ ui ] . prec ) { \ n + break ; \ n + } \ n + if ( image - > comps [ 0 ] . sgnd ! = image - > comps [ ui ] . sgnd ) { \ n + break ; \ n + } \ n + } \ n + if ( ui ! = ncomp ) { \ n + fprintf ( stderr , ""imagetopnm: all components\n    shall have "" \ n + ""the same subsampling, same bit depth, same sign.\n"" \ n + ""    aborting\n"" ) ; \ n + return 1 ; \ n + } \ n + \ n @ @ - 2126 , 7 + 2148 , 7 @ @ static int imagetoraw_common ( opj_image_t * image , const char * outfile , opj_bool \ n - unsigned int compno ; \ n + unsigned int compno , numcomps ; \ n @ @ - 2139 , 16 + 2161 , 41 @ @ static int imagetoraw_common ( opj_image_t * image , const char * outfile , opj_bool \ n + numcomps = image - > numcomps ; \ n + \ n + if ( numcomps > 4 ) { \ n + numcomps = 4 ; \ n + } \ n + for ( compno = 1 ; compno < numcomps ; + + compno ) { \ n + if ( image - > comps [ 0 ] . dx ! = image - > comps [ compno ] . dx ) { \ n + break ; \ n + } \ n + if ( image - > comps [ 0 ] . dy ! = image - > comps [ compno ] . dy ) { \ n + break ; \ n + } \ n + if ( image - > comps [ 0 ] . prec ! = image - > comps [ compno ] . prec ) { \ n + break ; \ n + } \ n + if ( image - > comps [ 0 ] . sgnd ! = image - > comps [ compno ] . sgnd ) { \ n + break ; \ n + } \ n + } \ n + if ( compno ! = numcomps ) { \ n + fprintf ( stderr , ""imagetoraw_common: all components shall have the same subsampling, same bit depth, same sign.\n"" ) ; \ n + fprintf ( stderr , ""\taborting\n"" ) ; \ n + return 1 ; \ n + } \ n + \ n - fprintf ( stdout , ""raw image characteristics: %d components\n"" , image - > numcomps ) ; \ n + fprintf ( stdout , ""raw image characteristics: %d components\n"" , numcomps ) ; \ n - for ( compno = 0 ; compno < image - > numcomps ; compno + + ) \ n + for ( compno = 0 ; compno < numcomps ; compno + + ) \ n @ @ - 2238 , 7 + 2285 , 7 @ @ static int imagetoraw_common ( opj_image_t * image , const char * outfile , opj_bool \ n - fprintf ( stderr , ""more than 16 bits per component no handled yet\n"" ) ; \ n + fprintf ( stderr , ""more than 16 bits per component not handled yet\n"" ) ; \ ndiff - - git a / src / bin / jp2 / convertbmp . c b / src / bin / jp2 / convertbmp . c \ n @ @ - 806 , 8 + 806 , 35 @ @ int imagetobmp ( opj_image_t * image , const char * outfile ) { \ n + { \ n + unsigned int ui , ncomp = image - > numcomps ; \ n + \ n + if ( ncomp > 4 ) { /* rgba in bmpmask32toimage */ \ n + ncomp = 4 ; \ n + } \ n + for ( ui = 1 ; ui < ncomp ; + + ui ) { \ n + if ( image - > comps [ 0 ] . dx ! = image - > comps [ ui ] . dx ) { \ n + break ; \ n + } \ n + if ( image - > comps [ 0 ] . dy ! = image - > comps [ ui ] . dy ) { \ n + break ; \ n + } \ n + if ( image - > comps [ 0 ] . prec ! = image - > comps [ ui ] . prec ) { \ n + break ; \ n + } \ n + if ( image - > comps [ 0 ] . sgnd ! = image - > comps [ ui ] . sgnd ) { \ n + break ; \ n + } \ n + } \ n + if ( ui ! = ncomp ) { \ n + fprintf ( stderr , ""imagetobmp: all components shall have the same subsampling, same bit depth, same sign.\n"" ) ; \ n + fprintf ( stderr , ""\taborting\n"" ) ; \ n + return 1 ; \ n + } \ n + \ n + } \ n - fprintf ( stderr , ""unsupported number of components: %d\n"" , image - > comps [ 0 ] . prec ) ; \ n + fprintf ( stderr , ""imagetobmp: unsupported precision: %d\n"" , image - > comps [ 0 ] . prec ) ; \ ndiff - - git a / src / bin / jp2 / opj_decompress . c b / src / bin / jp2 / opj_decompress . c \ n @ @ - 1607 , 7 + 1607 , 7 @ @ int main ( int argc , char * * argv ) \ n - if ( numdecompressedimages ) { \ n + if ( numdecompressedimages & & ! failed ) { \ ndiff - - git a / src / lib / openjp2 / j2k . c b / src / lib / openjp2 / j2k . c \ n @ @ - 2158 , 7 + 2158 , 7 @ @ static opj_bool opj_j2k_read_siz ( opj_j2k_t * p_j2k , \ n - if ( l_img_comp - > prec > 38 ) { /* todo openjpeg won't handle more than ? */ \ n + if ( l_img_comp - > prec < 1 | | l_img_comp - > prec > 38 ) { /* todo openjpeg won't handle more than ? */ \ n @ @ - 10029 , 15 + 10029 , 18 @ @ opj_bool opj_j2k_decode ( opj_j2k_t * p_j2k , \ n - p_image - > comps [ compno ] . data = p_j2k - > m_output_image - > comps [ compno ] . data ; \ n + p_image - > comps [ compno ] . data = p_j2k - > m_output_image - > comps [ compno ] . data ; \ n + \ n + if ( p_image - > comps [ compno ] . data = = null ) return opj_false ; \ n + \ n + p_j2k - > m_output_image - > comps [ compno ] . data = null ; \ n - p_j2k - > m_output_image - > comps [ compno ] . data = null ; \ n @ @ - 10131 , 6 + 10134 , 8 @ @ opj_bool opj_j2k_get_tile ( opj_j2k_t * p_j2k , \ n + if ( p_image - > comps [ compno ] . data = = null ) return opj_false ; \ n +"
CVE-2016-7797,"['http://www.openwall.com/lists/oss-security/2016/10/01/1', 'https://github.com/ClusterLabs/pacemaker/commit/5ec24a2642bd0854b884d1a9b51d12371373b410']","('CWE-254', '7PK - Security Features')","Red Hat, Inc.",5.0,ClusterLabs,pacemaker,5ec24a2642bd0854b884d1a9b51d12371373b410,1,"Pacemaker before 1.1.15 , when using pacemaker remote , might allow remote attackers to cause a denial of service ( node disconnection ) via an unauthenticated connection .",fix : remote : cl # 5269 - notify other clients of a new connection only if the handshake has completed ( bsc # 967388 ),"diff - - git a / lrmd / tls_backend . c b / lrmd / tls_backend . c \ n @ @ - 79 , 6 + 79 , 9 @ @ lrmd_remote_client_msg ( gpointer data ) \ n + \ n + /* alert other clients of the new connection */ \ n + notify_of_new_client ( client ) ; \ n @ @ - 289 , 8 + 292 , 6 @ @ lrmd_remote_listen ( gpointer data ) \ n - /* alert other clients of the new connection */ \ n - notify_of_new_client ( new_client ) ;"
CVE-2017-11721,[],"('CWE-119', 'Improper Restriction of Operations within the Bounds of a Memory Buffer')",MITRE,7.5,ioquake,ioq3,d2b1d124d4055c2fcbe5126863487c52fd58cca1,1,Buffer overflow in ioquake3 before 2017-08-02 allows remote attackers to cause a denial of service ( application crash ) or possibly have unspecified other impact via a crafted packet .,fix/improve buffer overflow in msg_readbits/msg_writebits prevent reading past end of message in msg_readbits . if read past end of msg- > data buffer ( 16348 bytes ) the engine could segfault . make msg_writebits use an exact buffer overflow check instead of possibly failing with a few bytes left .,"diff - - git a / code / qcommon / huffman . c b / code / qcommon / huffman . c \ n @ @ - 279 , 9 + 279 , 14 @ @ int huff_receive ( node_t * node , int * ch , byte * fin ) { \ n - void huff_offsetreceive ( node_t * node , int * ch , byte * fin , int * offset ) { \ n + void huff_offsetreceive ( node_t * node , int * ch , byte * fin , int * offset , int maxoffset ) { \ n + if ( bloc > = maxoffset ) { \ n + * ch = 0 ; \ n + * offset = maxoffset + 1 ; \ n + return ; \ n + } \ n @ @ - 298 , 11 + 303 , 15 @ @ void huff_offsetreceive ( node_t * node , int * ch , byte * fin , int * offset ) { \ n - static void send ( node_t * node , node_t * child , byte * fout ) { \ n + static void send ( node_t * node , node_t * child , byte * fout , int maxoffset ) { \ n - send ( node - > parent , node , fout ) ; \ n + send ( node - > parent , node , fout , maxoffset ) ; \ n + if ( bloc > = maxoffset ) { \ n + bloc = maxoffset + 1 ; \ n + return ; \ n + } \ n @ @ - 312 , 22 + 321 , 22 @ @ static void send ( node_t * node , node_t * child , byte * fout ) { \ n - void huff_transmit ( huff_t * huff , int ch , byte * fout ) { \ n + void huff_transmit ( huff_t * huff , int ch , byte * fout , int maxoffset ) { \ n - huff_transmit ( huff , nyt , fout ) ; \ n + huff_transmit ( huff , nyt , fout , maxoffset ) ; \ n - send ( huff - > loc [ ch ] , null , fout ) ; \ n + send ( huff - > loc [ ch ] , null , fout , maxoffset ) ; \ n - void huff_offsettransmit ( huff_t * huff , int ch , byte * fout , int * offset ) { \ n + void huff_offsettransmit ( huff_t * huff , int ch , byte * fout , int * offset , int maxoffset ) { \ n - send ( huff - > loc [ ch ] , null , fout ) ; \ n + send ( huff - > loc [ ch ] , null , fout , maxoffset ) ; \ n @ @ - 413 , 7 + 422 , 7 @ @ void huff_compress ( msg_t * mbuf , int offset ) { \ n - huff_transmit ( & huff , ch , seq ) ; /* transmit symbol */ \ n + huff_transmit ( & huff , ch , seq , size < < 3 ) ; /* transmit symbol */ \ ndiff - - git a / code / qcommon / msg . c b / code / qcommon / msg . c \ n @ @ - 107 , 9 + 107 , 7 @ @ void msg_writebits ( msg_t * msg , int value , int bits ) { \ n - // this isn't an exact overflow check, but close enough\n-	if ( msg->maxsize - msg->cursize < 4 ) {\n-		msg->overflowed = qtrue;\n+	if ( msg->overflowed ) {\n@@ -122,6 +120,11 @@ void msg_writebits( msg_t *msg, int value, int bits ) {\n+		if ( msg->cursize + ( bits >> 3 ) > msg->maxsize ) {\n+			msg->overflowed = qtrue;\n+			return;\n+		}\n+\n@@ -144,6 +147,10 @@ void msg_writebits( msg_t *msg, int value, int bits ) {\n+			if ( msg->bit + nbits > msg->maxsize << 3 ) {\n+				msg->overflowed = qtrue;\n+				return;\n+			}\n@@ -152,8 +159,13 @@ void msg_writebits( msg_t *msg, int value, int bits ) {\n-				huff_offsettransmit( &msghuff.compressor, (value & 0xff), msg->data, &msg->bit );\n+				huff_offsettransmit( &msghuff.compressor, (value & 0xff), msg->data, &msg->bit, msg->maxsize << 3 );\n+\n+				if ( msg->bit > msg->maxsize << 3 ) {\n+					msg->overflowed = qtrue;\n+					return;\n+				}\n@@ -167,6 +179,10 @@ int msg_readbits( msg_t *msg, int bits ) {\n+	if ( msg->readcount > msg->cursize ) {\n+		return 0;\n+	}\n+\n@@ -177,6 +193,11 @@ int msg_readbits( msg_t *msg, int bits ) {\n+		if (msg->readcount + (bits>>3) > msg->cursize) {\n+			msg->readcount = msg->cursize + 1;\n+			return 0;\n+		}\n+\n@@ -204,6 +225,10 @@ int msg_readbits( msg_t *msg, int bits ) {\n+			if (msg->bit + nbits > msg->cursize << 3) {\n+				msg->readcount = msg->cursize + 1;\n+				return 0;\n+			}\n@@ -212,9 +237,14 @@ int msg_readbits( msg_t *msg, int bits ) {\n-				huff_offsetreceive (msghuff.decompressor.tree, &get, msg->data, &msg->bit);\n+				huff_offsetreceive (msghuff.decompressor.tree, &get, msg->data, &msg->bit, msg->cursize<<3);\n+\n+				if (msg->bit > msg->cursize<<3) {\n+					msg->readcount = msg->cursize + 1;\n+					return 0;\n+				}\ndiff --git a/code/qcommon/qcommon.h b/code/qcommon/qcommon.h\n@@ -1196,9 +1196,9 @@ void	huff_decompress(msg_t *buf, int offset);\n-void	huff_transmit (huff_t *huff, int ch, byte *fout);\n-void	huff_offsetreceive (node_t *node, int *ch, byte *fin, int *offset);\n-void	huff_offsettransmit (huff_t *huff, int ch, byte *fout, int *offset);\n+void	huff_transmit (huff_t *huff, int ch, byte *fout, int maxoffset);\n+void	huff_offsetreceive (node_t *node, int *ch, byte *fin, int *offset, int maxoffset);\n+void	huff_offsettransmit (huff_t *huff, int ch, byte *fout, int *offset, int maxoffset);"
CVE-2016-8740,['https://github.com/apache/httpd/commit/29c63b786ae028d82405421585e91283c8fa0da3'],"('CWE-20', 'Improper Input Validation')",Apache Software Foundation,5.0,apache,httpd,29c63b786ae028d82405421585e91283c8fa0da3,1,"The mod_http2 module in the Apache HTTP Server 2.4.17 through 2.4.23 , when the Protocols configuration includes h2 or h2c , does not restrict request-header length , which allows remote attackers to cause a denial of service ( memory consumption ) via crafted CONTINUATION frames in an HTTP/2 request .","security : cve-2016-8740 mod_http2 : properly crafted , endless http/2 continuation frames could be used to exhaust all server 's memory . reported by : naveen tiwari < naveen.tiwari @ asu.edu > and cdf/sefcom at arizona state university git-svn-id : https : //svn.apache.org/repos/asf/httpd/httpd/trunk @ 1772576 13f79535-47bb-0310-9956-ffa450edef68","diff - - git a / changes b / changes \ n @ @ - 1 , 6 + 1 , 10 @ @ \ n - * - coding : utf - 8 - * - \ n + * ) mod_http2 : cve - 2016 - 8740 : mitigate dos memory exhaustion via endless \ n + continuation frames . \ n + [ naveen tiwari < naveen . tiwari @ asu . edu > and cdf / sefcom at arizona state university , stefan eissing ] \ n + \ ndiff - - git a / modules / http2 / h2_session . c b / modules / http2 / h2_session . c \ n @ @ - 394 , 7 + 394 , 7 @ @ static int on_header_cb ( nghttp2_session * ngh2 , const nghttp2_frame * frame , \ n - ap_log_cerror ( aplog_mark , aplog_err , 0 , session - > c , \ n + ap_log_cerror ( aplog_mark , aplog_debug , 0 , session - > c , \ n @ @ - 403 , 7 + 403 , 14 @ @ static int on_header_cb ( nghttp2_session * ngh2 , const nghttp2_frame * frame , \ n - if ( status ! = apr_success & & ! h2_stream_is_ready ( stream ) ) { \ n + if ( status = = apr_econnreset ) { \ n + ap_log_cerror ( aplog_mark , aplog_trace1 , status , session - > c , \ n + ""h2-stream(%ld-%d): on_header, reset stream"" , \ n + session - > id , stream - > id ) ; \ n + nghttp2_submit_rst_stream ( ngh2 , nghttp2_flag_none , stream - > id , \ n + nghttp2_internal_error ) ; \ n + } \ n + else if ( status ! = apr_success & & ! h2_stream_is_ready ( stream ) ) { \ ndiff - - git a / modules / http2 / h2_stream . c b / modules / http2 / h2_stream . c \ n @ @ - 333 , 45 + 333 , 50 @ @ apr_status_t h2_stream_add_header ( h2_stream * stream , \ n + int error = 0 ; \ n - if ( ! stream - > has_response ) { \ n - if ( name [ 0 ] = = ':' ) { \ n - if ( ( vlen ) > stream - > session - > s - > limit_req_line ) { \ n - /* pseudo header: approximation of request line size check */ \ n - ap_log_cerror ( aplog_mark , aplog_trace1 , 0 , stream - > session - > c , \ n - ""h2_stream(%ld-%d): pseudo header %s too long"" , \ n - stream - > session - > id , stream - > id , name ) ; \ n - return h2_stream_set_error ( stream , \ n - http_request_uri_too_large ) ; \ n - } \ n - } \ n - else if ( ( nlen + 2 + vlen ) > stream - > session - > s - > limit_req_fieldsize ) { \ n - /* header too long */ \ n + if ( stream - > has_response ) { \ n + return apr_einval ; \ n + } \ n + + + stream - > request_headers_added ; \ n + if ( name [ 0 ] = = ':' ) { \ n + if ( ( vlen ) > stream - > session - > s - > limit_req_line ) { \ n + /* pseudo header: approximation of request line size check */ \ n - ""h2_stream(%ld-%d): header %s too long"" , \ n + ""h2_stream(%ld-%d): pseudo header %s too long"" , \ n - return h2_stream_set_error ( stream , \ n - http_request_header_fields_too_large ) ; \ n + error = http_request_uri_too_large ; \ n - \ n - if ( name [ 0 ] ! = ':' ) { \ n - + + stream - > request_headers_added ; \ n - if ( stream - > request_headers_added \ n - > stream - > session - > s - > limit_req_fields ) { \ n - /* too many header lines */ \ n - ap_log_cerror ( aplog_mark , aplog_trace1 , 0 , stream - > session - > c , \ n - ""h2_stream(%ld-%d): too many header lines"" , \ n - stream - > session - > id , stream - > id ) ; \ n - return h2_stream_set_error ( stream , \ n - http_request_header_fields_too_large ) ; \ n - } \ n + } \ n + else if ( ( nlen + 2 + vlen ) > stream - > session - > s - > limit_req_fieldsize ) { \ n + /* header too long */ \ n + ap_log_cerror ( aplog_mark , aplog_trace1 , 0 , stream - > session - > c , \ n + ""h2_stream(%ld-%d): header %s too long"" , \ n + stream - > session - > id , stream - > id , name ) ; \ n + error = http_request_header_fields_too_large ; \ n + } \ n + \ n + if ( stream - > request_headers_added \ n + > stream - > session - > s - > limit_req_fields + 4 ) { \ n + /* too many header lines, include 4 pseudo headers */ \ n + if ( stream - > request_headers_added \ n + > stream - > session - > s - > limit_req_fields + 4 + 100 ) { \ n + /* yeah, right */ \ n + return apr_econnreset ; \ n + ap_log_cerror ( aplog_mark , aplog_trace1 , 0 , stream - > session - > c , \ n + ""h2_stream(%ld-%d): too many header lines"" , \ n + stream - > session - > id , stream - > id ) ; \ n + error = http_request_header_fields_too_large ; \ n + else if ( error ) { \ n + return h2_stream_set_error ( stream , error ) ; \ n + }"
CVE-2017-18922,"['https://cert-portal.siemens.com/productcert/pdf/ssa-390195.pdf', 'https://github.com/LibVNC/libvncserver/commit/aac95a9dcf4bbba87b76c72706c3221a842ca433', 'https://usn.ubuntu.com/4407-1/']","('CWE-787', 'Out-of-bounds Write')",MITRE,7.5,LibVNC,libvncserver,aac95a9dcf4bbba87b76c72706c3221a842ca433,1,"It was discovered that websockets.c in LibVNCServer prior to 0.9.12 did not properly decode certain WebSocket frames . A malicious attacker could exploit this by sending specially crafted WebSocket frames to a server , causing a heap-based buffer overflow .","fix overflow and refactor websockets decode ( hybi ) fix critical heap-based buffer overflow which allowed easy modification of a return address via an overwritten function pointer fix bug causing connections to fail due a `` one websocket frame = one ws_read '' assumption , which failed with libvncserver-0.9.11 refactor websocket hybi decode to use a simple state machine for decoding of websocket frames","diff - - git a / libvncserver / websockets . c b / libvncserver / websockets . c \ n @ @ - 77 , 6 + 77 , 9 @ @ \ n + #define ws_hybi_mask_len 4\n+\n+#define arraysize(a) ((sizeof(a) / sizeof((a[0]))) / (size_t)(!(sizeof(a) % sizeof((a[0])))))\n@@ -93,20 +96,20 @@ static int gettid() {\n-typedef struct ws_ctx_s {\n-    char codebufdecode[b64len(update_buf_size) + wshlenmax]; /* base64 + maximum frame header length */\n-	char codebufencode[b64len(update_buf_size) + wshlenmax]; /* base64 + maximum frame header length */\n-	char readbuf[8192];\n-    int readbufstart;\n-    int readbuflen;\n-    int dblen;\n-    char carrybuf[3];                      /* for base64 carry-over */\n-    int carrylen;\n-    int version;\n-    int base64;\n-    wsencodefunc encode;\n-    wsdecodefunc decode;\n-} ws_ctx_t;\n+\n+enum {\n+  /* header not yet received completely */\n+  ws_hybi_state_header_pending,\n+  /* data available */\n+  ws_hybi_state_data_available,\n+  ws_hybi_state_data_needed,\n+  /* received a complete frame */\n+  ws_hybi_state_frame_complete,\n+  /* received part of a 'close' frame */\n+  ws_hybi_state_close_reason_pending,\n+  /* */\n+  ws_hybi_state_err\n+};\n@@ -146,6 +149,38 @@ __attribute__ ((__packed__))\n+typedef struct ws_header_data_s {\n+  ws_header_t *data;\n+  /** bytes read */\n+  int nread;\n+  /** mask value */\n+  ws_mask_t mask;\n+  /** length of frame header including payload len, but without mask */\n+  int headerlen;\n+  /** length of the payload data */\n+  int payloadlen;\n+  /** opcode */\n+  unsigned char opcode;\n+} ws_header_data_t;\n+\n+typedef struct ws_ctx_s {\n+    char codebufdecode[b64len(update_buf_size) + wshlenmax]; /* base64 + maximum frame header length */\n+    char codebufencode[b64len(update_buf_size) + wshlenmax]; /* base64 + maximum frame header length */\n+    char *writepos;\n+    unsigned char *readpos;\n+    int readlen;\n+    int hybidecodestate;\n+    char carrybuf[3];                      /* for base64 carry-over */\n+    int carrylen;\n+    int version;\n+    int base64;\n+    ws_header_data_t header;\n+    int nreadraw;\n+    int ntoread;\n+    wsencodefunc encode;\n+    wsdecodefunc decode;\n+} ws_ctx_t;\n+\n@@ -206,6 +241,8 @@ static int websocketsencodehixie(rfbclientptr cl, const char *src, int len, char\n+static void hybidecodecleanup(ws_ctx_t *wsctx);\n+\n@@ -467,10 +504,11 @@ websocketshandshake(rfbclientptr cl, char *scheme)\n+    hybidecodecleanup(wsctx);\n-\n+\n@@ -662,146 +700,439 @@ websocketsdecodehixie(rfbclientptr cl, char *dst, int len)\n-websocketsdecodehybi(rfbclientptr cl, char *dst, int len)\n+hybiremaining(ws_ctx_t *wsctx)\n-    char *buf, *payload;\n-    uint32_t *payload32;\n-    int ret = -1, result = -1;\n-    int total = 0;\n-    ws_mask_t mask;\n-    ws_header_t *header;\n-    int i;\n-    unsigned char opcode;\n-    ws_ctx_t *wsctx = (ws_ctx_t *)cl->wsctx;\n-    int flength, fhlen;\n-    /* int fin; */ /* not used atm */\n+  return wsctx->ntoread - wsctx->nreadraw;\n+}\n-    /* rfblog("" <== %s[%d]: %d cl: %p, wsctx: %p-%p (%d)\n"", __func__, gettid(), len, cl, wsctx, (char *)wsctx + sizeof(ws_ctx_t), sizeof(ws_ctx_t)); */\n+static void\n+hybidecodecleanup(ws_ctx_t *wsctx)\n+{\n+  wsctx->header.payloadlen = 0;\n+  wsctx->header.mask.u = 0;\n+  wsctx->nreadraw = 0;\n+  wsctx->ntoread= 0;\n+  wsctx->carrylen = 0;\n+  wsctx->readpos = (unsigned char *)wsctx->codebufdecode;\n+  wsctx->readlen = 0;\n+  wsctx->hybidecodestate = ws_hybi_state_header_pending;\n+  wsctx->writepos = null;\n+  rfblog(""cleaned up wsctx\n"");\n+}\n-    if (wsctx->readbuflen) {\n-      /* simply return what we have */\n-      if (wsctx->readbuflen > len) {\n-	memcpy(dst, wsctx->readbuf +  wsctx->readbufstart, len);\n-	result = len;\n-	wsctx->readbuflen -= len;\n-	wsctx->readbufstart += len;\n+/**\n+ * return payload data that has been decoded/unmasked from\n+ * a websocket frame.\n+ *\n+ * @param[out]     dst destination buffer\n+ * @param[in]      len bytes to copy to destination buffer\n+ * @param[in,out]  wsctx internal state of decoding procedure\n+ * @param[out]     number of bytes actually written to dst buffer\n+ * @return next hybi decoding state\n+ */\n+static int\n+hybireturndata(char *dst, int len, ws_ctx_t *wsctx, int *nwritten)\n+{\n+  int nextstate = ws_hybi_state_err;\n+\n+  /* if we have something already decoded copy and return */\n+  if (wsctx->readlen > 0) {\n+    /* simply return what we have */\n+    if (wsctx->readlen > len) {\n+      rfblog(""copy to %d bytes to dst buffer; readpos=%p, readlen=%d\n"", len, wsctx->readpos, wsctx->readlen);\n+      memcpy(dst, wsctx->readpos, len);\n+      *nwritten = len;\n+      wsctx->readlen -= len;\n+      wsctx->readpos += len;\n+      nextstate = ws_hybi_state_data_available;\n+    } else {\n+      rfblog(""copy to %d bytes to dst buffer; readpos=%p, readlen=%d\n"", wsctx->readlen, wsctx->readpos, wsctx->readlen);\n+      memcpy(dst, wsctx->readpos, wsctx->readlen);\n+      *nwritten = wsctx->readlen;\n+      wsctx->readlen = 0;\n+      wsctx->readpos = null;\n+      if (hybiremaining(wsctx) == 0) {\n+        nextstate = ws_hybi_state_frame_complete;\n-	memcpy(dst, wsctx->readbuf +  wsctx->readbufstart, wsctx->readbuflen);\n-	result = wsctx->readbuflen;\n-	wsctx->readbuflen = 0;\n-	wsctx->readbufstart = 0;\n+        nextstate = ws_hybi_state_data_needed;\n-      goto spor;\n+    rfblog(""after copy: readpos=%p, readlen=%d\n"", wsctx->readpos, wsctx->readlen);\n+  } else if (wsctx->hybidecodestate == ws_hybi_state_close_reason_pending) {\n+    nextstate = ws_hybi_state_close_reason_pending;\n+  }\n+  return nextstate;\n+}\n-    buf = wsctx->codebufdecode;\n-    header = (ws_header_t *)wsctx->codebufdecode;\n-\n-    ret = ws_peek(cl, buf, b64len(len) + wshlenmax);\n-\n-    if (ret < 2) {\n-        /* save errno because rfberr() will tamper it */\n-        if (-1 == ret) {\n-            int olderrno = errno;\n-            rfberr(""%s: peek; %m\n"", __func__);\n-            errno = olderrno;\n-        } else if (0 == ret) {\n-            result = 0;\n-        } else {\n-            errno = eagain;\n-        }\n-        goto spor;\n+/**\n+ * read an rfc 6455 websocket frame (ietf hybi working group).\n+ *\n+ * internal state is updated according to bytes received and the\n+ * decoding of header information.\n+ *\n+ * @param[in]   cl client ptr with ptr to raw socket and ws_ctx_t ptr\n+ * @param[out]  sockret emulated recv return value\n+ * @return next hybi decoding state; ws_hybi_state_header_pending indicates\n+ *         that the header was not received completely.\n+ */\n+static int\n+hybireadheader(rfbclientptr cl, int *sockret)\n+{\n+  int ret;\n+  ws_ctx_t *wsctx = (ws_ctx_t *)cl->wsctx;\n+  char *headerdst = wsctx->codebufdecode + wsctx->nreadraw;\n+  int n = wshlenmax - wsctx->nreadraw;\n+\n+  rfblog(""header_read to %p with len=%d\n"", headerdst, n);\n+  ret = ws_read(cl, headerdst, n);\n+  rfblog(""read %d bytes from socket\n"", ret);\n+  if (ret <= 0) {\n+    if (-1 == ret) {\n+      /* save errno because rfberr() will tamper it */\n+      int olderrno = errno;\n+      rfberr(""%s: peek; %m\n"", __func__);\n+      errno = olderrno;\n+      *sockret = -1;\n+    } else {\n+      *sockret = 0;\n+    return ws_hybi_state_err;\n+  }\n+\n+  wsctx->nreadraw += ret;\n+  if (wsctx->nreadraw < 2) {\n+    /* cannot decode header with less than two bytes */\n+    errno = eagain;\n+    *sockret = -1;\n+    return ws_hybi_state_header_pending;\n+  }\n+\n+  /* first two header bytes received; interpret header data and get rest */\n+  wsctx->header.data = (ws_header_t *)wsctx->codebufdecode;\n+\n+  wsctx->header.opcode = wsctx->header.data->b0 & 0x0f;\n+\n+  /* fin = (header->b0 & 0x80) >> 7; */ /* not used atm */\n+  wsctx->header.payloadlen = wsctx->header.data->b1 & 0x7f;\n+  rfblog(""first header bytes received; opcode=%d lenbyte=%d\n"", wsctx->header.opcode, wsctx->header.payloadlen);\n+\n+  /*\n+   * 4.3. client-to-server masking\n+   *\n+   * the client must mask all frames sent to the server.  a server must\n+   * close the connection upon receiving a frame with the mask bit set to 0.\n+  **/\n+  if (!(wsctx->header.data->b1 & 0x80)) {\n+    rfberr(""%s: got frame without mask ret=%d\n"", __func__, ret);\n+    errno = eio;\n+    *sockret = -1;\n+    return ws_hybi_state_err;\n+  }\n+\n+  if (wsctx->header.payloadlen < 126 && wsctx->nreadraw >= 6) {\n+    wsctx->header.headerlen = 2 + ws_hybi_mask_len;\n+    wsctx->header.mask = wsctx->header.data->u.m;\n+  } else if (wsctx->header.payloadlen == 126 && 8 <= wsctx->nreadraw) {\n+    wsctx->header.headerlen = 4 + ws_hybi_mask_len;\n+    wsctx->header.payloadlen = ws_ntoh16(wsctx->header.data->u.s16.l16);\n+    wsctx->header.mask = wsctx->header.data->u.s16.m16;\n+  } else if (wsctx->header.payloadlen == 127 && 14 <= wsctx->nreadraw) {\n+    wsctx->header.headerlen = 10 + ws_hybi_mask_len;\n+    wsctx->header.payloadlen = ws_ntoh64(wsctx->header.data->u.s64.l64);\n+    wsctx->header.mask = wsctx->header.data->u.s64.m64;\n+  } else {\n+    /* incomplete frame header, try again */\n+    rfberr(""%s: incomplete frame header; ret=%d\n"", __func__, ret);\n+    errno = eagain;\n+    *sockret = -1;\n+    return ws_hybi_state_header_pending;\n+  }\n+\n+  /* absolute length of frame */\n+  wsctx->ntoread = wsctx->header.headerlen + wsctx->header.payloadlen;\n+\n+  /* set payload pointer just after header */\n+  wsctx->writepos = wsctx->codebufdecode + wsctx->nreadraw;\n+\n+  wsctx->readpos = (unsigned char *)(wsctx->codebufdecode + wsctx->header.headerlen);\n+\n+  rfblog(""header complete: state=%d flen=%d writeto=%p\n"", wsctx->hybidecodestate, wsctx->ntoread, wsctx->writepos);\n+\n+  return ws_hybi_state_data_needed;\n+}\n-    opcode = header->b0 & 0x0f;\n-    /* fin = (header->b0 & 0x80) >> 7; */ /* not used atm */\n-    flength = header->b1 & 0x7f;\n+static int\n+hybiwsframecomplete(ws_ctx_t *wsctx)\n+{\n+  return wsctx != null && hybiremaining(wsctx) == 0;\n+}\n-    /*\n-     * 4.3. client-to-server masking\n-     *\n-     * the client must mask all frames sent to the server.  a server must\n-     * close the connection upon receiving a frame with the mask bit set to 0.\n-    **/\n-    if (!(header->b1 & 0x80)) {\n-	rfberr(""%s: got frame without mask\n"", __func__, ret);\n-	errno = eio;\n-	goto spor;\n-    }\n-\n-    if (flength < 126) {\n-	fhlen = 2;\n-	mask = header->u.m;\n-    } else if (flength == 126 && 4 <= ret) {\n-	flength = ws_ntoh16(header->u.s16.l16);\n-	fhlen = 4;\n-	mask = header->u.s16.m16;\n-    } else if (flength == 127 && 10 <= ret) {\n-	flength = ws_ntoh64(header->u.s64.l64);\n-	fhlen = 10;\n-	mask = header->u.s64.m64;\n-    } else {\n-      /* incomplete frame header */\n-      rfberr(""%s: incomplete frame header\n"", __func__, ret);\n-      errno = eio;\n-      goto spor;\n-    }\n+static char *\n+hybipayloadstart(ws_ctx_t *wsctx)\n+{\n+  return wsctx->codebufdecode + wsctx->header.headerlen;\n+}\n-    /* absolute length of frame */\n-    total = fhlen + flength + 4;\n-    payload = buf + fhlen + 4; /* header length + mask */\n-    if (-1 == (ret = ws_read(cl, buf, total))) {\n+/**\n+ * read the remaining payload bytes from associated raw socket.\n+ *\n+ *  - try to read remaining bytes from socket\n+ *  - unmask all multiples of 4\n+ *  - if frame incomplete but some bytes are left, these are copied to\n+ *      the carry buffer\n+ *  - if opcode is text: base64-decode all unmasked received bytes\n+ *  - set state for reading decoded data\n+ *  - reset write position to begin of buffer (+ header)\n+ *      --> before we retrieve more data we let the caller clear all bytes\n+ *          from the reception buffer\n+ *  - execute return data routine\n+ *\n+ *  sets errno corresponding to what it gets from the underlying\n+ *  socket or eio if some internal sanity check fails.\n+ *\n+ *  @param[in]  cl client ptr with raw socket reference\n+ *  @param[out] dst  destination buffer\n+ *  @param[in]  len  size of destination buffer\n+ *  @param[out] sockret emulated recv return value\n+ *  @return next hybi decode state\n+ */\n+static int\n+hybireadanddecode(rfbclientptr cl, char *dst, int len, int *sockret)\n+{\n+  int n;\n+  int i;\n+  int toreturn;\n+  int todecode;\n+  int bufsize;\n+  int nextread;\n+  unsigned char *data;\n+  uint32_t *data32;\n+  ws_ctx_t *wsctx = (ws_ctx_t *)cl->wsctx;\n+\n+  /* if data was carried over, copy to start of buffer */\n+  memcpy(wsctx->writepos, wsctx->carrybuf, wsctx->carrylen);\n+  wsctx->writepos += wsctx->carrylen;\n+\n+  /* -1 accounts for potential '\0' terminator for base64 decoding */\n+  bufsize = wsctx->codebufdecode + arraysize(wsctx->codebufdecode) - wsctx->writepos - 1;\n+  if (hybiremaining(wsctx) > bufsize) {\n+    nextread = bufsize;\n+  } else {\n+    nextread = hybiremaining(wsctx);\n+  }\n+\n+  rfblog(""calling read with buf=%p and len=%d (decodebuf=%p headerlen=%d\n)"", wsctx->writepos, nextread, wsctx->codebufdecode, wsctx->header.headerlen);\n+\n+  if (wsctx->nreadraw < wsctx->ntoread) {\n+    /* decode more data */\n+    if (-1 == (n = ws_read(cl, wsctx->writepos, nextread))) {\n-      return ret;\n-    } else if (ret < total) {\n-      /* gt todo: hmm? */\n-      rfblog(""%s: read; got partial data\n"", __func__);\n-    } else {\n-      buf[ret] = '\0';\n+      *sockret = -1;\n+      return ws_hybi_state_err;\n+    } else if (n == 0) {\n+      *sockret = 0;\n+      return ws_hybi_state_err;\n-\n-    /* process 1 frame (32 bit op) */\n-    payload32 = (uint32_t *)payload;\n-    for (i = 0; i < flength / 4; i++) {\n-	payload32[i] ^= mask.u;\n+    wsctx->nreadraw += n;\n+    rfblog(""read %d bytes from socket; nread=%d\n"", n, wsctx->nreadraw);\n+  } else {\n+    n = 0;\n+  }\n+\n+  wsctx->writepos += n;\n+\n+  if (wsctx->nreadraw >= wsctx->ntoread) {\n+    if (wsctx->nreadraw > wsctx->ntoread) {\n+      rfberr(""%s: internal error, read past websocket frame"", __func__);\n+      errno=eio;\n+      *sockret = -1;\n+      return ws_hybi_state_err;\n+  }\n+\n+  todecode = wsctx->writepos - hybipayloadstart(wsctx);\n+  rfblog(""todecode=%d from n=%d carrylen=%d headerlen=%d\n"", todecode, n, wsctx->carrylen, wsctx->header.headerlen);\n+  if (todecode < 0) {\n+    rfberr(""%s: internal error; negative number of bytes to decode: %d"", __func__, todecode);\n+    errno=eio;\n+    *sockret = -1;\n+    return ws_hybi_state_err;\n+  }\n+\n+  /* for a possible base64 decoding, we decode multiples of 4 bytes until\n+   * the whole frame is received and carry over any remaining bytes in the carry buf*/\n+  data = (unsigned char *)hybipayloadstart(wsctx);\n+  data32= (uint32_t *)data;\n+\n+  for (i = 0; i < (todecode >> 2); i++) {\n+    data32[i] ^= wsctx->header.mask.u;\n+  }\n+  rfblog(""mask decoding; i=%d todecode=%d\n"", i, todecode);\n+\n+  if (wsctx->hybidecodestate == ws_hybi_state_frame_complete) {\n-    for (i*=4; i < flength; i++) {\n-	payload[i] ^= mask.c[i % 4];\n-    }\n-\n-    switch (opcode) {\n-      case ws_opcode_close:\n-	rfblog(""got closure, reason %d\n"", ws_ntoh16(((uint16_t *)payload)[0]));\n-	errno = econnreset;\n-	break;\n-      case ws_opcode_text_frame:\n-	if (-1 == (flength = b64_pton(payload, (unsigned char *)wsctx->codebufdecode, sizeof(wsctx->codebufdecode)))) {\n-	  rfberr(""%s: base64 decode error; %m\n"", __func__);\n-	  break;\n-	}\n-	payload = wsctx->codebufdecode;\n-	/* fall through */\n-      case ws_opcode_binary_frame:\n-	if (flength > len) {\n-	  memcpy(wsctx->readbuf, payload + len, flength - len);\n-	  wsctx->readbufstart = 0;\n-	  wsctx->readbuflen = flength - len;\n-	  flength = len;\n-	}\n-	memcpy(dst, payload, flength);\n-	result = flength;\n-	break;\n+    for (i*=4; i < todecode; i++) {\n+      data[i] ^= wsctx->header.mask.c[i % 4];\n+    }\n+\n+    /* all data is here, no carrying */\n+    wsctx->carrylen = 0;\n+  } else {\n+    /* carry over remaining, non-multiple-of-four bytes */\n+    wsctx->carrylen = todecode - (i * 4);\n+    if (wsctx->carrylen < 0 || wsctx->carrylen > arraysize(wsctx->carrybuf)) {\n+      rfberr(""%s: internal error, invalid carry over size: carrylen=%d, todecode=%d, i=%d"", __func__, wsctx->carrylen, todecode, i);\n+      *sockret = -1;\n+      errno = eio;\n+      return ws_hybi_state_err;\n+    }\n+    rfblog(""carrying over %d bytes from %p to %p\n"", wsctx->carrylen, wsctx->writepos + (i * 4), wsctx->carrybuf);\n+    memcpy(wsctx->carrybuf, data + (i * 4), wsctx->carrylen);\n+  }\n+\n+  toreturn = todecode - wsctx->carrylen;\n+\n+  switch (wsctx->header.opcode) {\n+    case ws_opcode_close:\n+\n+      /* this data is not returned as payload data */\n+      if (hybiwsframecomplete(wsctx)) {\n+        rfblog(""got closure, reason %d\n"", ws_ntoh16(((uint16_t *)data)[0]));\n+        errno = econnreset;\n+        *sockret = -1;\n+        return ws_hybi_state_frame_complete;\n+      } else {\n+        rfberr(""%s: close reason with long frame not supported"", __func__);\n+        errno = eio;\n+        *sockret = -1;\n+        return ws_hybi_state_err;\n+      }\n+      break;\n+    case ws_opcode_text_frame:\n+      data[toreturn] = '\0';\n+      rfblog(""initiate base64 decoding in %p with max size %d and '\\0' at %p\n"", data, bufsize, data + toreturn);\n+      if (-1 == (wsctx->readlen = b64_pton((char *)data, data, bufsize))) {\n+        rfberr(""base64 decode error in %s; data=%p bufsize=%d"", __func__, data, bufsize);\n+        rfberr(""%s: base64 decode error; %m\n"", __func__);\n+      }\n+      wsctx->writepos = hybipayloadstart(wsctx);\n+      break;\n+    case ws_opcode_binary_frame:\n+      wsctx->readlen = toreturn;\n+      wsctx->writepos = hybipayloadstart(wsctx);\n+      break;\n+    default:\n+      rfberr(""%s: unhandled opcode %d, b0: %02x, b1: %02x\n"", __func__, (int)wsctx->header.opcode, wsctx->header.data->b0, wsctx->header.data->b1);\n+  }\n+  wsctx->readpos = data;\n+\n+  return hybireturndata(dst, len, wsctx, sockret);\n+}\n+\n+/**\n+ * read function for websocket-socket emulation.\n+ *\n+ *    0                   1                   2                   3\n+ *    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+ *   +-+-+-+-+-------+-+-------------+-------------------------------+\n+ *   |f|r|r|r| opcode|m| payload len |    extended payload length    |\n+ *   |i|s|s|s|  (4)  |a|     (7)     |             (16/64)           |\n+ *   |n|v|v|v|       |s|             |   (if payload len==126/127)   |\n+ *   | |1|2|3|       |k|             |                               |\n+ *   +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n+ *   |     extended payload length continued, if payload len == 127  |\n+ *   + - - - - - - - - - - - - - - - +-------------------------------+\n+ *   |                               |masking-key, if mask set to 1  |\n+ *   +-------------------------------+-------------------------------+\n+ *   | masking-key (continued)       |          payload data         |\n+ *   +-------------------------------- - - - - - - - - - - - - - - - +\n+ *   :                     payload data continued ...                :\n+ *   + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n+ *   |                     payload data continued ...                |\n+ *   +---------------------------------------------------------------+\n+ *\n+ * using the decode buffer, this function:\n+ *  - reads the complete header from the underlying socket\n+ *  - reads any remaining data bytes\n+ *  - unmasks the payload data using the provided mask\n+ *  - decodes base64 encoded text data\n+ *  - copies len bytes of decoded payload data into dst\n+ *\n+ * emulates a read call on a socket.\n+ */\n+static int\n+websocketsdecodehybi(rfbclientptr cl, char *dst, int len)\n+{\n+    int result = -1;\n+    ws_ctx_t *wsctx = (ws_ctx_t *)cl->wsctx;\n+    /* int fin; */ /* not used atm */\n+\n+    /* rfblog("" <== %s[%d]: %d cl: %p, wsctx: %p-%p (%d)\n"", __func__, gettid(), len, cl, wsctx, (char *)wsctx + sizeof(ws_ctx_t), sizeof(ws_ctx_t)); */\n+    rfblog(""%s_enter: len=%d; ""\n+                      ""ctx: readlen=%d readpos=%p ""\n+                      ""writeto=%p ""\n+                      ""state=%d toread=%d remaining=%d ""\n+                      "" nreadraw=%d carrylen=%d carrybuf=%p\n"",\n+                      __func__, len,\n+                      wsctx->readlen, wsctx->readpos,\n+                      wsctx->writepos,\n+                      wsctx->hybidecodestate, wsctx->ntoread, hybiremaining(wsctx),\n+                      wsctx->nreadraw, wsctx->carrylen, wsctx->carrybuf);\n+\n+    switch (wsctx->hybidecodestate){\n+      case ws_hybi_state_header_pending:\n+        wsctx->hybidecodestate = hybireadheader(cl, &result);\n+        if (wsctx->hybidecodestate == ws_hybi_state_err) {\n+          goto spor;\n+        }\n+        if (wsctx->hybidecodestate != ws_hybi_state_header_pending) {\n+\n+          /* when header is complete, try to read some more data */\n+          wsctx->hybidecodestate = hybireadanddecode(cl, dst, len, &result);\n+        }\n+        break;\n+      case ws_hybi_state_data_available:\n+        wsctx->hybidecodestate = hybireturndata(dst, len, wsctx, &result);\n+        break;\n+      case ws_hybi_state_data_needed:\n+        wsctx->hybidecodestate = hybireadanddecode(cl, dst, len, &result);\n+        break;\n+      case ws_hybi_state_close_reason_pending:\n+        wsctx->hybidecodestate = hybireadanddecode(cl, dst, len, &result);\n+        break;\n-	rfberr(""%s: unhandled opcode %d, b0: %02x, b1: %02x\n"", __func__, (int)opcode, header->b0, header->b1);\n+        /* invalid state */\n+        rfberr(""%s: called with invalid state %d\n"", wsctx->hybidecodestate);\n+        result = -1;\n+        errno = eio;\n+        wsctx->hybidecodestate = ws_hybi_state_err;\n+    if (wsctx->hybidecodestate == ws_hybi_state_frame_complete) {\n+      rfblog(""frame received successfully, cleaning up: read=%d hlen=%d plen=%d\n"", wsctx->header.nread, wsctx->header.headerlen, wsctx->header.payloadlen);\n+      /* frame finished, cleanup state */\n+      hybidecodecleanup(wsctx);\n+    } else if (wsctx->hybidecodestate == ws_hybi_state_err) {\n+      hybidecodecleanup(wsctx);\n+    }\n+    rfblog(""%s_exit: len=%d; ""\n+                      ""ctx: readlen=%d readpos=%p ""\n+                      ""writepos=%p ""\n+                      ""state=%d toread=%d remaining=%d ""\n+                      ""nread=%d carrylen=%d carrybuf=%p ""\n+                      ""result=%d\n"",\n+                      __func__, len,\n+                      wsctx->readlen, wsctx->readpos,\n+                      wsctx->writepos,\n+                      wsctx->hybidecodestate, wsctx->ntoread, hybiremaining(wsctx),\n+                      wsctx->nreadraw, wsctx->carrylen, wsctx->carrybuf,\n+                      result);\n@@ -951,7 +1282,7 @@ websocketshasdatainbuffer(rfbclientptr cl)\n-    if (wsctx && wsctx->readbuflen)\n+    if (wsctx && wsctx->readlen)"
CVE-2017-1000369,[],"('CWE-404', 'Improper Resource Shutdown or Release')",MITRE,2.1,Exim,exim,65e061b76867a9ea7aeeb535341b790b90ae6c21,1,"Exim supports the use of multiple `` -p '' command line arguments which are malloc ( ) 'ed and never free ( ) 'ed , used in conjunction with other issues allows attackers to cause arbitrary code execution . This affects exim version 4.89 and earlier . Please note that at this time upstream has released a patch ( commit 65e061b76867a9ea7aeeb535341b790b90ae6c21 ) , but it is not known if a new point release is available that addresses this issue at this time .",cleanup ( prevent repeated use of -p/-omr to avoid mem leak ),"diff - - git a / doc / doc - docbook / spec . xfpt b / doc / doc - docbook / spec . xfpt \ n @ @ - 4274 , 7 + 4274 , 7 @ @ or & % - bs % & is used . for & % - bh % & , the protocol is forced to one of the standard \ n - be set by & % - omr % & . \ n + be set by & % - omr % & . repeated use of this option is not supported . \ n @ @ - 4374 , 6 + 4374 , 7 @ @ host name and its colon can be omitted when only the protocol is to be set . \ n + repeated use of this option is not supported . \ ndiff - - git a / src / src / exim . c b / src / src / exim . c \ n @ @ - 3106 , 7 + 3106 , 14 @ @ for ( i = 1 ; i < argc ; i + + ) \ n - else if ( ustrcmp ( argrest , ""mr"" ) = = 0 ) received_protocol = argv [ + + i ] ; \ n + else if ( ustrcmp ( argrest , ""mr"" ) = = 0 ) \ n + \ n + if ( received_protocol ) \ n + { \ n + fprintf ( stderr , ""received_protocol is set already\n"" ) ; \ n + exit ( exit_failure ) ; \ n + } \ n + else received_protocol = argv [ + + i ] ; \ n @ @ - 3202 , 7 + 3209 , 15 @ @ for ( i = 1 ; i < argc ; i + + ) \ n - uschar * hn = ustrchr ( argrest , ':' ) ; \ n + uschar * hn ; \ n + \ n + if ( received_protocol ) \ n + { \ n + fprintf ( stderr , ""received_protocol is set already\n"" ) ; \ n + exit ( exit_failure ) ; \ n + } \ n + \ n + hn = ustrchr ( argrest , ':' ) ;"
CVE-2017-13146,['https://github.com/ImageMagick/ImageMagick/commit/79e5dbcdd1fc2f714f9bae548bc55d5073f3ed20'],"('CWE-772', 'Missing Release of Resource after Effective Lifetime')",MITRE,6.8,ImageMagick,ImageMagick,79e5dbcdd1fc2f714f9bae548bc55d5073f3ed20,1,"In ImageMagick before 6.9.8-5 and 7.x before 7.0.5-6 , there is a memory leak in the ReadMATImage function in coders/mat.c .",...,"diff - - git a / coders / mat . c b / coders / mat . c \ n @ @ - 627 , 6 + 627 , 7 @ @ static image * readmatimagev4 ( const imageinfo * image_info , image * image , \ n + quantum_info = ( quantuminfo * ) null ; \ n @ @ - 772 , 7 + 773 , 8 @ @ static image * readmatimagev4 ( const imageinfo * image_info , image * image , \ n - quantum_info = destroyquantuminfo ( quantum_info ) ; \ n + if ( quantum_info ! = ( quantuminfo * ) null ) \ n + quantum_info = destroyquantuminfo ( quantum_info ) ; \ n @ @ - 890 , 6 + 892 , 7 @ @ static image * readmatimage ( const imageinfo * image_info , exceptioninfo * exception ) \ n + quantum_info = ( quantuminfo * ) null ; \ n @ @ - 1290 , 7 + 1293 , 8 @ @ done_reading : \ n - quantum_info = destroyquantuminfo ( quantum_info ) ; \ n + if ( quantum_info ! = ( quantuminfo * ) null ) \ n + quantum_info = destroyquantuminfo ( quantum_info ) ;"
CVE-2017-14172,"['https://github.com/ImageMagick/ImageMagick/commit/bdbbb13f1fe9b7e2465502c500561720f7456aac', 'https://github.com/ImageMagick/ImageMagick/issues/715']","('CWE-834', 'Excessive Iteration')",MITRE,7.1,ImageMagick,ImageMagick,bdbbb13f1fe9b7e2465502c500561720f7456aac,1,"In coders/ps.c in ImageMagick 7.0.7-0 Q16 , a DoS in ReadPSImage ( ) due to lack of an EOF ( End of File ) check might cause huge CPU consumption . When a crafted PSD file , which claims a large `` extent '' field in the header but does not contain sufficient backing data , is provided , the loop over `` length '' would consume huge CPU resources , since there is no EOF check inside the loop .",https : //github.com/imagemagick/imagemagick/issues/715,"diff - - git a / coders / ps . c b / coders / ps . c \ n @ @ - 657 , 6 + 657 , 8 @ @ static image * readpsimage ( const imageinfo * image_info , exceptioninfo * exception ) \ n + if ( length > getblobsize ( image ) ) \ n + throwreaderexception ( corruptimageerror , ""insufficientimagedatainfile"" ) ; \ n @ @ - 724 , 8 + 726 , 8 @ @ static image * readpsimage ( const imageinfo * image_info , exceptioninfo * exception ) \ n - ( void ) formatlocalestring ( property , magickpathextent , ""ps:spotcolor-%.20g"" , \ n - ( double ) ( spotcolor + + ) ) ; \ n + ( void ) formatlocalestring ( property , magickpathextent , \ n + ""ps:spotcolor-%.20g"" , ( double ) ( spotcolor + + ) ) ; \ n @ @ - 895 , 7 + 897 , 8 @ @ static image * readpsimage ( const imageinfo * image_info , exceptioninfo * exception ) \ n - ( void ) concatenatemagickstring ( options , ""-depsfitpage "" , magickpathextent ) ; \ n + ( void ) concatenatemagickstring ( options , ""-depsfitpage "" , \ n + magickpathextent ) ; \ n @ @ - 1043 , 6 + 1046 , 7 @ @ moduleexport size_t registerpsimage ( void ) \ n + entry - > flags | = coderdecoderseekablestreamflag ; \ n @ @ - 1051 , 6 + 1055 , 7 @ @ moduleexport size_t registerpsimage ( void ) \ n + entry - > flags | = coderdecoderseekablestreamflag ; \ n @ @ - 1059 , 6 + 1064 , 7 @ @ moduleexport size_t registerpsimage ( void ) \ n + entry - > flags | = coderdecoderseekablestreamflag ; \ n @ @ - 1068 , 6 + 1074 , 7 @ @ moduleexport size_t registerpsimage ( void ) \ n + entry - > flags | = coderdecoderseekablestreamflag ; \ n @ @ - 1077 , 6 + 1084 , 7 @ @ moduleexport size_t registerpsimage ( void ) \ n + entry - > flags | = coderdecoderseekablestreamflag ;"
CVE-2017-9207,"['https://blogs.gentoo.org/ago/2017/05/20/imageworsener-multiple-vulnerabilities/', 'https://github.com/jsummers/imageworsener/commit/b45cb1b665a14b0175b9cb1502ef7168e1fe0d5d']","('CWE-125', 'Out-of-bounds Read')",MITRE,4.3,jsummers,imageworsener,b45cb1b665a14b0175b9cb1502ef7168e1fe0d5d,1,"The iw_get_ui16be function in imagew-util.c:422:24 in libimageworsener.a in ImageWorsener 1.3.1 allows remote attackers to cause a denial of service ( heap-based buffer over-read ) via a crafted image , related to imagew-jpeg.c .","fixed invalid memory access bugs when decoding jpeg exif data fixes issues # 22 , # 23 , # 24 , # 25","diff - - git a / src / imagew - jpeg . c b / src / imagew - jpeg . c \ n @ @ - 58 , 6 + 58 , 18 @ @ struct iw_exif_state { \ n + static unsigned int get_exif_ui16 ( struct iw_exif_state * e , unsigned int pos ) \ n + { \ n + if ( e - > d_len < 2 | | pos > e - > d_len - 2 ) return 0 ; \ n + return iw_get_ui16_e ( & e - > d [ pos ] , e - > endian ) ; \ n + } \ n + \ n + static unsigned int get_exif_ui32 ( struct iw_exif_state * e , unsigned int pos ) \ n + { \ n + if ( e - > d_len < 4 | | pos > e - > d_len - 4 ) return 0 ; \ n + return iw_get_ui32_e ( & e - > d [ pos ] , e - > endian ) ; \ n + } \ n + \ n @ @ - 66 , 17 + 78 , 17 @ @ static int get_exif_tag_int_value ( struct iw_exif_state * e , unsigned int tag_pos , \ n - field_type = iw_get_ui16_e ( & e - > d [ tag_pos + 2 ] , e - > endian ) ; \ n - value_count = iw_get_ui32_e ( & e - > d [ tag_pos + 4 ] , e - > endian ) ; \ n + field_type = get_exif_ui16 ( e , tag_pos + 2 ) ; \ n + value_count = get_exif_ui32 ( e , tag_pos + 4 ) ; \ n - * pv = iw_get_ui16_e ( & e - > d [ tag_pos + 8 ] , e - > endian ) ; \ n + * pv = get_exif_ui16 ( e , tag_pos + 8 ) ; \ n - * pv = iw_get_ui32_e ( & e - > d [ tag_pos + 8 ] , e - > endian ) ; \ n + * pv = get_exif_ui32 ( e , tag_pos + 8 ) ; \ n @ @ - 93 , 8 + 105 , 8 @ @ static int get_exif_tag_dbl_value ( struct iw_exif_state * e , unsigned int tag_pos , \ n - field_type = iw_get_ui16_e ( & e - > d [ tag_pos + 2 ] , e - > endian ) ; \ n - value_count = iw_get_ui32_e ( & e - > d [ tag_pos + 4 ] , e - > endian ) ; \ n + field_type = get_exif_ui16 ( e , tag_pos + 2 ) ; \ n + value_count = get_exif_ui32 ( e , tag_pos + 4 ) ; \ n @ @ - 103 , 12 + 115 , 12 @ @ static int get_exif_tag_dbl_value ( struct iw_exif_state * e , unsigned int tag_pos , \ n - value_pos = iw_get_ui32_e ( & e - > d [ tag_pos + 8 ] , e - > endian ) ; \ n + value_pos = get_exif_ui32 ( e , tag_pos + 8 ) ; \ n - numer = iw_get_ui32_e ( & e - > d [ value_pos ] , e - > endian ) ; \ n - denom = iw_get_ui32_e ( & e - > d [ value_pos + 4 ] , e - > endian ) ; \ n + numer = get_exif_ui32 ( e , value_pos ) ; \ n + denom = get_exif_ui32 ( e , value_pos + 4 ) ; \ n @ @ - 125 , 15 + 137 , 15 @ @ static void iwjpeg_scan_exif_ifd ( struct iwjpegrcontext * rctx , \ n - if ( ifd < 8 | | ifd > e - > d_len - 18 ) return ; \ n + if ( ifd < 8 | | e - > d_len < 18 | | ifd > e - > d_len - 18 ) return ; \ n - tag_count = iw_get_ui16_e ( & e - > d [ ifd ] , e - > endian ) ; \ n + tag_count = get_exif_ui16 ( e , ifd ) ; \ n - tag_id = iw_get_ui16_e ( & e - > d [ tag_pos ] , e - > endian ) ; \ n + tag_id = get_exif_ui16 ( e , tag_pos ) ; \ n @ @ - 177 , 7 + 189 , 7 @ @ static void iwjpeg_scan_exif ( struct iwjpegrcontext * rctx , \ n - ifd = iw_get_ui32_e ( & d [ 4 ] , e . endian ) ; \ n + ifd = get_exif_ui32 ( & e , 4 ) ;"
CVE-2017-17439,['https://github.com/heimdal/heimdal/issues/353'],"('CWE-476', 'NULL Pointer Dereference')",MITRE,5.0,heimdal,heimdal,1a6a6e462dc2ac6111f9e02c6852ddec4849b887,1,"In Heimdal through 7.4 , remote unauthenticated attackers are able to crash the KDC by sending a crafted UDP packet containing empty data fields for client name or realm . The parser would unconditionally dereference NULL pointers in that case , leading to a segmentation fault . This is related to the _kdc_as_rep function in kdc/kerberos5.c and the der_length_visible_string function in lib/asn1/der_length.c .",security : avoid null structure pointer member dereference this can happen in the error path when processing malformed as requests with a null client name . bug originally introduced on fri feb 13 09:26:01 2015 +0100 in commit : a873e21d7c06f22943a90a41dc733ae76799390d kdc : base _kdc_fast_mk_error ( ) on krb5_mk_error_ext ( ) original patch by jeffrey altman < jaltman @ secure-endpoints.com >,"diff - - git a / kdc / kerberos5 . c b / kdc / kerberos5 . c \ n @ @ - 2232 , 15 + 2232 , 17 @ @ out : \ n - if ( ret ! = 0 & & ret ! = hdb_err_not_found_here & & reply - > length = = 0 ) { \ n + if ( ret ! = 0 & & ret ! = hdb_err_not_found_here & & reply - > length = = 0 ) { \ n - & r - > client_princ - > name , \ n - & r - > client_princ - > realm , \ n + r - > client_princ ? \ n + & r - > client_princ - > name : null , \ n + r - > client_princ ? \ n + & r - > client_princ - > realm : null ,"
CVE-2017-5509,"['http://www.openwall.com/lists/oss-security/2017/01/16/6', 'http://www.openwall.com/lists/oss-security/2017/01/17/5', 'https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=851377', 'https://github.com/ImageMagick/ImageMagick/commit/d4ec73f866a7c42a2e7f301fcd696e5cb7a7d3ab', 'https://github.com/ImageMagick/ImageMagick/issues/350']","('CWE-787', 'Out-of-bounds Write')",Debian GNU/Linux,6.8,ImageMagick,ImageMagick,d4ec73f866a7c42a2e7f301fcd696e5cb7a7d3ab,1,"coders/psd.c in ImageMagick allows remote attackers to have unspecified impact via a crafted PSD file , which triggers an out-of-bounds write .",https : //github.com/imagemagick/imagemagick/issues/350,"diff - - git a / coders / psd . c b / coders / psd . c \ n @ @ - 1118 , 8 + 1118 , 7 @ @ static magickbooleantype readpsdchannelrle ( image * image , const psdinfo * psd_info , \ n - throwbinaryexception ( resourcelimiterror , ""invalidlength"" , \ n - image - > filename ) ; \ n + throwbinaryexception ( resourcelimiterror , ""invalidlength"" , image - > filename ) ; \ n @ @ - 1660 , 8 + 1659 , 8 @ @ moduleexport magickbooleantype readpsdlayers ( image * image , \ n - throwbinaryexception ( corruptimageerror , ""unexpectedendoffile"" , \ n - image - > filename ) ; \ n + throwbinaryexception ( corruptimageerror , \ n + ""unexpectedendoffile"" , image - > filename ) ; \ n @ @ - 2602 , 8 + 2601 , 7 @ @ static unsigned char * acquirecompactpixels ( const image * image , \ n - resourcelimiterror , ""memoryallocationfailed"" , ""`%s'"" , \ n - image - > filename ) ; \ n + resourcelimiterror , ""memoryallocationfailed"" , ""`%s'"" , image - > filename ) ; \ n @ @ - 2634 , 7 + 2632 , 7 @ @ static size_t writepsdchannels ( const psdinfo * psd_info , \ n - compact_pixels = acquirecompactpixels ( image , exception ) ; \ n + compact_pixels = acquirecompactpixels ( next_image , exception ) ;"
CVE-2017-6886,['https://github.com/LibRaw/LibRaw/commit/d7c3d2cb460be10a3ea7b32e9443a83c243b2251'],"('CWE-119', 'Improper Restriction of Operations within the Bounds of a Memory Buffer')",Flexera Software LLC,7.5,LibRaw,LibRaw,d7c3d2cb460be10a3ea7b32e9443a83c243b2251,1,An error within the `` parse_tiff_ifd ( ) '' function ( internal/dcraw_common.cpp ) in LibRaw versions before 0.18.2 can be exploited to corrupt memory .,secunia sa75000 advisory : several buffer overruns,"diff - - git a / dcraw / dcraw . c b / dcraw / dcraw . c \ n @ @ - 12870 , 6 + 12870 , 10 @ @ int class parse_tiff_ifd ( int base ) \ n + #ifdef libraw_library_build\n+	if (ifd >= sizeof tiff_ifd / sizeof tiff_ifd[0])\n+	  throw libraw_exception_io_corrupt;\n+#endif\n@@ -13177,7 +13181,7 @@ int class parse_tiff_ifd(int base)\n-      if (len > 2560000 || !(cbuf = (char *)malloc(len)))\n+      if (len < 1 || len > 2560000 || !(cbuf = (char *)malloc(len)))\n@@ -14795,7 +14799,11 @@ int class parse_jpeg(int offset)\n-    if (get4() == 0x48454150) /* ""heap"" */\n+    if (get4() == 0x48454150\n+#ifdef libraw_library_build\n+	&& (save+hlen) >= 0 && (save+hlen)<=ifp->size()\n+#endif\n+	) /* ""heap"" */\ndiff --git a/internal/dcraw_common.cpp b/internal/dcraw_common.cpp\n@@ -11542,6 +11542,10 @@ int class parse_tiff_ifd(int base)\n+#ifdef libraw_library_build\n+	if (ifd >= sizeof tiff_ifd / sizeof tiff_ifd[0])\n+	  throw libraw_exception_io_corrupt;\n+#endif\n@@ -11849,7 +11853,7 @@ int class parse_tiff_ifd(int base)\n-      if (len > 2560000 || !(cbuf = (char *)malloc(len)))\n+      if (len < 1 || len > 2560000 || !(cbuf = (char *)malloc(len)))\n@@ -13467,7 +13471,11 @@ int class parse_jpeg(int offset)\n-    if (get4() == 0x48454150) /* ""heap"" */\n+    if (get4() == 0x48454150\n+#ifdef libraw_library_build\n+	&& (save+hlen) >= 0 && (save+hlen)<=ifp->size()\n+#endif\n+	) /* ""heap"" */"
CVE-2017-7585,['https://github.com/erikd/libsndfile/commit/60b234301adf258786d8b90be5c1d437fc8799e0'],"('CWE-119', 'Improper Restriction of Operations within the Bounds of a Memory Buffer')",MITRE,4.3,erikd,libsndfile,60b234301adf258786d8b90be5c1d437fc8799e0,1,"In libsndfile before 1.0.28 , an error in the `` flac_buffer_copy ( ) '' function ( flac.c ) can be exploited to cause a stack-based buffer overflow via a specially crafted FLAC file .",src/flac.c : improve error handling especially when dealing with corrupt or malicious files .,"diff - - git a / src / flac . c b / src / flac . c \ n @ @ - 68 , 9 + 68 , 9 @ @ typedef struct \ n - flac__bool bufferbackup ; \ n + \ n @ @ - 187 , 10 + 187 , 9 @ @ flac_buffer_copy ( sf_private * psf ) \ n - * * not sure why this code is here and not elsewhere . \ n - * * removing it causes valgrind errors . \ n + * * this pointer is reset to null each time the current frame has been \ n + * * decoded . somehow its used during encoding and decoding . \ n - pflac - > bufferbackup = sf_true ; \ n @ @ - 206 , 6 + 205 , 11 @ @ flac_buffer_copy ( sf_private * psf ) \ n + if ( pflac - > remain % channels ! = 0 ) \ n + { psf_log_printf ( psf , ""error: pflac->remain %u    channels %u\n"" , pflac - > remain , channels ) ; \ n + return 0 ; \ n + } ; \ n + \ n @ @ - 381 , 7 + 385 , 6 @ @ sf_flac_write_callback ( const flac__streamdecoder * unused ( decoder ) , const flac \ n - pflac - > bufferbackup = sf_false ; \ n @ @ - 907 , 11 + 910 , 19 @ @ flac_init ( sf_private * psf ) \ n + flac__streamdecoderstate state ; \ n + state = flac__stream_decoder_get_state ( pflac - > fsd ) ; \ n + if ( state > flac__stream_decoder_end_of_stream ) \ n + { psf_log_printf ( psf , ""flac__stream_decoder_get_state returned %s\n"" , flac__streamdecoderstatestring [ state ] ) ; \ n + /* current frame is busted, so null the pointer. */ \ n + pflac - > frame = null ; \ n + } ; \ n + \ n @ @ - 920 , 8 + 931 , 13 @ @ flac_read_loop ( sf_private * psf , unsigned len ) \ n - if ( flac__stream_decoder_get_state ( pflac - > fsd ) > = flac__stream_decoder_end_of_stream ) \ n + state = flac__stream_decoder_get_state ( pflac - > fsd ) ; \ n + if ( state > = flac__stream_decoder_end_of_stream ) \ n + { psf_log_printf ( psf , ""flac__stream_decoder_get_state returned %s\n"" , flac__streamdecoderstatestring [ state ] ) ; \ n + /* current frame is busted, so null the pointer. */ \ n + pflac - > frame = null ; \ n + } ;"
CVE-2017-7741,"['https://blogs.gentoo.org/ago/2017/04/11/libsndfile-invalid-memory-read-and-invalid-memory-write-in/', 'https://github.com/erikd/libsndfile/commit/60b234301adf258786d8b90be5c1d437fc8799e0']","('CWE-119', 'Improper Restriction of Operations within the Bounds of a Memory Buffer')",MITRE,4.3,erikd,libsndfile,60b234301adf258786d8b90be5c1d437fc8799e0,1,"In libsndfile before 1.0.28 , an error in the `` flac_buffer_copy ( ) '' function ( flac.c ) can be exploited to cause a segmentation violation ( with write memory access ) via a specially crafted FLAC file during a resample attempt , a similar issue to CVE-2017-7585 .",src/flac.c : improve error handling especially when dealing with corrupt or malicious files .,"diff - - git a / src / flac . c b / src / flac . c \ n @ @ - 68 , 9 + 68 , 9 @ @ typedef struct \ n - flac__bool bufferbackup ; \ n + \ n @ @ - 187 , 10 + 187 , 9 @ @ flac_buffer_copy ( sf_private * psf ) \ n - * * not sure why this code is here and not elsewhere . \ n - * * removing it causes valgrind errors . \ n + * * this pointer is reset to null each time the current frame has been \ n + * * decoded . somehow its used during encoding and decoding . \ n - pflac - > bufferbackup = sf_true ; \ n @ @ - 206 , 6 + 205 , 11 @ @ flac_buffer_copy ( sf_private * psf ) \ n + if ( pflac - > remain % channels ! = 0 ) \ n + { psf_log_printf ( psf , ""error: pflac->remain %u    channels %u\n"" , pflac - > remain , channels ) ; \ n + return 0 ; \ n + } ; \ n + \ n @ @ - 381 , 7 + 385 , 6 @ @ sf_flac_write_callback ( const flac__streamdecoder * unused ( decoder ) , const flac \ n - pflac - > bufferbackup = sf_false ; \ n @ @ - 907 , 11 + 910 , 19 @ @ flac_init ( sf_private * psf ) \ n + flac__streamdecoderstate state ; \ n + state = flac__stream_decoder_get_state ( pflac - > fsd ) ; \ n + if ( state > flac__stream_decoder_end_of_stream ) \ n + { psf_log_printf ( psf , ""flac__stream_decoder_get_state returned %s\n"" , flac__streamdecoderstatestring [ state ] ) ; \ n + /* current frame is busted, so null the pointer. */ \ n + pflac - > frame = null ; \ n + } ; \ n + \ n @ @ - 920 , 8 + 931 , 13 @ @ flac_read_loop ( sf_private * psf , unsigned len ) \ n - if ( flac__stream_decoder_get_state ( pflac - > fsd ) > = flac__stream_decoder_end_of_stream ) \ n + state = flac__stream_decoder_get_state ( pflac - > fsd ) ; \ n + if ( state > = flac__stream_decoder_end_of_stream ) \ n + { psf_log_printf ( psf , ""flac__stream_decoder_get_state returned %s\n"" , flac__streamdecoderstatestring [ state ] ) ; \ n + /* current frame is busted, so null the pointer. */ \ n + pflac - > frame = null ; \ n + } ;"
CVE-2018-1000127,['https://github.com/memcached/memcached/commit/a8c4a82787b8b6c256d61bd5c42fb7f92d1bae00'],"('CWE-667', 'Improper Locking')",MITRE,NVD-CVSS2-Other,memcached,memcached,a8c4a82787b8b6c256d61bd5c42fb7f92d1bae00,1,memcached version prior to 1.4.37 contains an Integer Overflow vulnerability in items.c : item_free ( ) that can result in data corruption and deadlocks due to items existing in hash table being reused from free list . This attack appear to be exploitable via network connectivity to the memcached service . This vulnerability appears to have been fixed in 1.4.37 and later .,do n't overflow item refcount on get counts as a miss if the refcount is too high . ascii multigets are the only time refcounts can be held for so long . doing a dirty read of refcount . is aligned . trying to avoid adding an extra refcount branch for all calls of item_get due to performance . might be able to move it in there after logging refactoring simplifies some of the branches .,"diff - - git a / memcached . c b / memcached . c \ n @ @ - 3249 , 6 + 3249 , 16 @ @ static inline int make_ascii_get_suffix ( char * suffix , item * it , bool return_cas ) \ n + #define it_refcount_limit 60000\n+static inline item* limited_get(char *key, size_t nkey, conn *c) {\n+    item *it = item_get(key, nkey, c, do_update);\n+    if (it && it->refcount > it_refcount_limit) {\n+        item_remove(it);\n+        it = null;\n+    }\n+    return it;\n+}\n+\n@@ -3273,7 +3283,7 @@ static inline void process_get_command(conn *c, token_t *tokens, size_t ntokens,\n-            it = item_get(key, nkey, c, do_update);\n+            it = limited_get(key, nkey, c);"
CVE-2017-2601,"['https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-2601', 'https://github.com/jenkinsci/jenkins/commit/fd2e081b947124c90bcd97bfc55e1a7f2ef41a74']","('CWE-79', ""Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"")","Red Hat, Inc.",NVD-CVSS2-Other,jenkinsci,jenkins,fd2e081b947124c90bcd97bfc55e1a7f2ef41a74,1,"Jenkins before versions 2.44 , 2.32.2 is vulnerable to a persisted cross-site scripting in parameter names and descriptions ( SECURITY-353 ) . Users with the permission to configure jobs were able to inject JavaScript into parameter names and descriptions .",merge pull request # 95 from jenkinsci-cert/security-353 [ security-353 ] persisted xss in parameter definition names and value descriptions,"diff - - git a / core / src / main / java / hudson / model / parametervalue . java b / core / src / main / java / hudson / model / parametervalue . java \ n @ @ - 31 , 11 + 31 , 16 @ @ \ n + import java . io . ioexception ; \ n + import java . util . logging . logger ; \ n + import jenkins . model . jenkins ; \ n + import org . kohsuke . accmod . restricted ; \ n + import org . kohsuke . accmod . restrictions . donotuse ; \ n @ @ - 70 , 6 + 75 , 9 @ @ \ n + \ n + private static final logger logger = logger . getlogger ( parametervalue . class . getname ( ) ) ; \ n + \ n @ @ - 91 , 6 + 99 , 16 @ @ public void setdescription ( string description ) { \ n + @ restricted ( donotuse . class ) // for value.jelly\n+    public string getformatteddescription() {\n+        try {\n+            return jenkins.getinstance().getmarkupformatter().translate(description);\n+        } catch (ioexception e) {\n+            logger.warning(""failed to translate description using configured markup formatter"");\n+            return """";\n+        }\n+    }\n+\ndiff --git a/core/src/main/resources/hudson/model/booleanparameterdefinition/index.jelly b/core/src/main/resources/hudson/model/booleanparameterdefinition/index.jelly\n@@ -26,7 +26,8 @@ the software.\n-	<f:entry title=""${it.name}"" description=""${it.formatteddescription}"">\n+        <j:set var=""escapeentrytitleanddescription"" value=""false""/>\n+        <f:entry title=""${h.escape(it.name)}"" description=""${it.formatteddescription}"">\ndiff --git a/core/src/main/resources/hudson/model/booleanparametervalue/value.jelly b/core/src/main/resources/hudson/model/booleanparametervalue/value.jelly\n@@ -26,7 +26,8 @@ the software.\n-	<f:entry title=""${it.name}"" description=""${it.description}"">\n+        <j:set var=""escapeentrytitleanddescription"" value=""false""/>\n+        <f:entry title=""${h.escape(it.name)}"" description=""${it.formatteddescription}"">\ndiff --git a/core/src/main/resources/hudson/model/choiceparameterdefinition/index.jelly b/core/src/main/resources/hudson/model/choiceparameterdefinition/index.jelly\n@@ -26,7 +26,8 @@ the software.\n-	<f:entry title=""${it.name}"" description=""${it.formatteddescription}"">\n+        <j:set var=""escapeentrytitleanddescription"" value=""false""/>\n+        <f:entry title=""${h.escape(it.name)}"" description=""${it.formatteddescription}"">\ndiff --git a/core/src/main/resources/hudson/model/fileparameterdefinition/index.jelly b/core/src/main/resources/hudson/model/fileparameterdefinition/index.jelly\n@@ -26,7 +26,8 @@ the software.\n-	<f:entry title=""${it.name}"" description=""${it.formatteddescription}"">\n+        <j:set var=""escapeentrytitleanddescription"" value=""false""/>\n+        <f:entry title=""${h.escape(it.name)}"" description=""${it.formatteddescription}"">\ndiff --git a/core/src/main/resources/hudson/model/fileparametervalue/value.jelly b/core/src/main/resources/hudson/model/fileparametervalue/value.jelly\n@@ -26,7 +26,8 @@ the software.\n-    <f:entry title=""${it.name}"">\n+        <j:set var=""escapeentrytitleanddescription"" value=""false""/>\n+        <f:entry title=""${h.escape(it.name)}"" description=""${it.formatteddescription}"">\ndiff --git a/core/src/main/resources/hudson/model/parametersaction/index.jelly b/core/src/main/resources/hudson/model/parametersaction/index.jelly\n@@ -36,6 +36,7 @@ the software.\n+                        <j:set var=""escapeentrytitleanddescription"" value=""true""/> <!-- security-353 defense unless overridden -->\ndiff --git a/core/src/main/resources/hudson/model/parametersdefinitionproperty/index.jelly b/core/src/main/resources/hudson/model/parametersdefinitionproperty/index.jelly\n@@ -45,6 +45,7 @@ the software.\n+          <j:set var=""escapeentrytitleanddescription"" value=""true""/> <!-- security-353 defense unless overridden -->\ndiff --git a/core/src/main/resources/hudson/model/passwordparameterdefinition/index.jelly b/core/src/main/resources/hudson/model/passwordparameterdefinition/index.jelly\n@@ -26,7 +26,8 @@ the software.\n-	<f:entry title=""${it.name}"" description=""${it.formatteddescription}"">\n+        <j:set var=""escapeentrytitleanddescription"" value=""false""/>\n+        <f:entry title=""${h.escape(it.name)}"" description=""${it.formatteddescription}"">\ndiff --git a/core/src/main/resources/hudson/model/passwordparametervalue/value.jelly b/core/src/main/resources/hudson/model/passwordparametervalue/value.jelly\n@@ -26,7 +26,8 @@ the software.\n-	<f:entry title=""${it.name}"" description=""${it.description}"">\n+        <j:set var=""escapeentrytitleanddescription"" value=""false""/>\n+        <f:entry title=""${h.escape(it.name)}"" description=""${it.formatteddescription}"">\ndiff --git a/core/src/main/resources/hudson/model/runparameterdefinition/index.jelly b/core/src/main/resources/hudson/model/runparameterdefinition/index.jelly\n@@ -26,7 +26,8 @@ the software.\n-	<f:entry title=""${it.name}"" description=""${it.formatteddescription}"">\n+        <j:set var=""escapeentrytitleanddescription"" value=""false""/>\n+        <f:entry title=""${h.escape(it.name)}"" description=""${it.formatteddescription}"">\ndiff --git a/core/src/main/resources/hudson/model/runparametervalue/value.jelly b/core/src/main/resources/hudson/model/runparametervalue/value.jelly\n@@ -26,7 +26,8 @@ the software.\n-	<f:entry title=""${it.name}"" description=""${it.description}"">\n+        <j:set var=""escapeentrytitleanddescription"" value=""false""/>\n+        <f:entry title=""${h.escape(it.name)}"" description=""${it.formatteddescription}"">\ndiff --git a/core/src/main/resources/hudson/model/stringparameterdefinition/index.jelly b/core/src/main/resources/hudson/model/stringparameterdefinition/index.jelly\n@@ -26,7 +26,8 @@ the software.\n-	<f:entry title=""${it.name}"" description=""${it.formatteddescription}"">\n+        <j:set var=""escapeentrytitleanddescription"" value=""false""/>\n+        <f:entry title=""${h.escape(it.name)}"" description=""${it.formatteddescription}"">\ndiff --git a/core/src/main/resources/hudson/model/stringparametervalue/value.jelly b/core/src/main/resources/hudson/model/stringparametervalue/value.jelly\n@@ -26,7 +26,8 @@ the software.\n-	<f:entry title=""${it.name}"" description=""${it.description}"">\n+        <j:set var=""escapeentrytitleanddescription"" value=""false""/>\n+        <f:entry title=""${h.escape(it.name)}"" description=""${it.formatteddescription}"">\ndiff --git a/core/src/main/resources/hudson/model/textparameterdefinition/index.jelly b/core/src/main/resources/hudson/model/textparameterdefinition/index.jelly\n@@ -24,7 +24,8 @@ the software.\n-  <f:entry title=""${it.name}"" description=""${it.formatteddescription}"">\n+    <j:set var=""escapeentrytitleanddescription"" value=""false""/>\n+    <f:entry title=""${h.escape(it.name)}"" description=""${it.formatteddescription}"">\ndiff --git a/core/src/main/resources/hudson/model/textparametervalue/value.jelly b/core/src/main/resources/hudson/model/textparametervalue/value.jelly\n@@ -26,7 +26,8 @@ the software.\n-	<f:entry title=""${it.name}"" description=""${it.description}"">\n+        <j:set var=""escapeentrytitleanddescription"" value=""false""/>\n+        <f:entry title=""${h.escape(it.name)}"" description=""${it.formatteddescription}"">\ndiff --git a/core/src/main/resources/lib/form/entry.jelly b/core/src/main/resources/lib/form/entry.jelly\n@@ -32,6 +32,8 @@ the software.\n+\n+      this content is html (unless the boolean variable escapeentrytitleanddescription is set). use h.escape if necessary.\n@@ -46,6 +48,8 @@ the software.\n+\n+      this content is html (unless the boolean variable escapeentrytitleanddescription is set). use h.escape if necessary.\n@@ -67,7 +71,7 @@ the software.\n-      <j:out value=""${attrs.title}"" />\n+      <j:out value=""${escapeentrytitleanddescription ? h.escape(attrs.title) : attrs.title}"" />\n@@ -78,7 +82,7 @@ the software.\n-      <j:out value=""${description}""/>\n+      <j:out value=""${escapeentrytitleanddescription ? h.escape(attrs.description) : attrs.description}""/>\ndiff --git a/test/src/test/java/hudson/model/parameterstest.java b/test/src/test/java/hudson/model/parameterstest.java\n@@ -1,25 +1,30 @@\n-import static org.junit.assert.*;\n-\n+import com.gargoylesoftware.htmlunit.html.htmlcheckboxinput;\n+import com.gargoylesoftware.htmlunit.html.htmlelement;\n+import com.gargoylesoftware.htmlunit.html.htmlform;\n-import org.junit.rule;\n-import org.junit.test;\n-\n+import com.gargoylesoftware.htmlunit.html.htmloption;\n-import com.gargoylesoftware.htmlunit.html.htmlform;\n-import com.gargoylesoftware.htmlunit.html.htmlelement;\n-import com.gargoylesoftware.htmlunit.html.htmlcheckboxinput;\n-import com.gargoylesoftware.htmlunit.html.htmloption;\n+import hudson.markup.markupformatter;\n+import java.io.ioexception;\n+import java.io.writer;\n+import java.util.set;\n+import java.util.regex.matcher;\n+import java.util.regex.pattern;\n+import org.apache.http.httpstatus;\n+import static org.hamcrest.matchers.*;\n+import static org.junit.assert.*;\n+import org.junit.rule;\n+import org.junit.test;\n+import org.junit.rules.errorcollector;\n-import java.util.set;\n-\n@@ -28,6 +33,9 @@ public class parameterstest {\n+    @rule\n+    public errorcollector collector = new errorcollector();\n+\n@@ -216,4 +224,52 @@ public void unicodeparametersarepresetcorrectly() throws exception {\n+\n+    @issue(""security-353"")\n+    @test\n+    public void xss() throws exception {\n+        j.jenkins.setmarkupformatter(new mymarkupformatter());\n+        freestyleproject p = j.createfreestyleproject(""p"");\n+        stringparameterdefinition param = new stringparameterdefinition(""<param name>"", ""<param default>"", ""<param description>"");\n+        assertequals(""<b>[</b>param description<b>]</b>"", param.getformatteddescription());\n+        p.addproperty(new parametersdefinitionproperty(param));\n+        webclient wc = j.createwebclient();\n+        wc.getoptions().setthrowexceptiononfailingstatuscode(false);\n+        htmlpage page = wc.getpage(p, ""build?delay=0sec"");\n+        collector.checkthat(page.getwebresponse().getstatuscode(), is(httpstatus.sc_method_not_allowed)); // 405 to dissuade scripts from thinking this triggered the build\n+        string text = page.getwebresponse().getcontentasstring();\n+        collector.checkthat(""build page should escape param name"", text, containsstring(""&lt;param name&gt;""));\n+        collector.checkthat(""build page should not leave param name unescaped"", text, not(containsstring(""<param name>"")));\n+        collector.checkthat(""build page should escape param default"", text, containsstring(""&lt;param default&gt;""));\n+        collector.checkthat(""build page should not leave param default unescaped"", text, not(containsstring(""<param default>"")));\n+        collector.checkthat(""build page should mark up param description"", text, containsstring(""<b>[</b>param description<b>]</b>""));\n+        collector.checkthat(""build page should not leave param description unescaped"", text, not(containsstring(""<param description>"")));\n+        htmlform form = page.getformbyname(""parameters"");\n+        htmltextinput value = form.getinputbyvalue(""<param default>"");\n+        value.settext(""<param value>"");\n+        j.submit(form);\n+        j.waituntilnoactivity();\n+        freestylebuild b = p.getbuildbynumber(1);\n+        page = j.createwebclient().getpage(b, ""parameters/"");\n+        text = page.getwebresponse().getcontentasstring();\n+        collector.checkthat(""parameters page should escape param name"", text, containsstring(""&lt;param name&gt;""));\n+        collector.checkthat(""parameters page should not leave param name unescaped"", text, not(containsstring(""<param name>"")));\n+        collector.checkthat(""parameters page should escape param value"", text, containsstring(""&lt;param value&gt;""));\n+        collector.checkthat(""parameters page should not leave param value unescaped"", text, not(containsstring(""<param value>"")));\n+        collector.checkthat(""parameters page should mark up param description"", text, containsstring(""<b>[</b>param description<b>]</b>""));\n+        collector.checkthat(""parameters page should not leave param description unescaped"", text, not(containsstring(""<param description>"")));\n+    }\n+    static class mymarkupformatter extends markupformatter {\n+        @override\n+        public void translate(string markup, writer output) throws ioexception {\n+            matcher m = pattern.compile(""[<>]"").matcher(markup);\n+            stringbuffer buf = new stringbuffer();\n+            while (m.find()) {\n+                m.appendreplacement(buf, m.group().equals(""<"") ? ""<b>[</b>"" : ""<b>]</b>"");\n+            }\n+            m.appendtail(buf);\n+            output.write(buf.tostring());\n+        }\n+    }\n+"
CVE-2015-8957,"['http://www.openwall.com/lists/oss-security/2016/09/22/2', 'https://bugzilla.redhat.com/show_bug.cgi?id=1378735', 'https://github.com/ImageMagick/ImageMagick/commit/450bd716ed3b9186dd10f9e60f630a3d9eeea2a4', 'https://github.com/ImageMagick/ImageMagick/commit/78f82d9d1c2944725a279acd573a22168dc6e22a', 'https://github.com/ImageMagick/ImageMagick/commit/bd96074b254c6607a0f7731e59f923ad19d5a46d']","('CWE-119', 'Improper Restriction of Operations within the Bounds of a Memory Buffer')",Debian GNU/Linux,NVD-CVSS2-Other,ImageMagick,ImageMagick,bd96074b254c6607a0f7731e59f923ad19d5a46d,1,Buffer overflow in ImageMagick before 6.9.0-4 Beta allows remote attackers to cause a denial of service ( application crash ) via a crafted SUN file .,http : //www.imagemagick.org/discourse-server/viewtopic.php ? f=3 & t=26848,"diff - - git a / coders / sun . c b / coders / sun . c \ n @ @ - 326 , 28 + 326 , 17 @ @ static image * readsunimage ( const imageinfo * image_info , exceptioninfo * exception ) \ n - image - > storage_class = pseudoclass ; \ n + if ( acquireimagecolormap ( image , image - > colors , exception ) = = magickfalse ) \ n + throwreaderexception ( resourcelimiterror , ""memoryallocationfailed"" ) ; \ n - case rmt_none : \ n - { \ n - if ( sun_info . depth < 24 ) \ n - { \ n - /*\n-              create linear color ramp.\n-            */ \ n - if ( acquireimagecolormap ( image , image - > colors , exception ) = = magickfalse ) \ n - throwreaderexception ( resourcelimiterror , ""memoryallocationfailed"" ) ; \ n - } \ n - break ; \ n - } \ n @ @ - 356 , 8 + 345 , 6 @ @ static image * readsunimage ( const imageinfo * image_info , exceptioninfo * exception ) \ n - if ( acquireimagecolormap ( image , image - > colors , exception ) = = magickfalse ) \ n - throwreaderexception ( resourcelimiterror , ""memoryallocationfailed"" ) ;"
CVE-2015-8957,"['http://www.openwall.com/lists/oss-security/2016/09/22/2', 'https://bugzilla.redhat.com/show_bug.cgi?id=1378735', 'https://github.com/ImageMagick/ImageMagick/commit/450bd716ed3b9186dd10f9e60f630a3d9eeea2a4', 'https://github.com/ImageMagick/ImageMagick/commit/78f82d9d1c2944725a279acd573a22168dc6e22a', 'https://github.com/ImageMagick/ImageMagick/commit/bd96074b254c6607a0f7731e59f923ad19d5a46d']","('CWE-119', 'Improper Restriction of Operations within the Bounds of a Memory Buffer')",Debian GNU/Linux,NVD-CVSS2-Other,ImageMagick,ImageMagick,bd96074b254c6607a0f7731e59f923ad19d5a46d,1,Buffer overflow in ImageMagick before 6.9.0-4 Beta allows remote attackers to cause a denial of service ( application crash ) via a crafted SUN file .,http : //www.imagemagick.org/discourse-server/viewtopic.php ? f=3 & t=26848,"diff - - git a / coders / sun . c b / coders / sun . c \ n @ @ - 326 , 28 + 326 , 17 @ @ static image * readsunimage ( const imageinfo * image_info , exceptioninfo * exception ) \ n - image - > storage_class = pseudoclass ; \ n + if ( acquireimagecolormap ( image , image - > colors , exception ) = = magickfalse ) \ n + throwreaderexception ( resourcelimiterror , ""memoryallocationfailed"" ) ; \ n - case rmt_none : \ n - { \ n - if ( sun_info . depth < 24 ) \ n - { \ n - /*\n-              create linear color ramp.\n-            */ \ n - if ( acquireimagecolormap ( image , image - > colors , exception ) = = magickfalse ) \ n - throwreaderexception ( resourcelimiterror , ""memoryallocationfailed"" ) ; \ n - } \ n - break ; \ n - } \ n @ @ - 356 , 8 + 345 , 6 @ @ static image * readsunimage ( const imageinfo * image_info , exceptioninfo * exception ) \ n - if ( acquireimagecolormap ( image , image - > colors , exception ) = = magickfalse ) \ n - throwreaderexception ( resourcelimiterror , ""memoryallocationfailed"" ) ;"
CVE-2015-8957,"['http://www.openwall.com/lists/oss-security/2016/09/22/2', 'https://bugzilla.redhat.com/show_bug.cgi?id=1378735', 'https://github.com/ImageMagick/ImageMagick/commit/450bd716ed3b9186dd10f9e60f630a3d9eeea2a4', 'https://github.com/ImageMagick/ImageMagick/commit/78f82d9d1c2944725a279acd573a22168dc6e22a', 'https://github.com/ImageMagick/ImageMagick/commit/bd96074b254c6607a0f7731e59f923ad19d5a46d']","('CWE-119', 'Improper Restriction of Operations within the Bounds of a Memory Buffer')",Debian GNU/Linux,NVD-CVSS2-Other,ImageMagick,ImageMagick,450bd716ed3b9186dd10f9e60f630a3d9eeea2a4,1,Buffer overflow in ImageMagick before 6.9.0-4 Beta allows remote attackers to cause a denial of service ( application crash ) via a crafted SUN file ., ,"diff - - git a / magickcore / composite . c b / magickcore / composite . c \ n @ @ - 2305 , 7 + 2305 , 7 @ @ if ( 0 ) \ n - q [ i ] = clamptoquantum ( pixel ) ; \ n + q [ i ] = clamppixel ( pixel ) ; \ ndiff - - git a / magickcore / pixel - accessor . h b / magickcore / pixel - accessor . h \ n @ @ - 31 , 6 + 31 , 19 @ @ extern ""c"" { \ n + static inline quantum clamppixel ( const magickrealtype value ) \ n + { \ n + #if !defined(magickcore_hdri_support)\n+  return((quantum) value);\n+#else\n+  if (value < 0.0)\n+    return((quantum) 0.0);\n+  if (value >= (magickrealtype) quantumrange)\n+    return((quantum) quantumrange);\n+  return((quantum) value);\n+#endif\n+}\n+\ndiff --git a/magickcore/threshold.c b/magickcore/threshold.c\n@@ -685,19 +685,6 @@ magickexport magickbooleantype blackthresholdimage(image *image,\n-static inline quantum clamppixel(const magickrealtype value)\n-{\n-#if !defined(magickcore_hdri_support)\n-  return((quantum) value);\n-#else\n-  if (value < 0.0f)\n-    return(0.0);\n-  if (value >= (magickrealtype) quantumrange)\n-    return((quantum) quantumrange);\n-  return(value);\n-#endif\n-}\n-\ndiff --git a/coders/sun.c b/coders/sun.c\n@@ -337,6 +337,8 @@ static image *readsunimage(const imageinfo *image_info,exceptioninfo *exception)\n+      case rmt_none:\n+        break;"
CVE-2015-8957,"['http://www.openwall.com/lists/oss-security/2016/09/22/2', 'https://bugzilla.redhat.com/show_bug.cgi?id=1378735', 'https://github.com/ImageMagick/ImageMagick/commit/450bd716ed3b9186dd10f9e60f630a3d9eeea2a4', 'https://github.com/ImageMagick/ImageMagick/commit/78f82d9d1c2944725a279acd573a22168dc6e22a', 'https://github.com/ImageMagick/ImageMagick/commit/bd96074b254c6607a0f7731e59f923ad19d5a46d']","('CWE-119', 'Improper Restriction of Operations within the Bounds of a Memory Buffer')",Debian GNU/Linux,NVD-CVSS2-Other,ImageMagick,ImageMagick,450bd716ed3b9186dd10f9e60f630a3d9eeea2a4,1,Buffer overflow in ImageMagick before 6.9.0-4 Beta allows remote attackers to cause a denial of service ( application crash ) via a crafted SUN file ., ,"diff - - git a / magickcore / composite . c b / magickcore / composite . c \ n @ @ - 2305 , 7 + 2305 , 7 @ @ if ( 0 ) \ n - q [ i ] = clamptoquantum ( pixel ) ; \ n + q [ i ] = clamppixel ( pixel ) ; \ ndiff - - git a / magickcore / pixel - accessor . h b / magickcore / pixel - accessor . h \ n @ @ - 31 , 6 + 31 , 19 @ @ extern ""c"" { \ n + static inline quantum clamppixel ( const magickrealtype value ) \ n + { \ n + #if !defined(magickcore_hdri_support)\n+  return((quantum) value);\n+#else\n+  if (value < 0.0)\n+    return((quantum) 0.0);\n+  if (value >= (magickrealtype) quantumrange)\n+    return((quantum) quantumrange);\n+  return((quantum) value);\n+#endif\n+}\n+\ndiff --git a/magickcore/threshold.c b/magickcore/threshold.c\n@@ -685,19 +685,6 @@ magickexport magickbooleantype blackthresholdimage(image *image,\n-static inline quantum clamppixel(const magickrealtype value)\n-{\n-#if !defined(magickcore_hdri_support)\n-  return((quantum) value);\n-#else\n-  if (value < 0.0f)\n-    return(0.0);\n-  if (value >= (magickrealtype) quantumrange)\n-    return((quantum) quantumrange);\n-  return(value);\n-#endif\n-}\n-\ndiff --git a/coders/sun.c b/coders/sun.c\n@@ -337,6 +337,8 @@ static image *readsunimage(const imageinfo *image_info,exceptioninfo *exception)\n+      case rmt_none:\n+        break;"
CVE-2017-6503,"['https://github.com/qbittorrent/qBittorrent/commit/6ca3e4f094da0a0017cb2d483ec1db6176bb0b16', 'https://www.qbittorrent.org/news.php']","('CWE-79', ""Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"")",MITRE,NVD-CVSS2-Other,qbittorrent,qBittorrent,6ca3e4f094da0a0017cb2d483ec1db6176bb0b16,1,"WebUI in qBittorrent before 3.3.11 did not escape many values , which could potentially lead to XSS .",add utils : :string : :tohtmlescaped,"diff - - git a / src / base / logger . cpp b / src / base / logger . cpp \ n @ @ - 1 , 6 + 1 , 7 @ @ \ n + #include ""base/utils/string.h""\n@@ -36,7 +37,7 @@ void logger::addmessage(const qstring &message, const log::msgtype &type)\n-    log::msg temp = { msgcounter++, qdatetime::currentmsecssinceepoch(), type, message };\n+    log::msg temp = { msgcounter++, qdatetime::currentmsecssinceepoch(), type, utils::string::tohtmlescaped(message) };\n@@ -49,7 +50,7 @@ void logger::addpeer(const qstring &ip, bool blocked, const qstring &reason)\n-    log::peer temp = { peercounter++, qdatetime::currentmsecssinceepoch(), ip, blocked, reason };\n+    log::peer temp = { peercounter++, qdatetime::currentmsecssinceepoch(), utils::string::tohtmlescaped(ip), blocked, utils::string::tohtmlescaped(reason) };\ndiff --git a/src/base/utils/string.cpp b/src/base/utils/string.cpp\n@@ -211,3 +211,12 @@ bool utils::string::slowequals(const qbytearray &a, const qbytearray &b)\n+\n+qstring utils::string::tohtmlescaped(const qstring &str)\n+{\n+#ifdef qbt_uses_qt5\n+    return str.tohtmlescaped();\n+#else\n+    return qt::escape(str);\n+#endif\n+}\ndiff --git a/src/base/utils/string.h b/src/base/utils/string.h\n@@ -47,6 +47,8 @@ namespace utils\n+        qstring tohtmlescaped(const qstring &str);\n+\ndiff --git a/src/gui/deletionconfirmationdlg.h b/src/gui/deletionconfirmationdlg.h\n@@ -35,8 +35,9 @@\n-#include ""guiiconprovider.h""\n+#include ""base/utils/string.h""\n+#include ""guiiconprovider.h""\n@@ -45,7 +46,7 @@ class deletionconfirmationdlg : public qdialog, private ui::confirmdeletiondlg {\n-      label->settext(tr(""are you sure you want to delete '%1' from the transfer list?"", ""are you sure you want to delete 'ubuntu-linux-iso' from the transfer list?"").arg(name));\n+      label->settext(tr(""are you sure you want to delete '%1' from the transfer list?"", ""are you sure you want to delete 'ubuntu-linux-iso' from the transfer list?"").arg(utils::string::tohtmlescaped(name)));\ndiff --git a/src/gui/properties/peerlistwidget.cpp b/src/gui/properties/peerlistwidget.cpp\n@@ -401,7 +401,7 @@ qstandarditem* peerlistwidget::addpeer(const qstring& ip, bittorrent::torrenthan\n-    m_listmodel->setdata(m_listmodel->index(row, peerlistdelegate::client), peer.client());\n+    m_listmodel->setdata(m_listmodel->index(row, peerlistdelegate::client), utils::string::tohtmlescaped(peer.client()));\n@@ -432,7 +432,7 @@ void peerlistwidget::updatepeer(const qstring &ip, bittorrent::torrenthandle *co\n-    m_listmodel->setdata(m_listmodel->index(row, peerlistdelegate::client), peer.client());\n+    m_listmodel->setdata(m_listmodel->index(row, peerlistdelegate::client), utils::string::tohtmlescaped(peer.client()));\ndiff --git a/src/gui/properties/propertieswidget.cpp b/src/gui/properties/propertieswidget.cpp\n@@ -314,12 +314,12 @@ void propertieswidget::loadtorrentinfos(bittorrent::torrenthandle *const torrent\n-        comment_text->settext(utils::misc::parsehtmllinks(m_torrent->comment()));\n+        comment_text->settext(utils::misc::parsehtmllinks(utils::string::tohtmlescaped(m_torrent->comment())));\n-        label_created_by_val->settext(m_torrent->creator());\n+        label_created_by_val->settext(utils::string::tohtmlescaped(m_torrent->creator()));"
CVE-2017-3738,"['http://www.oracle.com/technetwork/security-advisory/cpuapr2018-3678067.html', 'http://www.oracle.com/technetwork/security-advisory/cpujan2018-3236628.html', 'http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html', 'http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html', 'https://github.com/openssl/openssl/commit/e502cc86df9dafded1694fceb3228ee34d11c11a', 'https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html', 'https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html', 'https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html']","('CWE-200', 'Exposure of Sensitive Information to an Unauthorized Actor')",OpenSSL Software Foundation,NVD-CVSS2-Other,openssl,openssl,5630661aecbea5fe3c4740f5fea744a1f07a6253,1,"There is an overflow bug in the AVX2 Montgomery multiplication procedure used in exponentiation with 1024-bit moduli . No EC algorithms are affected . Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely . Attacks against DH1024 are considered just feasible , because most of the work necessary to deduce information about a private key may be performed offline . The amount of resources required for such an attack would be significant . However , for an attack on TLS to be meaningful , the server would have to share the DH1024 private key among multiple clients , which is no longer an option since CVE-2016-0701 . This only affects processors that support the AVX2 but not ADX extensions like Intel Haswell ( 4th generation ) . Note : The impact from this issue is similar to CVE-2017-3736 , CVE-2017-3732 and CVE-2015-3193 . OpenSSL version 1.0.2-1.0.2m and 1.1.0-1.1.0g are affected . Fixed in OpenSSL 1.0.2n . Due to the low severity of this issue we are not issuing a new release of OpenSSL 1.1.0 at this time . The fix will be included in OpenSSL 1.1.0h when it becomes available . The fix is also available in commit e502cc86d in the OpenSSL git repository .",bn/asm/rsaz-avx2.pl : fix digit correction bug in rsaz_1024_mul_avx2 . credit to oss-fuzz for finding this . cve-2017-3738 reviewed-by : rich salz < rsalz @ openssl.org >,"diff - - git a / crypto / bn / asm / rsaz - avx2 . pl b / crypto / bn / asm / rsaz - avx2 . pl \ n @ @ - 217 , 7 + 217 , 7 @ @ $ code . = < < ___ ; \ n - vpbroadcastq . land_mask ( % rip ) , $ and_mask \ n + vmovdqu . land_mask ( % rip ) , $ and_mask \ n @ @ - 1067 , 10 + 1067 , 10 @ @ $ code . = < < ___ ; \ n - vpblendd \ $ 3 , $ zero , $ acc9 , $ acc9 # correct $acc3\n+	 vpblendd	\$3, $zero, $acc9, $temp1	# correct $acc3\n-	 vpaddq		$acc9, $acc3, $acc3		# correct $acc3\n+	 vpaddq		$temp1, $acc3, $acc3		# correct $acc3\n@@ -1083,7 +1083,9 @@ $code.=<<___;\n+	 vpblendd	\$0xfc, $zero, $acc9, $acc9	# correct $acc3\n+	 vpaddq		$acc9,$acc4,$acc4		# correct $acc3\n@@ -1319,15 +1321,12 @@ ___\n-#	avoid performance penalties completely. also note that we\n-#	correct only three digits out of four. this works because\n-#	most significant digit is subjected to less additions.\n+#	avoid performance penalties completely.\n-	vpermq		\$0, $and_mask, $and_mask\n@@ -1774,7 +1773,7 @@ $code.=<<___;\n-	.quad	0x1fffffff,0x1fffffff,0x1fffffff,-1\n+	.quad	0x1fffffff,0x1fffffff,0x1fffffff,0x1fffffff"
CVE-2017-9438,"['https://github.com/VirusTotal/yara/commit/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7', 'https://github.com/VirusTotal/yara/issues/674']","('CWE-674', 'Uncontrolled Recursion')",MITRE,NVD-CVSS2-Other,VirusTotal,yara,10e8bd3071677dd1fa76beeef4bc2fc427cea5e7,1,"libyara/re.c in the regexp module in YARA 3.5.0 allows remote attackers to cause a denial of service ( stack consumption ) via a crafted rule ( involving hex strings ) that is mishandled in the _yr_re_emit function , a different vulnerability than CVE-2017-9304 .",fix issue # 674 for hex strings .,"diff - - git a / libyara / hex_grammar . c b / libyara / hex_grammar . c \ n @ @ - 93 , 6 + 93 , 13 @ @ \ n + #define incr_ast_levels() \\n+    if (((re_ast*) yyget_extra(yyscanner))->levels++ > re_max_ast_levels) \\n+    { \\n+      lex_env->last_error_code = error_invalid_hex_string; \\n+      yyabort; \\n+    }\n+\n@@ -107,7 +114,7 @@\n-#line 111 ""hex_grammar.c"" /* yacc.c:339  */\n+#line 118 ""hex_grammar.c"" /* yacc.c:339  */\n@@ -157,12 +164,12 @@ extern int hex_yydebug;\n-#line 78 ""hex_grammar.y"" /* yacc.c:355  */\n+#line 85 ""hex_grammar.y"" /* yacc.c:355  */\n-#line 166 ""hex_grammar.c"" /* yacc.c:355  */\n+#line 173 ""hex_grammar.c"" /* yacc.c:355  */\n@@ -178,7 +185,7 @@ int hex_yyparse (void *yyscanner, hex_lex_environment *lex_env);\n-#line 182 ""hex_grammar.c"" /* yacc.c:358  */\n+#line 189 ""hex_grammar.c"" /* yacc.c:358  */\n@@ -476,9 +483,9 @@ static const yytype_uint8 yytranslate[] =\n-       0,   105,   105,   114,   118,   127,   189,   193,   206,   210,\n-     219,   233,   232,   245,   268,   300,   322,   342,   346,   360,\n-     368\n+       0,   112,   112,   121,   125,   136,   200,   204,   219,   223,\n+     232,   246,   245,   258,   281,   313,   335,   355,   359,   374,\n+     382\n@@ -1017,45 +1024,45 @@ yydestruct (const char *yymsg, int yytype, yystype *yyvaluep, void *yyscanner, h\n-#line 94 ""hex_grammar.y"" /* yacc.c:1257  */\n+#line 101 ""hex_grammar.y"" /* yacc.c:1257  */\n-#line 1023 ""hex_grammar.c"" /* yacc.c:1257  */\n+#line 1030 ""hex_grammar.c"" /* yacc.c:1257  */\n-#line 95 ""hex_grammar.y"" /* yacc.c:1257  */\n+#line 102 ""hex_grammar.y"" /* yacc.c:1257  */\n-#line 1029 ""hex_grammar.c"" /* yacc.c:1257  */\n+#line 1036 ""hex_grammar.c"" /* yacc.c:1257  */\n-#line 96 ""hex_grammar.y"" /* yacc.c:1257  */\n+#line 103 ""hex_grammar.y"" /* yacc.c:1257  */\n-#line 1035 ""hex_grammar.c"" /* yacc.c:1257  */\n+#line 1042 ""hex_grammar.c"" /* yacc.c:1257  */\n-#line 97 ""hex_grammar.y"" /* yacc.c:1257  */\n+#line 104 ""hex_grammar.y"" /* yacc.c:1257  */\n-#line 1041 ""hex_grammar.c"" /* yacc.c:1257  */\n+#line 1048 ""hex_grammar.c"" /* yacc.c:1257  */\n-#line 100 ""hex_grammar.y"" /* yacc.c:1257  */\n+#line 107 ""hex_grammar.y"" /* yacc.c:1257  */\n-#line 1047 ""hex_grammar.c"" /* yacc.c:1257  */\n+#line 1054 ""hex_grammar.c"" /* yacc.c:1257  */\n-#line 99 ""hex_grammar.y"" /* yacc.c:1257  */\n+#line 106 ""hex_grammar.y"" /* yacc.c:1257  */\n-#line 1053 ""hex_grammar.c"" /* yacc.c:1257  */\n+#line 1060 ""hex_grammar.c"" /* yacc.c:1257  */\n-#line 98 ""hex_grammar.y"" /* yacc.c:1257  */\n+#line 105 ""hex_grammar.y"" /* yacc.c:1257  */\n-#line 1059 ""hex_grammar.c"" /* yacc.c:1257  */\n+#line 1066 ""hex_grammar.c"" /* yacc.c:1257  */\n@@ -1321,25 +1328,27 @@ yyreduce:\n-#line 106 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 113 ""hex_grammar.y"" /* yacc.c:1661  */\n-#line 1330 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1337 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 115 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 122 ""hex_grammar.y"" /* yacc.c:1661  */\n-#line 1338 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1345 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 119 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 126 ""hex_grammar.y"" /* yacc.c:1661  */\n+        incr_ast_levels();\n+\n@@ -1347,16 +1356,18 @@ yyreduce:\n-#line 1351 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1360 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 128 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 137 ""hex_grammar.y"" /* yacc.c:1661  */\n+        incr_ast_levels();\n+\n@@ -1409,20 +1420,22 @@ yyreduce:\n-#line 1413 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1424 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 190 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 201 ""hex_grammar.y"" /* yacc.c:1661  */\n-#line 1421 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1432 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 194 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 205 ""hex_grammar.y"" /* yacc.c:1661  */\n+        incr_ast_levels();\n+\n@@ -1430,28 +1443,28 @@ yyreduce:\n-#line 1434 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1447 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 207 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 220 ""hex_grammar.y"" /* yacc.c:1661  */\n-#line 1442 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1455 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 211 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 224 ""hex_grammar.y"" /* yacc.c:1661  */\n-#line 1451 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1464 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 220 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 233 ""hex_grammar.y"" /* yacc.c:1661  */\n@@ -1464,28 +1477,28 @@ yyreduce:\n-#line 1468 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1481 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 233 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 246 ""hex_grammar.y"" /* yacc.c:1661  */\n-#line 1476 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1489 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 237 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 250 ""hex_grammar.y"" /* yacc.c:1661  */\n-#line 1485 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1498 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 246 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 259 ""hex_grammar.y"" /* yacc.c:1661  */\n@@ -1508,11 +1521,11 @@ yyreduce:\n-#line 1512 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1525 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 269 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 282 ""hex_grammar.y"" /* yacc.c:1661  */\n@@ -1544,11 +1557,11 @@ yyreduce:\n-#line 1548 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1561 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 301 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 314 ""hex_grammar.y"" /* yacc.c:1661  */\n@@ -1570,11 +1583,11 @@ yyreduce:\n-#line 1574 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1587 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 323 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 336 ""hex_grammar.y"" /* yacc.c:1661  */\n@@ -1590,21 +1603,22 @@ yyreduce:\n-#line 1594 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1607 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 343 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 356 ""hex_grammar.y"" /* yacc.c:1661  */\n-#line 1602 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1615 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 347 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 360 ""hex_grammar.y"" /* yacc.c:1661  */\n+        incr_ast_levels();\n@@ -1613,11 +1627,11 @@ yyreduce:\n-#line 1617 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1631 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 361 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 375 ""hex_grammar.y"" /* yacc.c:1661  */\n@@ -1625,11 +1639,11 @@ yyreduce:\n-#line 1629 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1643 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 369 ""hex_grammar.y"" /* yacc.c:1646  */\n+#line 383 ""hex_grammar.y"" /* yacc.c:1661  */\n@@ -1649,11 +1663,11 @@ yyreduce:\n-#line 1653 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1667 ""hex_grammar.c"" /* yacc.c:1661  */\n-#line 1657 ""hex_grammar.c"" /* yacc.c:1646  */\n+#line 1671 ""hex_grammar.c"" /* yacc.c:1661  */\n@@ -1881,5 +1895,5 @@ yyreturn:\n-#line 390 ""hex_grammar.y"" /* yacc.c:1906  */\n+#line 404 ""hex_grammar.y"" /* yacc.c:1906  */\ndiff --git a/libyara/hex_grammar.h b/libyara/hex_grammar.h\n@@ -60,12 +60,12 @@ extern int hex_yydebug;\n-#line 78 ""hex_grammar.y"" /* yacc.c:1909  */\n+#line 85 ""hex_grammar.y"" /* yacc.c:1915  */\n-#line 69 ""hex_grammar.h"" /* yacc.c:1909  */\n+#line 69 ""hex_grammar.h"" /* yacc.c:1915  */\ndiff --git a/libyara/hex_grammar.y b/libyara/hex_grammar.y\n@@ -51,6 +51,13 @@ software, even if advised of the possibility of such damage.\n+#define incr_ast_levels() \\n+    if (((re_ast*) yyget_extra(yyscanner))->levels++ > re_max_ast_levels) \\n+    { \\n+      lex_env->last_error_code = error_invalid_hex_string; \\n+      yyabort; \\n+    }\n+\n@@ -117,6 +124,8 @@ tokens\n+        incr_ast_levels();\n+\n@@ -130,6 +139,8 @@ tokens\n+        incr_ast_levels();\n+\n@@ -192,6 +203,8 @@ token_sequence\n+        incr_ast_levels();\n+\n@@ -346,6 +359,7 @@ alternatives\n+        incr_ast_levels();"
CVE-2018-10756,['https://github.com/transmission/transmission/commit/2123adf8e5e1c2b48791f9d22fc8c747e974180e'],"('CWE-416', 'Use After Free')",MITRE,NVD-CVSS2-Other,transmission,transmission,2123adf8e5e1c2b48791f9d22fc8c747e974180e,1,Use-after-free in libtransmission/variant.c in Transmission before 3.00 allows remote attackers to cause a denial of service ( crash ) or possibly execute arbitrary code via a crafted torrent file .,"cve-2018-10756 : fix heap-use-after-free in tr_variantwalk in libtransmission/variant.c , function tr_variantwalk , when the variant stack is reallocated , a pointer to the previously allocated memory region is kept . this address is later accessed ( heap use-after-free ) while walking back down the stack , causing the application to crash . the application can be any application which uses libtransmission , such as transmission-daemon , transmission-gtk , transmission-show , etc . reported-by : tom richards < tom @ tomrichards.net >","diff - - git a / libtransmission / variant . c b / libtransmission / variant . c \ n @ @ - 758 , 7 + 758 , 7 @ @ static int comparekeyindex ( void const * va , void const * vb ) \ n - tr_variant sorted ; \ n + tr_variant * sorted ; \ n @ @ - 783 , 30 + 783 , 36 @ @ static void nodeconstruct ( struct savenode * node , tr_variant const * v , bool sort_ \ n - tr_variantinitdict ( & node - > sorted , n ) ; \ n + node - > sorted = tr_new ( tr_variant , 1 ) ; \ n + tr_variantinitdict ( node - > sorted , n ) ; \ n - node - > sorted . val . l . vals [ i ] = * tmp [ i ] . val ; \ n + node - > sorted - > val . l . vals [ i ] = * tmp [ i ] . val ; \ n - node - > sorted . val . l . count = n ; \ n + node - > sorted - > val . l . count = n ; \ n - node - > v = & node - > sorted ; \ n + v = node - > sorted ; \ n - node - > v = v ; \ n + node - > sorted = null ; \ n + \ n + node - > v = v ; \ n - if ( node - > v = = & node - > sorted ) \ n + tr_assert ( node ! = null ) ; \ n + \ n + if ( node - > sorted ! = null ) \ n - tr_free ( node - > sorted . val . l . vals ) ; \ n + tr_free ( node - > sorted - > val . l . vals ) ; \ n + tr_free ( node - > sorted ) ;"
CVE-2018-9275,['https://github.com/Yubico/yubico-pam/commit/0f6ceabab0a8849b47f67d727aa526c2656089ba'],"('CWE-200', 'Exposure of Sensitive Information to an Unauthorized Actor')",MITRE,NVD-CVSS2-Other,Yubico,yubico-pam,0f6ceabab0a8849b47f67d727aa526c2656089ba,1,"In check_user_token in util.c in the Yubico PAM module ( aka pam_yubico ) 2.18 through 2.25 , successful logins can leak file descriptors to the auth mapping file , which can lead to information disclosure ( serial number of a device ) and/or DoS ( reaching the maximum number of file descriptors ) .",util : make sure to close the authfile before returning success fixes # 136,"diff - - git a / util . c b / util . c \ n @ @ - 167 , 6 + 167 , 8 @ @ check_user_token ( const char * authfile , \ n + \ n + fclose ( opwfile ) ;"
CVE-2018-20748,"['https://cert-portal.siemens.com/productcert/pdf/ssa-390195.pdf', 'https://github.com/LibVNC/libvncserver/commit/a64c3b37af9a6c8f8009d7516874b8d266b42bae', 'https://github.com/LibVNC/libvncserver/commit/c2c4b81e6cb3b485fb1ec7ba9e7defeb889f6ba7', 'https://github.com/LibVNC/libvncserver/commit/c5ba3fee85a7ecbbca1df5ffd46d32b92757bc2a', 'https://github.com/LibVNC/libvncserver/commit/e34bcbb759ca5bef85809967a268fdf214c1ad2c']","('CWE-787', 'Out-of-bounds Write')",MITRE,NVD-CVSS2-Other,LibVNC,libvncserver,e34bcbb759ca5bef85809967a268fdf214c1ad2c,1,LibVNC before 0.9.12 contains multiple heap out-of-bounds write vulnerabilities in libvncclient/rfbproto.c . The fix for CVE-2018-20019 was incomplete .,libvncclient : ignore server-sent reason strings longer than 1mb fixes # 273,"diff - - git a / libvncclient / rfbproto . c b / libvncclient / rfbproto . c \ n @ @ - 412 , 11 + 412 , 29 @ @ rfbbool connecttorfbrepeater ( rfbclient * client , const char * repeaterhost , int rep \ n + static void \ n + readreason ( rfbclient * client ) \ n + { \ n + uint32_t reasonlen ; \ n + char * reason ; \ n + \ n + if ( ! readfromrfbserver ( client , ( char * ) & reasonlen , 4 ) ) return ; \ n + reasonlen = rfbclientswap32ifle ( reasonlen ) ; \ n + if ( reasonlen > 1 < < 20 ) { \ n + rfbclientlog ( ""vnc connection failed, but sent reason length of %u exceeds limit of 1mb"" , ( unsigned int ) reasonlen ) ; \ n + return ; \ n + } \ n + reason = malloc ( reasonlen + 1 ) ; \ n + if ( ! readfromrfbserver ( client , reason , reasonlen ) ) { free ( reason ) ; return ; } \ n + reason [ reasonlen ] = 0 ; \ n + rfbclientlog ( ""vnc connection failed: %s\n"" , reason ) ; \ n + free ( reason ) ; \ n + } \ n + \ n - uint32_t authresult = 0 , reasonlen = 0 ; \ n - char * reason = null ; \ n + uint32_t authresult = 0 ; \ n @ @ - 431 , 13 + 449 , 7 @ @ rfbhandleauthresult ( rfbclient * client ) \ n - if ( ! readfromrfbserver ( client , ( char * ) & reasonlen , 4 ) ) return false ; \ n - reasonlen = rfbclientswap32ifle ( reasonlen ) ; \ n - reason = malloc ( ( uint64_t ) reasonlen + 1 ) ; \ n - if ( ! readfromrfbserver ( client , reason , reasonlen ) ) { free ( reason ) ; return false ; } \ n - reason [ reasonlen ] = 0 ; \ n - rfbclientlog ( ""vnc connection failed: %s\n"" , reason ) ; \ n - free ( reason ) ; \ n + readreason ( client ) ; \ n @ @ - 452 , 21 + 464 , 6 @ @ rfbhandleauthresult ( rfbclient * client ) \ n - static void \ n - readreason ( rfbclient * client ) \ n - { \ n - uint32_t reasonlen ; \ n - char * reason ; \ n - \ n - /* we have an error following */ \ n - if ( ! readfromrfbserver ( client , ( char * ) & reasonlen , 4 ) ) return ; \ n - reasonlen = rfbclientswap32ifle ( reasonlen ) ; \ n - reason = malloc ( ( uint64_t ) reasonlen + 1 ) ; \ n - if ( ! readfromrfbserver ( client , reason , reasonlen ) ) { free ( reason ) ; return ; } \ n - reason [ reasonlen ] = 0 ; \ n - rfbclientlog ( ""vnc connection failed: %s\n"" , reason ) ; \ n - free ( reason ) ; \ n - }"
CVE-2018-1000193,['https://www.oracle.com/security-alerts/cpuapr2022.html'],"('CWE-74', ""Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')"")",MITRE,NVD-CVSS2-Other,jenkinsci,jenkins,de7aaab441151fb1760855fec83681c6a8756a45,1,"A improper neutralization of control sequences vulnerability exists in Jenkins 2.120 and older , LTS 2.107.2 and older in HudsonPrivateSecurityRealm.java that allows users to sign up using user names containing control characters that can then appear to have the same name as other users , and can not be deleted via the UI .",[ security-786 ],"diff - - git a / core / src / main / java / hudson / security / hudsonprivatesecurityrealm . java b / core / src / main / java / hudson / security / hudsonprivatesecurityrealm . java \ n @ @ - 64 , 6 + 64 , 7 @ @ import org . kohsuke . stapler . interceptor . requirepost ; \ n + import javax . annotation . nonnull ; \ n @ @ - 95 , 6 + 96 , 15 @ @ import org . kohsuke . accmod . restrictions . noexternaluse ; \ n + private static /* not final */ string id_regex = system . getproperty ( hudsonprivatesecurityrealm . class . getname ( ) + "".id_regex"" ) ; \ n + \ n + /**\n+     * default regex for the user id check in case the id_regex is not set\n+     * it allows a-za-z0-9 + ""_-""\n+     * in java {@code \w} is equivalent to {@code [a-za-z0-9_]} (take care of ""_"")\n+     */ \ n + private static final string default_id_regex = ""^[\\w-]+$"" ; \ n + \ n @ @ - 338 , 6 + 348 , 12 @ @ public class hudsonprivatesecurityrealm extends abstractpasswordbasedsecurityrea \ n + else if ( ! containsonlyacceptablecharacters ( si . username ) ) \ n + if ( id_regex = = null ) { \ n + si . errormessage = messages . hudsonprivatesecurityrealm_createaccount_usernameinvalidcharacters ( ) ; \ n + } else { \ n + si . errormessage = messages . hudsonprivatesecurityrealm_createaccount_usernameinvalidcharacterscustom ( id_regex ) ; \ n + } \ n @ @ - 385 , 6 + 401 , 14 @ @ public class hudsonprivatesecurityrealm extends abstractpasswordbasedsecurityrea \ n + private boolean containsonlyacceptablecharacters ( @ nonnull string value ) { \ n + if ( id_regex = = null ) { \ n + return value . matches ( default_id_regex ) ; \ n + } else { \ n + return value . matches ( id_regex ) ; \ n + } \ n + } \ n + \ ndiff - - git a / core / src / main / resources / hudson / security / messages . properties b / core / src / main / resources / hudson / security / messages . properties \ n @ @ - 37 , 6 + 37 , 8 @ @ hudsonprivatesecurityrealm . createaccount . textnotmatchwordinimage = text didn ' t mat \ n + hudsonprivatesecurityrealm . createaccount . usernameinvalidcharacters = user name must only contain alphanumeric characters , underscore and dash \ n + hudsonprivatesecurityrealm . createaccount . usernameinvalidcharacterscustom = user name must match the following expression : { 0 } \ ndiff - - git a / test / src / test / java / hudson / security / hudsonprivatesecurityrealmtest . java b / test / src / test / java / hudson / security / hudsonprivatesecurityrealmtest . java \ n @ @ - 2 , 15 + 2 , 21 @ @ package hudson . security ; \ n + import static org . hamcrest . matchers . containsstring ; \ n + import static org . hamcrest . matchers . not ; \ n + import static org . junit . assert . assertnotnull ; \ n + import java . lang . reflect . field ; \ n + import hudson . security . pages . signuppage ; \ n + import org . junit . before ; \ n @ @ - 34 , 6 + 40 , 13 @ @ public class hudsonprivatesecurityrealmtest { \ n + @ before \ n + public void setup ( ) throws exception { \ n + field field = hudsonprivatesecurityrealm . class . getdeclaredfield ( ""id_regex"" ) ; \ n + field . setaccessible ( true ) ; \ n + field . set ( null , null ) ; \ n + } \ n + \ n @ @ - 170 , 5 + 183 , 119 @ @ public class hudsonprivatesecurityrealmtest { \ n - \ n + \ n + @ issue ( ""security-786"" ) \ n + @ test \ n + public void controlcharacterarenomorevalid ( ) throws exception { \ n + hudsonprivatesecurityrealm securityrealm = new hudsonprivatesecurityrealm ( true , false , null ) ; \ n + j . jenkins . setsecurityrealm ( securityrealm ) ; \ n + \ n + string password = ""testpwd"" ; \ n + string email = ""test@test.com"" ; \ n + int i = 0 ; \ n + \ n + // regular case = only accepting a-za-z0-9 + ""-_""\n+        checkusercanbecreatedwith(securityrealm, ""test"" + i, password, ""test"" + i, email);\n+        assertnotnull(user.getbyid(""test"" + i, false));\n+        i++;\n+        checkusercanbecreatedwith(securityrealm, ""te-st_123"" + i, password, ""test"" + i, email);\n+        assertnotnull(user.getbyid(""te-st_123"" + i, false));\n+        i++;\n+        {// user id that contains invalid characters\n+            checkusercannotbecreatedwith(securityrealm, ""test "" + i, password, ""test"" + i, email);\n+            i++;\n+            checkusercannotbecreatedwith(securityrealm, ""te@st"" + i, password, ""test"" + i, email);\n+            i++;\n+            checkusercannotbecreatedwith(securityrealm, ""test.com"" + i, password, ""test"" + i, email);\n+            i++;\n+            checkusercannotbecreatedwith(securityrealm, ""test,com"" + i, password, ""test"" + i, email);\n+            i++;\n+            checkusercannotbecreatedwith(securityrealm, ""test,com"" + i, password, ""test"" + i, email);\n+            i++;\n+            checkusercannotbecreatedwith(securityrealm, ""testécom"" + i, password, ""test"" + i, email);\n+            i++;\n+            checkusercannotbecreatedwith(securityrealm, ""stargåte"" + i, password, ""test"" + i, email);\n+            i++;\n+            checkusercannotbecreatedwith(securityrealm, ""te\u0000st"" + i, password, ""test"" + i, email);\n+            i++;\n+        }\n+    }\n+\n+    @issue(""security-786"")\n+    @test\n+    public void controlcharacterarenomorevalid_customregex() throws exception {\n+        hudsonprivatesecurityrealm securityrealm = new hudsonprivatesecurityrealm(true, false, null);\n+        j.jenkins.setsecurityrealm(securityrealm);\n+\n+        string currentregex = ""^[a-z]+[0-9]*$"";\n+\n+        field field = hudsonprivatesecurityrealm.class.getdeclaredfield(""id_regex"");\n+        field.setaccessible(true);\n+        field.set(null, currentregex);\n+\n+        string password = ""testpwd"";\n+        string email = ""test@test.com"";\n+        int i = 0;\n+\n+        // regular case = only accepting a-za-z0-9 + ""-_""\n+        checkusercanbecreatedwith(securityrealm, ""test"" + i, password, ""test"" + i, email);\n+        assertnotnull(user.getbyid(""test"" + i, false));\n+        i++;\n+        checkusercanbecreatedwith(securityrealm, ""test123"" + i, password, ""test"" + i, email);\n+        assertnotnull(user.getbyid(""test123"" + i, false));\n+        i++;\n+        {// user id that do not follow custom regex\n+            checkusercannotbecreatedwith_custom(securityrealm, ""test "" + i, password, ""test"" + i, email, currentregex);\n+            i++;\n+            checkusercannotbecreatedwith_custom(securityrealm, ""@"" + i, password, ""test"" + i, email, currentregex);\n+            i++;\n+            checkusercannotbecreatedwith_custom(securityrealm, ""t2a"" + i, password, ""test"" + i, email, currentregex);\n+            i++;\n+        }\n+        { // we can even change regex on the fly\n+            currentregex = ""^[0-9]*$"";\n+            field.set(null, currentregex);\n+\n+            checkusercanbecreatedwith(securityrealm, ""125213"" + i, password, ""test"" + i, email);\n+            assertnotnull(user.getbyid(""125213"" + i, false));\n+            i++;\n+            checkusercannotbecreatedwith_custom(securityrealm, ""test12"" + i, password, ""test"" + i, email, currentregex);\n+            i++;\n+        }\n+    }\n+\n+    private void checkusercanbecreatedwith(hudsonprivatesecurityrealm securityrealm, string id, string password, string fullname, string email) throws exception {\n+        jenkinsrule.webclient wc = j.createwebclient();\n+        signuppage signup = new signuppage(wc.goto(""signup""));\n+        signup.enterusername(id);\n+        signup.enterpassword(password);\n+        signup.enterfullname(fullname);\n+        signup.enteremail(email);\n+        htmlpage success = signup.submit(j);\n+        assertthat(success.getelementbyid(""main-panel"").gettextcontent(), containsstring(""success""));\n+    }\n+\n+    private void checkusercannotbecreatedwith(hudsonprivatesecurityrealm securityrealm, string id, string password, string fullname, string email) throws exception {\n+        jenkinsrule.webclient wc = j.createwebclient();\n+        signuppage signup = new signuppage(wc.goto(""signup""));\n+        signup.enterusername(id);\n+        signup.enterpassword(password);\n+        signup.enterfullname(fullname);\n+        signup.enteremail(email);\n+        htmlpage success = signup.submit(j);\n+        assertthat(success.getelementbyid(""main-panel"").gettextcontent(), not(containsstring(""success"")));\n+        assertthat(success.getelementbyid(""main-panel"").gettextcontent(), containsstring(messages.hudsonprivatesecurityrealm_createaccount_usernameinvalidcharacters()));\n+    }\n+\n+    private void checkusercannotbecreatedwith_custom(hudsonprivatesecurityrealm securityrealm, string id, string password, string fullname, string email, string regex) throws exception {\n+        jenkinsrule.webclient wc = j.createwebclient();\n+        signuppage signup = new signuppage(wc.goto(""signup""));\n+        signup.enterusername(id);\n+        signup.enterpassword(password);\n+        signup.enterfullname(fullname);\n+        signup.enteremail(email);\n+        htmlpage success = signup.submit(j);\n+        assertthat(success.getelementbyid(""main-panel"").gettextcontent(), not(containsstring(""success"")));\n+        assertthat(success.getelementbyid(""main-panel"").gettextcontent(), containsstring(regex));\n+    }"
CVE-2019-1010247,['https://github.com/zmartzone/mod_auth_openidc/commit/132a4111bf3791e76437619a66336dce2ce4c79b'],"('CWE-79', ""Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"")",DWF,NVD-CVSS2-Other,zmartzone,mod_auth_openidc,132a4111bf3791e76437619a66336dce2ce4c79b,1,"ZmartZone IAM mod_auth_openidc 2.3.10.1 and earlier is affected by : Cross Site Scripting ( XSS ) . The impact is : Redirecting the user to a phishing page or interacting with the application on behalf of the user . The component is : File : src/mod_auth_openidc.c , Line : 3109 . The fixed version is : 2.3.10.2 .",release 2.3.10.2 : fix xss vulnerability for poll parameter in oidc session management rp iframe ; csnc-2019-001 ; thanks mischa bachmann signed-off-by : hans zandbelt < hans.zandbelt @ zmartzone.eu >,"diff - - git a / changelog b / changelog \ n @ @ - 1 , 3 + 1 , 7 @ @ \ n + 01 / 22 / 2019 \ n + - fix xss vulnerability csnc - 2019 - 001 wrt . poll parameter in oidc session management rp iframe ; thanks mischa bachmann \ n + - release 2 . 3 . 10 . 2 \ n + \ n - fix bug in current url detection where query parameters would be duplicated ; see #420; thanks @jreynaert\n- release 2.3.10.1\ndiff --git a/configure.ac b/configure.ac\n@@ -1,4 +1,4 @@\n-ac_init([mod_auth_openidc],[2.3.10.1],[hans.zandbelt@zmartzone.eu])\n+ac_init([mod_auth_openidc],[2.3.10.2],[hans.zandbelt@zmartzone.eu])\ndiff --git a/src/mod_auth_openidc.c b/src/mod_auth_openidc.c\n@@ -3106,7 +3106,7 @@ static int oidc_handle_session_management_iframe_rp(request_rec *r, oidc_cfg *c,\n-			""        timerid = setinterval('checksession()', %s);\n""\n+			""        timerid = setinterval('checksession()', %d);\n""\n@@ -3149,12 +3149,13 @@ static int oidc_handle_session_management_iframe_rp(request_rec *r, oidc_cfg *c,\n-	if (s_poll_interval == null)\n-		s_poll_interval = ""3000"";\n+	int poll_interval = s_poll_interval ? strtol(s_poll_interval, null, 10) : 0;\n+	if ((poll_interval <= 0) || (poll_interval > 3600 * 24))\n+		poll_interval = 3000;\n-			session_state, op_iframe_id, s_poll_interval, redirect_uri,\n+			session_state, op_iframe_id, poll_interval, redirect_uri,"
CVE-2018-16419,"['https://github.com/OpenSC/OpenSC/commit/360e95d45ac4123255a4c796db96337f332160ad#diff-a6074523a9cbd875e26c58e20868fb15', 'https://github.com/OpenSC/OpenSC/releases/tag/0.19.0-rc1']","('CWE-119', 'Improper Restriction of Operations within the Bounds of a Memory Buffer')",MITRE,NVD-CVSS2-Other,OpenSC,OpenSC,360e95d45ac4123255a4c796db96337f332160ad,1,Several buffer overflows when handling responses from a Cryptoflex card in read_public_key in tools/cryptoflex-tool.c in OpenSC before 0.19.0-rc1 could be used by attackers able to supply crafted smartcards to cause a denial of service ( application crash ) or possibly have unspecified other impact .,fixed out of bounds writes thanks to eric sesterhenn from x41 d-sec gmbh for reporting the problems .,"diff - - git a / src / libopensc / card - cac . c b / src / libopensc / card - cac . c \ n @ @ - 794 , 7 + 794 , 7 @ @ static int cac_get_serial_nr_from_cuid ( sc_card_t * card , sc_serial_number_t * seri \ n - memcpy ( serial - > value , priv - > cac_id , priv - > cac_id_len ) ; \ n + memcpy ( serial - > value , priv - > cac_id , serial - > len ) ; \ ndiff - - git a / src / libopensc / card - epass2003 . c b / src / libopensc / card - epass2003 . c \ n @ @ - 951 , 7 + 951 , 7 @ @ decrypt_response ( struct sc_card * card , unsigned char * in , size_t inlen , unsigned \ n - if ( 2 = = cipher_len ) \ n + if ( 2 = = cipher_len | | * out_len < cipher_len - 2 ) \ n @ @ - 977 , 6 + 977 , 7 @ @ epass2003_sm_unwrap_apdu ( struct sc_card * card , struct sc_apdu * sm , struct sc_apd \ n + len = plain - > resplen ; \ ndiff - - git a / src / libopensc / card - muscle . c b / src / libopensc / card - muscle . c \ n @ @ - 518 , 7 + 518 , 9 @ @ static int muscle_list_files ( sc_card_t * card , u8 * buf , size_t buflen ) \ n - u8 * oid = fs - > cache . array [ x ] . objectid . id ; \ n + u8 * oid = fs - > cache . array [ x ] . objectid . id ; \ n + if ( buflen < 2 ) \ n + break ; \ n @ @ - 527 , 7 + 529 , 8 @ @ static int muscle_list_files ( sc_card_t * card , u8 * buf , size_t buflen ) \ n - count + = 2 ; \ n + count + = 2 ; \ n + buflen - = 2 ; \ ndiff - - git a / src / libopensc / card - tcos . c b / src / libopensc / card - tcos . c \ n @ @ - 408 , 7 + 408 , 7 @ @ static int tcos_select_file ( sc_card_t * card , \ n - int j , len = apdu . resp [ i + 1 ] ; \ n + size_t j , len = apdu . resp [ i + 1 ] ; \ n @ @ - 432 , 8 + 432 , 8 @ @ static int tcos_select_file ( sc_card_t * card , \ n - memcpy ( file - > name , d , len ) ; \ n - file - > namelen = len ; \ n + file - > namelen = min ( sizeof file - > name , len ) ; \ n + memcpy ( file - > name , d , file - > namelen ) ; \ ndiff - - git a / src / libopensc / pkcs15 - esteid . c b / src / libopensc / pkcs15 - esteid . c \ n @ @ - 79 , 7 + 79 , 7 @ @ sc_pkcs15emu_esteid_init ( sc_pkcs15_card_t * p15card ) \ n - buff [ r ] = '\0' ; \ n + buff [ min ( ( size_t ) r , ( sizeof buff ) - 1 ) ] = '\0' ; \ ndiff - - git a / src / libopensc / pkcs15 - gemsafev1 . c b / src / libopensc / pkcs15 - gemsafev1 . c \ n @ @ - 208 , 7 + 208 , 7 @ @ static int gemsafe_get_cert_len ( sc_card_t * card ) \ n - while ( ibuf [ ind ] = = 0x01 ) { \ n + while ( ibuf [ ind ] = = 0x01 & & i < gemsafe_cert_max ) { \ ndiff - - git a / src / libopensc / pkcs15 - sc - hsm . c b / src / libopensc / pkcs15 - sc - hsm . c \ n @ @ - 837 , 12 + 837 , 14 @ @ static int sc_pkcs15emu_sc_hsm_init ( sc_pkcs15_card_t * p15card ) \ n - /* save ef_c_devaut for further use */ \ n - ptr = realloc ( priv - > ef_c_devaut , len ) ; \ n - if ( ptr ) { \ n - memcpy ( ptr , efbin , len ) ; \ n - priv - > ef_c_devaut = ptr ; \ n - priv - > ef_c_devaut_len = len ; \ n + if ( len > 0 ) { \ n + /* save ef_c_devaut for further use */ \ n + ptr = realloc ( priv - > ef_c_devaut , len ) ; \ n + if ( ptr ) { \ n + memcpy ( ptr , efbin , len ) ; \ n + priv - > ef_c_devaut = ptr ; \ n + priv - > ef_c_devaut_len = len ; \ n + } \ ndiff - - git a / src / libopensc / sc . c b / src / libopensc / sc . c \ n @ @ - 628 , 7 + 628 , 7 @ @ int sc_file_set_sec_attr ( sc_file_t * file , const u8 * sec_attr , \ n - if ( sec_attr = = null ) { \ n + if ( sec_attr = = null | | sec_attr_len ) { \ ndiff - - git a / src / tools / cryptoflex - tool . c b / src / tools / cryptoflex - tool . c \ n @ @ - 21 , 6 + 21 , 7 @ @ \ n + #include ""libopensc/internal.h""\n@@ -331,7 +332,7 @@ static int read_public_key(rsa *rsa)\n-	bufsize = file->size;\n+	bufsize = min(file->size, sizeof buf);\n@@ -382,7 +383,7 @@ static int read_private_key(rsa *rsa)\n-	bufsize = file->size;\n+	bufsize = min(file->size, sizeof buf);\ndiff --git a/src/tools/egk-tool.c b/src/tools/egk-tool.c\n@@ -149,7 +149,7 @@ int read_file(struct sc_card *card, char *str_path, unsigned char **data, size_t\n-	len = file ? file->size : 4096;\n+	len = file && file->size > 0 ? file->size : 4096;\ndiff --git a/src/tools/util.c b/src/tools/util.c\n@@ -339,10 +339,11 @@ const char * util_acl_to_str(const sc_acl_entry_t *e)\n-		strcat(line, buf);\n-		strcat(line, "" "");\n+		strncat(line, buf, sizeof line);\n+		strncat(line, "" "", sizeof line);\n+	line[(sizeof line)-1] = '\0'; /* make sure it's nul terminated */"
CVE-2018-16421,"['https://github.com/OpenSC/OpenSC/commit/360e95d45ac4123255a4c796db96337f332160ad#diff-848b13147a344ba2c6361d91ca77feb1', 'https://github.com/OpenSC/OpenSC/releases/tag/0.19.0-rc1']","('CWE-119', 'Improper Restriction of Operations within the Bounds of a Memory Buffer')",MITRE,NVD-CVSS2-Other,OpenSC,OpenSC,360e95d45ac4123255a4c796db96337f332160ad,1,Several buffer overflows when handling responses from a CAC Card in cac_get_serial_nr_from_CUID in libopensc/card-cac.c in OpenSC before 0.19.0-rc1 could be used by attackers able to supply crafted smartcards to cause a denial of service ( application crash ) or possibly have unspecified other impact .,fixed out of bounds writes thanks to eric sesterhenn from x41 d-sec gmbh for reporting the problems .,"diff - - git a / src / libopensc / card - cac . c b / src / libopensc / card - cac . c \ n @ @ - 794 , 7 + 794 , 7 @ @ static int cac_get_serial_nr_from_cuid ( sc_card_t * card , sc_serial_number_t * seri \ n - memcpy ( serial - > value , priv - > cac_id , priv - > cac_id_len ) ; \ n + memcpy ( serial - > value , priv - > cac_id , serial - > len ) ; \ ndiff - - git a / src / libopensc / card - epass2003 . c b / src / libopensc / card - epass2003 . c \ n @ @ - 951 , 7 + 951 , 7 @ @ decrypt_response ( struct sc_card * card , unsigned char * in , size_t inlen , unsigned \ n - if ( 2 = = cipher_len ) \ n + if ( 2 = = cipher_len | | * out_len < cipher_len - 2 ) \ n @ @ - 977 , 6 + 977 , 7 @ @ epass2003_sm_unwrap_apdu ( struct sc_card * card , struct sc_apdu * sm , struct sc_apd \ n + len = plain - > resplen ; \ ndiff - - git a / src / libopensc / card - muscle . c b / src / libopensc / card - muscle . c \ n @ @ - 518 , 7 + 518 , 9 @ @ static int muscle_list_files ( sc_card_t * card , u8 * buf , size_t buflen ) \ n - u8 * oid = fs - > cache . array [ x ] . objectid . id ; \ n + u8 * oid = fs - > cache . array [ x ] . objectid . id ; \ n + if ( buflen < 2 ) \ n + break ; \ n @ @ - 527 , 7 + 529 , 8 @ @ static int muscle_list_files ( sc_card_t * card , u8 * buf , size_t buflen ) \ n - count + = 2 ; \ n + count + = 2 ; \ n + buflen - = 2 ; \ ndiff - - git a / src / libopensc / card - tcos . c b / src / libopensc / card - tcos . c \ n @ @ - 408 , 7 + 408 , 7 @ @ static int tcos_select_file ( sc_card_t * card , \ n - int j , len = apdu . resp [ i + 1 ] ; \ n + size_t j , len = apdu . resp [ i + 1 ] ; \ n @ @ - 432 , 8 + 432 , 8 @ @ static int tcos_select_file ( sc_card_t * card , \ n - memcpy ( file - > name , d , len ) ; \ n - file - > namelen = len ; \ n + file - > namelen = min ( sizeof file - > name , len ) ; \ n + memcpy ( file - > name , d , file - > namelen ) ; \ ndiff - - git a / src / libopensc / pkcs15 - esteid . c b / src / libopensc / pkcs15 - esteid . c \ n @ @ - 79 , 7 + 79 , 7 @ @ sc_pkcs15emu_esteid_init ( sc_pkcs15_card_t * p15card ) \ n - buff [ r ] = '\0' ; \ n + buff [ min ( ( size_t ) r , ( sizeof buff ) - 1 ) ] = '\0' ; \ ndiff - - git a / src / libopensc / pkcs15 - gemsafev1 . c b / src / libopensc / pkcs15 - gemsafev1 . c \ n @ @ - 208 , 7 + 208 , 7 @ @ static int gemsafe_get_cert_len ( sc_card_t * card ) \ n - while ( ibuf [ ind ] = = 0x01 ) { \ n + while ( ibuf [ ind ] = = 0x01 & & i < gemsafe_cert_max ) { \ ndiff - - git a / src / libopensc / pkcs15 - sc - hsm . c b / src / libopensc / pkcs15 - sc - hsm . c \ n @ @ - 837 , 12 + 837 , 14 @ @ static int sc_pkcs15emu_sc_hsm_init ( sc_pkcs15_card_t * p15card ) \ n - /* save ef_c_devaut for further use */ \ n - ptr = realloc ( priv - > ef_c_devaut , len ) ; \ n - if ( ptr ) { \ n - memcpy ( ptr , efbin , len ) ; \ n - priv - > ef_c_devaut = ptr ; \ n - priv - > ef_c_devaut_len = len ; \ n + if ( len > 0 ) { \ n + /* save ef_c_devaut for further use */ \ n + ptr = realloc ( priv - > ef_c_devaut , len ) ; \ n + if ( ptr ) { \ n + memcpy ( ptr , efbin , len ) ; \ n + priv - > ef_c_devaut = ptr ; \ n + priv - > ef_c_devaut_len = len ; \ n + } \ ndiff - - git a / src / libopensc / sc . c b / src / libopensc / sc . c \ n @ @ - 628 , 7 + 628 , 7 @ @ int sc_file_set_sec_attr ( sc_file_t * file , const u8 * sec_attr , \ n - if ( sec_attr = = null ) { \ n + if ( sec_attr = = null | | sec_attr_len ) { \ ndiff - - git a / src / tools / cryptoflex - tool . c b / src / tools / cryptoflex - tool . c \ n @ @ - 21 , 6 + 21 , 7 @ @ \ n + #include ""libopensc/internal.h""\n@@ -331,7 +332,7 @@ static int read_public_key(rsa *rsa)\n-	bufsize = file->size;\n+	bufsize = min(file->size, sizeof buf);\n@@ -382,7 +383,7 @@ static int read_private_key(rsa *rsa)\n-	bufsize = file->size;\n+	bufsize = min(file->size, sizeof buf);\ndiff --git a/src/tools/egk-tool.c b/src/tools/egk-tool.c\n@@ -149,7 +149,7 @@ int read_file(struct sc_card *card, char *str_path, unsigned char **data, size_t\n-	len = file ? file->size : 4096;\n+	len = file && file->size > 0 ? file->size : 4096;\ndiff --git a/src/tools/util.c b/src/tools/util.c\n@@ -339,10 +339,11 @@ const char * util_acl_to_str(const sc_acl_entry_t *e)\n-		strcat(line, buf);\n-		strcat(line, "" "");\n+		strncat(line, buf, sizeof line);\n+		strncat(line, "" "", sizeof line);\n+	line[(sizeof line)-1] = '\0'; /* make sure it's nul terminated */"
CVE-2018-11382,['https://github.com/radare/radare2/commit/d04c78773f6959bcb427453f8e5b9824d5ba9eff'],"('CWE-125', 'Out-of-bounds Read')",MITRE,NVD-CVSS2-Other,radare,radare2,d04c78773f6959bcb427453f8e5b9824d5ba9eff,1,The _inst__sts ( ) function in radare2 2.5.0 allows remote attackers to cause a denial of service ( heap-based out-of-bounds read and application crash ) via a crafted binary file .,fix # 10091 - crash in avr analysis,"diff - - git a / libr / anal / p / anal_avr . c b / libr / anal / p / anal_avr . c \ n @ @ - 925 , 6 + 925 , 9 @ @ inst_handler ( lds ) { // lds rd, k\n+	if (len < 4) {\n+		return;\n+	}"
CVE-2016-7536,"['http://www.openwall.com/lists/oss-security/2016/09/22/2', 'https://github.com/ImageMagick/ImageMagick/commit/02dadf116124cfba35d7ebd9ced3e5ad0be0f176', 'https://github.com/ImageMagick/ImageMagick/commit/478cce544fdf1de882d78381768458f397964453', 'https://github.com/ImageMagick/ImageMagick/issues/130']","('CWE-20', 'Improper Input Validation')",Debian GNU/Linux,NVD-CVSS2-Other,ImageMagick,ImageMagick,478cce544fdf1de882d78381768458f397964453,1,magick/profile.c in ImageMagick allows remote attackers to cause a denial of service ( segmentation fault ) via a crafted profile .,fixed segv reported in https : //github.com/imagemagick/imagemagick/issues/130,"diff - - git a / magick / profile . c b / magick / profile . c \ n @ @ - 1444 , 7 + 1444 , 8 @ @ static void writeto8bimprofile ( image * image , const char * name , \ n - if ( ( p > ( datum + length - count ) ) | | ( count > ( ssize_t ) length ) ) \ n + if ( ( count < 0 ) | | ( p > ( datum + length - count ) ) | | \ n + ( count > ( ssize_t ) length ) )"
CVE-2016-7536,"['http://www.openwall.com/lists/oss-security/2016/09/22/2', 'https://github.com/ImageMagick/ImageMagick/commit/02dadf116124cfba35d7ebd9ced3e5ad0be0f176', 'https://github.com/ImageMagick/ImageMagick/commit/478cce544fdf1de882d78381768458f397964453', 'https://github.com/ImageMagick/ImageMagick/issues/130']","('CWE-20', 'Improper Input Validation')",Debian GNU/Linux,NVD-CVSS2-Other,ImageMagick,ImageMagick,478cce544fdf1de882d78381768458f397964453,1,magick/profile.c in ImageMagick allows remote attackers to cause a denial of service ( segmentation fault ) via a crafted profile .,fixed segv reported in https : //github.com/imagemagick/imagemagick/issues/130,"diff - - git a / magick / profile . c b / magick / profile . c \ n @ @ - 1444 , 7 + 1444 , 8 @ @ static void writeto8bimprofile ( image * image , const char * name , \ n - if ( ( p > ( datum + length - count ) ) | | ( count > ( ssize_t ) length ) ) \ n + if ( ( count < 0 ) | | ( p > ( datum + length - count ) ) | | \ n + ( count > ( ssize_t ) length ) )"
CVE-2016-7536,"['http://www.openwall.com/lists/oss-security/2016/09/22/2', 'https://github.com/ImageMagick/ImageMagick/commit/02dadf116124cfba35d7ebd9ced3e5ad0be0f176', 'https://github.com/ImageMagick/ImageMagick/commit/478cce544fdf1de882d78381768458f397964453', 'https://github.com/ImageMagick/ImageMagick/issues/130']","('CWE-20', 'Improper Input Validation')",Debian GNU/Linux,NVD-CVSS2-Other,ImageMagick,ImageMagick,02dadf116124cfba35d7ebd9ced3e5ad0be0f176,1,magick/profile.c in ImageMagick allows remote attackers to cause a denial of service ( segmentation fault ) via a crafted profile .,fixed segv reported in https : //github.com/imagemagick/imagemagick/issues/130,"diff - - git a / magickcore / profile . c b / magickcore / profile . c \ n @ @ - 1442 , 7 + 1442 , 8 @ @ static void writeto8bimprofile ( image * image , const char * name , \ n - if ( ( p > ( datum + length - count ) ) | | ( count > ( ssize_t ) length ) ) \ n + if ( ( count < 0 ) | | ( p > ( datum + length - count ) ) | | \ n + ( count > ( ssize_t ) length ) )"
CVE-2016-7536,"['http://www.openwall.com/lists/oss-security/2016/09/22/2', 'https://github.com/ImageMagick/ImageMagick/commit/02dadf116124cfba35d7ebd9ced3e5ad0be0f176', 'https://github.com/ImageMagick/ImageMagick/commit/478cce544fdf1de882d78381768458f397964453', 'https://github.com/ImageMagick/ImageMagick/issues/130']","('CWE-20', 'Improper Input Validation')",Debian GNU/Linux,NVD-CVSS2-Other,ImageMagick,ImageMagick,02dadf116124cfba35d7ebd9ced3e5ad0be0f176,1,magick/profile.c in ImageMagick allows remote attackers to cause a denial of service ( segmentation fault ) via a crafted profile .,fixed segv reported in https : //github.com/imagemagick/imagemagick/issues/130,"diff - - git a / magickcore / profile . c b / magickcore / profile . c \ n @ @ - 1442 , 7 + 1442 , 8 @ @ static void writeto8bimprofile ( image * image , const char * name , \ n - if ( ( p > ( datum + length - count ) ) | | ( count > ( ssize_t ) length ) ) \ n + if ( ( count < 0 ) | | ( p > ( datum + length - count ) ) | | \ n + ( count > ( ssize_t ) length ) )"
CVE-2019-11937,['https://github.com/facebook/mcrouter/commit/97e033b3bb0cb16b61bf49f0dc7f311a3e0edd1b'],"('CWE-674', 'Uncontrolled Recursion')","Facebook, Inc.",NVD-CVSS2-Other,facebook,mcrouter,97e033b3bb0cb16b61bf49f0dc7f311a3e0edd1b,1,"In Mcrouter prior to v0.41.0 , a large struct input provided to the Carbon protocol reader could result in stack exhaustion and denial of service .",attempt to make carbonprotocolreader : :skip tail recursive reviewed by : edenzik differential revision : d17967570 fbshipit-source-id : fdc32e190a521349c7c8f4d6081902fa18eb0284,"diff - - git a / mcrouter / lib / carbon / carbonprotocolreader . cpp b / mcrouter / lib / carbon / carbonprotocolreader . cpp \ n @ @ - 78 , 13 + 78 , 11 @ @ void carbonprotocolreader : : skip ( const fieldtype ft ) { \ n - while ( true ) { \ n - const auto fieldtype = readfieldheader ( ) . first ; \ n - if ( fieldtype = = fieldtype : : stop ) { \ n - break ; \ n - } \ n - skip ( fieldtype ) ; \ n - } \ n + const auto next = readfieldheader ( ) . first ; \ n + skip ( next ) ; \ n + break ; \ n + } \ n + case fieldtype : : stop : { \ n @ @ - 96 , 8 + 94 , 10 @ @ void carbonprotocolreader : : skip ( const fieldtype ft ) { \ n - default : { break ; } \ n + default : { \ n + break ; \ n + } \ n - } // carbon\n+} // namespace carbon\ndiff --git a/mcrouter/lib/carbon/carbonprotocolreader.h b/mcrouter/lib/carbon/carbonprotocolreader.h\n@@ -245,8 +245,10 @@ class carbonprotocolreader {\n-    lastfieldid_ = nestedstructfieldids_.back();\n-    nestedstructfieldids_.pop_back();\n+    if (!nestedstructfieldids_.empty()) {\n+      lastfieldid_ = nestedstructfieldids_.back();\n+      nestedstructfieldids_.pop_back();\n+    }"
CVE-2018-5334,['https://code.wireshark.org/review/gitweb?p=wireshark.git;a=commit;h=dc308c05ba0673460fe80873b22d296880ee996d'],"('CWE-119', 'Improper Restriction of Operations within the Bounds of a Memory Buffer')",MITRE,NVD-CVSS2-Other,wireshark,wireshark,5dbc1d8d1c14aea4fda820567d6ac0e226027ed3,1,"In Wireshark 2.4.0 to 2.4.3 and 2.2.0 to 2.2.11 , the IxVeriWave file parser could crash . This was addressed in wiretap/vwr.c by correcting the signature timestamp bounds checks .",ixveriwave : adjust signature timestamp checking . move the signature timestamp bounds checks inside get_signature_ts . fix what appears to be an off-by-one error . bug : 14297 change-id : i9ca1762a8418e47153f270a1a62b2d0d3a800130 reviewed-on : https : //code.wireshark.org/review/25229 petri-dish : anders broman < a.broman58 @ gmail.com > tested-by : petri dish buildbot reviewed-by : anders broman < a.broman58 @ gmail.com >,"diff - - git a / wiretap / vwr . c b / wiretap / vwr . c \ n @ @ - 808 , 7 + 808 , 7 @ @ static gboolean vwr_read_rec_data_ethernet ( vwr_t * , struct wtap_pkthdr * , \ n - static guint64 get_signature_ts ( const guint8 * , int ) ; \ n + static guint64 get_signature_ts ( const guint8 * , int , int ) ; \ n @ @ - 1268 , 8 + 1268 , 8 @ @ static gboolean vwr_read_s1_w_rec ( vwr_t * vwr , struct wtap_pkthdr * phdr , \ n - if ( ( m_ptr [ sig_off ] = = 0xdd ) & & ( sig_off + 15 < = ( rec_size - v22_w_stats_len ) ) ) \ n - sig_ts = get_signature_ts ( m_ptr , sig_off ) ; \ n + if ( m_ptr [ sig_off ] = = 0xdd ) \ n + sig_ts = get_signature_ts ( m_ptr , sig_off , rec_size - v22_w_stats_len ) ; \ n @ @ - 1669 , 8 + 1669 , 8 @ @ static gboolean vwr_read_s2_w_rec ( vwr_t * vwr , struct wtap_pkthdr * phdr , \ n - if ( ( m_ptr [ sig_off ] = = 0xdd ) & & ( sig_off + 15 < = ( rec_size - vvw510021_w_stats_trailer_len ) ) ) \ n - sig_ts = get_signature_ts ( m_ptr , sig_off ) ; \ n + if ( m_ptr [ sig_off ] = = 0xdd ) \ n + sig_ts = get_signature_ts ( m_ptr , sig_off , rec_size - vvw510021_w_stats_trailer_len ) ; \ n @ @ - 2168 , 8 + 2168 , 8 @ @ static gboolean vwr_read_s3_w_rec ( vwr_t * vwr , struct wtap_pkthdr * phdr , \ n - if ( ( m_ptr [ sig_off ] = = 0xdd ) & & ( sig_off + 15 < = ( rec_size - vvw510021_w_stats_trailer_len ) ) ) \ n - sig_ts = get_signature_ts ( m_ptr , sig_off ) ; \ n + if ( m_ptr [ sig_off ] = = 0xdd ) \ n + sig_ts = get_signature_ts ( m_ptr , sig_off , rec_size - vvw510021_w_stats_trailer_len ) ; \ n @ @ - 2692 , 8 + 2692 , 8 @ @ static gboolean vwr_read_rec_data_ethernet ( vwr_t * vwr , struct wtap_pkthdr * phdr , \ n - if ( ( m_ptr [ sig_off ] = = 0xdd ) & & ( sig_off + 15 < = msdu_length ) & & ( f_flow ! = 0 ) ) \ n - sig_ts = get_signature_ts ( m_ptr , sig_off ) ; \ n + if ( ( m_ptr [ sig_off ] = = 0xdd ) & & ( f_flow ! = 0 ) ) \ n + sig_ts = get_signature_ts ( m_ptr , sig_off , msdu_length ) ; \ n @ @ - 3233 , 11 + 3233 , 14 @ @ int find_signature ( const guint8 * m_ptr , int rec_size , int pay_off , guint32 flow_ \ n - guint64 get_signature_ts ( const guint8 * m_ptr , int sig_off ) \ n + guint64 get_signature_ts ( const guint8 * m_ptr , int sig_off , int sig_max ) \ n + if ( sig_off + 15 > = sig_max ) \ n + return 0 ; \ n +"
CVE-2019-18671,['https://github.com/keepkey/keepkey-firmware/commit/b222c66cdd7c3203d917c80ba615082d309d80c3'],"('CWE-787', 'Out-of-bounds Write')",MITRE,NVD-CVSS2-Other,keepkey,keepkey-firmware,b222c66cdd7c3203d917c80ba615082d309d80c3,1,Insufficient checks in the USB packet handling of the ShapeShift KeepKey hardware wallet before firmware 6.2.2 allow out-of-bounds writes in the .bss segment via crafted messages . The vulnerability could allow code execution or other forms of impact . It can be triggered by unauthenticated attackers and the interface is reachable via WebUSB .,board : factor out tiny_dispatch and add stronger checks on what tiny_msg 's are allowed to be decoded .,"diff - - git a / lib / board / messages . c b / lib / board / messages . c \ n @ @ - 37 , 11 + 37 , 6 @ @ static msg_failure_t msg_failure ; \ n - /* tiny messages */ \ n - static bool msg_tiny_flag = false ; \ n - static confidential uint8_t msg_tiny [ msg_tiny_bfr_sz ] ; \ n - static uint16_t msg_tiny_id = msg_tiny_type_error ; /* default to error type */ \ n - \ n @ @ - 147 , 28 + 142 , 6 @ @ static void dispatch ( const messagesmap_t * entry , uint8_t * msg , uint32_t msg_size \ n - /*\n- * tiny_dispatch() - process received tiny messages\n- *\n- * input\n- *     - entry: pointer to message entry\n- *     - msg: pointer to received message buffer\n- *     - msg_size: size of message\n- * output\n- *     none\n- *\n- */ \ n - static void tiny_dispatch ( const messagesmap_t * entry , uint8_t * msg , uint32_t msg_size ) \ n - { \ n - if ( ! pb_parse ( entry , msg , msg_size , msg_tiny ) ) { \ n - call_msg_failure_handler ( failuretype_failure_unexpectedmessage , \ n - ""could not parse tiny protocol buffer message"" ) ; \ n - return ; \ n - } \ n - \ n - msg_tiny_id = entry - > msg_id ; \ n - } \ n - \ n @ @ - 337 , 31 + 310 , 93 @ @ reset : \ n - void handle_usb_rx ( const void * msg , size_t len ) \ n - { \ n - if ( msg_tiny_flag ) { \ n - uint8_t buf [ 64 ] ; \ n - memcpy ( buf , msg , sizeof ( buf ) ) ; \ n - \ n - uint16_t msgid = buf [ 4 ] | ( ( uint16_t ) buf [ 3 ] ) < < 8 ; \ n - uint32_t msgsize = buf [ 8 ] | \ n - ( ( uint32_t ) buf [ 7 ] ) < < 8 | \ n - ( ( uint32_t ) buf [ 6 ] ) < < 16 | \ n - ( ( uint32_t ) buf [ 5 ] ) < < 24 ; \ n - \ n - if ( msgsize > 64 - 9 ) { \ n - ( * msg_failure ) ( failuretype_failure_unexpectedmessage , ""malformed tiny packet"" ) ; \ n - return ; \ n - } \ n + /* tiny messages */ \ n + static bool msg_tiny_flag = false ; \ n + static confidential uint8_t msg_tiny [ msg_tiny_bfr_sz ] ; \ n + static uint16_t msg_tiny_id = msg_tiny_type_error ; /* default to error type */ \ n - // determine callback handler and message map type.\n-        const messagesmap_t *entry = message_map_entry(normal_msg, msgid, in_msg);\n-        if (!entry) {\n-            (*msg_failure)(failuretype_failure_unexpectedmessage, ""unknown message"");\n-            return;\n+_static_assert(sizeof(msg_tiny) >= sizeof(cancel), ""msg_tiny too tiny"");\n+_static_assert(sizeof(msg_tiny) >= sizeof(initialize), ""msg_tiny too tiny"");\n+_static_assert(sizeof(msg_tiny) >= sizeof(passphraseack), ""msg_tiny too tiny"");\n+_static_assert(sizeof(msg_tiny) >= sizeof(buttonack), ""msg_tiny too tiny"");\n+_static_assert(sizeof(msg_tiny) >= sizeof(pinmatrixack), ""msg_tiny too tiny"");\n+#if debug_link\n+_static_assert(sizeof(msg_tiny) >= sizeof(debuglinkdecision),\n+               ""msg_tiny too tiny"");\n+_static_assert(sizeof(msg_tiny) >= sizeof(debuglinkgetstate),\n+               ""msg_tiny too tiny"");\n+#endif\n+\n+static void msg_read_tiny(const uint8_t *msg, size_t len) {\n+    if (len != 64)\n+        return;\n+\n+    uint8_t buf[64];\n+    memcpy(buf, msg, sizeof(buf));\n+\n+    if (buf[0] != '?' || buf[1] != '#' || buf[2] != '#') {\n+        (*msg_failure)(failuretype_failure_unexpectedmessage, ""malformed tiny packet"");\n+        return;\n+    }\n+\n+    uint16_t msgid = buf[4] | ((uint16_t)buf[3]) << 8;\n+    uint32_t msgsize = buf[8]        |\n+            ((uint32_t)buf[7]) <<  8 |\n+            ((uint32_t)buf[6]) << 16 |\n+            ((uint32_t)buf[5]) << 24;\n+\n+    if (msgsize > 64 - 9) {\n+        (*msg_failure)(failuretype_failure_unexpectedmessage, ""malformed tiny packet"");\n+        return;\n+    }\n+\n+    const pb_field_t *fields = null;\n+    pb_istream_t stream = pb_istream_from_buffer(buf + 9, msgsize);\n+\n+    switch (msgid) {\n+    case messagetype_messagetype_pinmatrixack:\n+        fields = pinmatrixack_fields;\n+        break;\n+    case messagetype_messagetype_buttonack:\n+        fields = buttonack_fields;\n+        break;\n+    case messagetype_messagetype_passphraseack:\n+        fields = passphraseack_fields;\n+        break;\n+    case messagetype_messagetype_cancel:\n+        fields = cancel_fields;\n+        break;\n+    case messagetype_messagetype_initialize:\n+        fields = initialize_fields;\n+        break;\n+#if debug_link\n+    case messagetype_messagetype_debuglinkdecision:\n+        fields = debuglinkdecision_fields;\n+        break;\n+    case messagetype_messagetype_debuglinkgetstate:\n+        fields = debuglinkgetstate_fields;\n+        break;\n+#endif\n+    }\n+\n+    if (fields) {\n+        bool status = pb_decode(&stream, fields, msg_tiny);\n+        if (status) {\n+            msg_tiny_id = msgid;\n+        } else {\n+            (*msg_failure)(failuretype_failure_syntaxerror, stream.errmsg);\n+            msg_tiny_id = 0xffff;\n+    } else {\n+        (*msg_failure)(failuretype_failure_unexpectedmessage, ""unknown message"");\n+        msg_tiny_id = 0xffff;\n+    }\n+}\n-        tiny_dispatch(entry, buf + 9, msgsize);\n+void handle_usb_rx(const void *msg, size_t len)\n+{\n+    if (msg_tiny_flag) {\n+        msg_read_tiny(msg, len);\n@@ -371,28 +406,7 @@ void handle_usb_rx(const void *msg, size_t len)\n-        uint8_t buf[64];\n-        memcpy(buf, msg, sizeof(buf));\n-\n-        uint16_t msgid = buf[4] | ((uint16_t)buf[3]) << 8;\n-        uint32_t msgsize = buf[8]        |\n-                ((uint32_t)buf[7]) <<  8 |\n-                ((uint32_t)buf[6]) << 16 |\n-                ((uint32_t)buf[5]) << 24;\n-\n-        if (msgsize > 64 - 9) {\n-            (*msg_failure)(failuretype_failure_unexpectedmessage, ""malformed tiny packet"");\n-            return;\n-        }\n-\n-        // determine callback handler and message map type.\n-        const messagesmap_t *entry = message_map_entry(debug_msg, msgid, in_msg);\n-        if (!entry) {\n-            (*msg_failure)(failuretype_failure_unexpectedmessage, ""unknown message"");\n-            return;\n-        }\n-\n-        tiny_dispatch(entry, buf + 9, msgsize);\n+        msg_read_tiny(msg, len);"
CVE-2019-20391,"['https://bugzilla.redhat.com/show_bug.cgi?id=1793934', 'https://github.com/CESNET/libyang/commit/bdb596ddc07596fa212f231135b87d0b9178f6f8']","('CWE-119', 'Improper Restriction of Operations within the Bounds of a Memory Buffer')",MITRE,NVD-CVSS2-Other,CESNET,libyang,bdb596ddc07596fa212f231135b87d0b9178f6f8,1,An invalid memory access flaw is present in libyang before v1.0-r3 in the function resolve_feature_value ( ) when an if-feature statement is used inside a bit . Applications that use libyang to parse untrusted input yang files may crash .,resolve bugfix handle yet unresolved if-features fixes # 772,"diff - - git a / src / resolve . c b / src / resolve . c \ n @ @ - 1402 , 7 + 1402 , 7 @ @ resolve_iffeature ( struct lys_iffeature * expr ) \ n - if ( expr - > expr ) { \ n + if ( expr - > expr & & expr - > features [ 0 ] ) {"
CVE-2020-19497,"['https://github.com/tbeu/matio/commit/5fa49ef9fc4368fe3d19b5fdaa36d8fa5e7f4606', 'https://github.com/tbeu/matio/issues/121']","('CWE-190', 'Integer Overflow or Wraparound')",MITRE,NVD-CVSS2-Other,tbeu,matio,5fa49ef9fc4368fe3d19b5fdaa36d8fa5e7f4606,1,"Integer overflow vulnerability in Mat_VarReadNextInfo5 in mat5.c in tbeu matio ( aka MAT File I/O Library ) 1.5.17 , allows attackers to cause a Denial of Service or possibly other unspecified impacts .",fix integer addition overflow as reported by https : //github.com/tbeu/matio/issues/121,"diff - - git a / src / mat5 . c b / src / mat5 . c \ n @ @ - 1009 , 9 + 1009 , 16 @ @ readnextcell ( mat_t * mat , matvar_t * matvar ) \ n - if ( len % 8 > 0 ) \ n - len = len + ( 8 - ( len % 8 ) ) ; \ n - cells [ i ] - > name = ( char * ) malloc ( len + 1 ) ; \ n + if ( len % 8 > 0 ) { \ n + if ( len < uint32_max - 8 + ( len % 8 ) ) \ n + len = len + 8 - ( len % 8 ) ; \ n + else { \ n + mat_varfree ( cells [ i ] ) ; \ n + cells [ i ] = null ; \ n + break ; \ n + } \ n + } \ n + cells [ i ] - > name = ( char * ) malloc ( len + 1 ) ; \ n @ @ - 1079 , 7 + 1086 , 8 @ @ readnextcell ( mat_t * mat , matvar_t * matvar ) \ n - int cell_bytes_read , name_len ; \ n + int cell_bytes_read ; \ n + mat_uint32_t name_len ; \ n @ @ - 1153 , 7 + 1161 , 13 @ @ readnextcell ( mat_t * mat , matvar_t * matvar ) \ n - name_len = name_len + ( 8 - ( name_len % 8 ) ) ; \ n + if ( name_len < uint32_max - 8 + ( name_len % 8 ) ) \ n + name_len = name_len + 8 - ( name_len % 8 ) ; \ n + else { \ n + mat_varfree ( cells [ i ] ) ; \ n + cells [ i ] = null ; \ n + break ; \ n + } \ n @ @ - 4872 , 8 + 4886 , 13 @ @ mat_varreadnextinfo5 ( mat_t * mat ) \ n - else \ n + else if ( len < uint32_max - 8 + ( len % 8 ) ) \ n + else { \ n + mat_varfree ( matvar ) ; \ n + matvar = null ; \ n + break ; \ n + } \ n @ @ - 4974 , 8 + 4993 , 14 @ @ mat_varreadnextinfo5 ( mat_t * mat ) \ n - else \ n + else if ( len < uint32_max - 8 + ( len % 8 ) ) \ n + else { \ n + mat_varfree ( matvar ) ; \ n + matvar = null ; \ n + ( void ) fseek ( ( file * ) mat - > fp , fpos , seek_set ) ; \ n + break ; \ n + }"
CVE-2019-19960,['https://github.com/wolfSSL/wolfssl/commit/5ee9f9c7a23f8ed093fe1e42bc540727e96cebb8'],"('NVD-CWE-Other', 'Other')",MITRE,NVD-CVSS2-Other,wolfSSL,wolfssl,5ee9f9c7a23f8ed093fe1e42bc540727e96cebb8,1,"In wolfSSL before 4.3.0 , wc_ecc_mulmod_ex does not properly resist side-channel attacks .",merge pull request # 2637 from sparkidev/ecc_cache_resist improve wc_ecc_mulmod_ex cache attack resistance,"diff - - git a / wolfcrypt / src / ecc . c b / wolfcrypt / src / ecc . c \ n @ @ - 2795 , 102 + 2795 , 93 @ @ int wc_ecc_mulmod_ex ( mp_int * k , ecc_point * g , ecc_point * r , \ n + #ifdef wc_no_cache_resistant\n-               mode = i;\n-#ifdef wc_no_cache_resistant\n-#else\n-               /* instead of using m[i] for double, which leaks key bit to cache\n-                * monitor, use m[2] as temp, make sure address calc is constant,\n-                * keep m[0] and m[1] in cache */\n-              if (err == mp_okay)\n-                  err = mp_copy((mp_int*)\n-                             ( ((wolfssl_word)m[0]->x & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)m[1]->x & wc_off_on_addr[i])),\n-                             m[2]->x);\n-              if (err == mp_okay)\n-                  err = mp_copy((mp_int*)\n-                             ( ((wolfssl_word)m[0]->y & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)m[1]->y & wc_off_on_addr[i])),\n-                             m[2]->y);\n-              if (err == mp_okay)\n-                  err = mp_copy((mp_int*)\n-                             ( ((wolfssl_word)m[0]->z & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)m[1]->z & wc_off_on_addr[i])),\n-                             m[2]->z);\n-              if (err == mp_okay)\n-                  err = ecc_projective_dbl_point(m[2], m[3], a, modulus, mp);\n-              /* copy m[2] back to m[i] */\n-              if (err == mp_okay)\n-                  err = mp_copy(m[2]->x,\n-                             (mp_int*)\n-                             ( ((wolfssl_word)m[0]->x & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)m[1]->x & wc_off_on_addr[i])) );\n-              if (err == mp_okay)\n-                  err = mp_copy(m[2]->y,\n-                             (mp_int*)\n-                             ( ((wolfssl_word)m[0]->y & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)m[1]->y & wc_off_on_addr[i])) );\n-              if (err == mp_okay)\n-                  err = mp_copy(m[2]->z,\n-                             (mp_int*)\n-                             ( ((wolfssl_word)m[0]->z & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)m[1]->z & wc_off_on_addr[i])) );\n-#endif\n+           }\n+           else {\n+               if (err == mp_okay)\n+                   err = ecc_projective_add_point(m[0], m[1], m[i^1], a,\n+                                                  modulus, mp);\n-                   continue;\n+                   err = ecc_projective_dbl_point(m[i], m[i], a, modulus, mp);\n+           mode |= i;\n+#else\n-               err = ecc_projective_add_point(m[0], m[1], m[i^1], a, modulus,\n-                                                                       mp);\n-#ifdef wc_no_cache_resistant\n+               err = ecc_projective_add_point(m[0], m[1], m[2], a, modulus,\n+                                              mp);\n-               err = ecc_projective_dbl_point(m[i], m[i], a, modulus, mp);\n-#else\n+               err = mp_copy(m[2]->x,\n+                             (mp_int*)\n+                             ( ((size_t)m[0]->x & wc_off_on_addr[mode&(i  )]) +\n+                               ((size_t)m[1]->x & wc_off_on_addr[mode&(i^1)]) +\n+                               ((size_t)m[2]->x & wc_off_on_addr[mode^1])) );\n+           if (err == mp_okay)\n+               err = mp_copy(m[2]->y,\n+                             (mp_int*)\n+                             ( ((size_t)m[0]->y & wc_off_on_addr[mode&(i  )]) +\n+                               ((size_t)m[1]->y & wc_off_on_addr[mode&(i^1)]) +\n+                               ((size_t)m[2]->y & wc_off_on_addr[mode^1])) );\n+           if (err == mp_okay)\n+               err = mp_copy(m[2]->z,\n+                             (mp_int*)\n+                             ( ((size_t)m[0]->z & wc_off_on_addr[mode&(i  )]) +\n+                               ((size_t)m[1]->z & wc_off_on_addr[mode&(i^1)]) +\n+                               ((size_t)m[2]->z & wc_off_on_addr[mode^1])) );\n+\n-                             ( ((wolfssl_word)m[0]->x & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)m[1]->x & wc_off_on_addr[i])),\n+                             ( ((size_t)m[0]->x & wc_off_on_addr[i^1]) +\n+                               ((size_t)m[1]->x & wc_off_on_addr[i])),\n-                             ( ((wolfssl_word)m[0]->y & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)m[1]->y & wc_off_on_addr[i])),\n+                             ( ((size_t)m[0]->y & wc_off_on_addr[i^1]) +\n+                               ((size_t)m[1]->y & wc_off_on_addr[i])),\n-                             ( ((wolfssl_word)m[0]->z & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)m[1]->z & wc_off_on_addr[i])),\n+                             ( ((size_t)m[0]->z & wc_off_on_addr[i^1]) +\n+                               ((size_t)m[1]->z & wc_off_on_addr[i])),\n-               err = ecc_projective_dbl_point(m[2], m[2], a, modulus, mp);\n+               err = ecc_projective_dbl_point(m[2], m[3], a, modulus, mp);\n-               err = mp_copy(m[2]->x,\n+               err = mp_copy((mp_int*)\n+                             (((size_t)m[2]->x & wc_off_on_addr[mode^1]) +\n+                              ((size_t)m[3]->x & wc_off_on_addr[mode])),\n-                             ( ((wolfssl_word)m[0]->x & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)m[1]->x & wc_off_on_addr[i])) );\n+                             ( ((size_t)m[0]->x & wc_off_on_addr[i^1]) +\n+                               ((size_t)m[1]->x & wc_off_on_addr[i])) );\n-               err = mp_copy(m[2]->y,\n+               err = mp_copy((mp_int*)\n+                             (((size_t)m[2]->y & wc_off_on_addr[mode^1]) +\n+                              ((size_t)m[3]->y & wc_off_on_addr[mode])),\n-                             ( ((wolfssl_word)m[0]->y & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)m[1]->y & wc_off_on_addr[i])) );\n+                             ( ((size_t)m[0]->y & wc_off_on_addr[i^1]) +\n+                               ((size_t)m[1]->y & wc_off_on_addr[i])) );\n-               err = mp_copy(m[2]->z,\n+               err = mp_copy((mp_int*)\n+                             (((size_t)m[2]->z & wc_off_on_addr[mode^1]) +\n+                              ((size_t)m[3]->z & wc_off_on_addr[mode])),\n-                             ( ((wolfssl_word)m[0]->z & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)m[1]->z & wc_off_on_addr[i])) );\n+                             ( ((size_t)m[0]->z & wc_off_on_addr[i^1]) +\n+                               ((size_t)m[1]->z & wc_off_on_addr[i])) );\n+\n+           mode |= i;"
CVE-2020-11095,['https://github.com/FreeRDP/FreeRDP/commit/733ee3208306b1ea32697b356c0215180fc3f049'],"('CWE-125', 'Out-of-bounds Read')","GitHub, Inc.",NVD-CVSS2-Other,FreeRDP,FreeRDP,733ee3208306b1ea32697b356c0215180fc3f049,1,"In FreeRDP before version 2.1.2 , an out of bound reads occurs resulting in accessing a memory location that is outside of the boundaries of the static array PRIMARY_DRAWING_ORDER_FIELD_BYTES . This is fixed in version 2.1.2 .",fixed invalid access in update_recv_primary_order cve-2020-11095 thanks @ antonio-morales for finding this .,"diff - - git a / libfreerdp / core / orders . c b / libfreerdp / core / orders . c \ n @ @ - 43 , 36 + 43 , 75 @ @ \ n - const byte primary_drawing_order_field_bytes [ ] = { dstblt_order_field_bytes , \ n - patblt_order_field_bytes , \ n - scrblt_order_field_bytes , \ n - 0 , \ n - 0 , \ n - 0 , \ n - 0 , \ n - draw_nine_grid_order_field_bytes , \ n - multi_draw_nine_grid_order_field_bytes , \ n - line_to_order_field_bytes , \ n - opaque_rect_order_field_bytes , \ n - save_bitmap_order_field_bytes , \ n - 0 , \ n - memblt_order_field_bytes , \ n - mem3blt_order_field_bytes , \ n - multi_dstblt_order_field_bytes , \ n - multi_patblt_order_field_bytes , \ n - multi_scrblt_order_field_bytes , \ n - multi_opaque_rect_order_field_bytes , \ n - fast_index_order_field_bytes , \ n - polygon_sc_order_field_bytes , \ n - polygon_cb_order_field_bytes , \ n - polyline_order_field_bytes , \ n - 0 , \ n - fast_glyph_order_field_bytes , \ n - ellipse_sc_order_field_bytes , \ n - ellipse_cb_order_field_bytes , \ n - glyph_index_order_field_bytes } ; \ n - \ n - #define primary_drawing_order_count (arraysize(primary_drawing_order_field_bytes))\n+byte get_primary_drawing_order_field_bytes(uint32 ordertype, bool* pvalid)\n+{\n+	if (pvalid)\n+		*pvalid = true;\n+	switch (ordertype)\n+	{\n+		case 0:\n+			return dstblt_order_field_bytes;\n+		case 1:\n+			return patblt_order_field_bytes;\n+		case 2:\n+			return scrblt_order_field_bytes;\n+		case 3:\n+			return 0;\n+		case 4:\n+			return 0;\n+		case 5:\n+			return 0;\n+		case 6:\n+			return 0;\n+		case 7:\n+			return draw_nine_grid_order_field_bytes;\n+		case 8:\n+			return multi_draw_nine_grid_order_field_bytes;\n+		case 9:\n+			return line_to_order_field_bytes;\n+		case 10:\n+			return opaque_rect_order_field_bytes;\n+		case 11:\n+			return save_bitmap_order_field_bytes;\n+		case 12:\n+			return 0;\n+		case 13:\n+			return memblt_order_field_bytes;\n+		case 14:\n+			return mem3blt_order_field_bytes;\n+		case 15:\n+			return multi_dstblt_order_field_bytes;\n+		case 16:\n+			return multi_patblt_order_field_bytes;\n+		case 17:\n+			return multi_scrblt_order_field_bytes;\n+		case 18:\n+			return multi_opaque_rect_order_field_bytes;\n+		case 19:\n+			return fast_index_order_field_bytes;\n+		case 20:\n+			return polygon_sc_order_field_bytes;\n+		case 21:\n+			return polygon_cb_order_field_bytes;\n+		case 22:\n+			return polyline_order_field_bytes;\n+		case 23:\n+			return 0;\n+		case 24:\n+			return fast_glyph_order_field_bytes;\n+		case 25:\n+			return ellipse_sc_order_field_bytes;\n+		case 26:\n+			return ellipse_cb_order_field_bytes;\n+		case 27:\n+			return glyph_index_order_field_bytes;\n+		default:\n+			if (pvalid)\n+				*pvalid = false;\n+			wlog_warn(tag, ""invalid ordertype 0x%08x received"", ordertype);\n+			return 0;\n+	}\n+}\n@@ -3240,6 +3279,7 @@ static bool read_primary_order(wlog* log, const char* ordername, wstream* s,\n+	byte field;\n@@ -3263,8 +3303,11 @@ static bool update_recv_primary_order(rdpupdate* update, wstream* s, byte flags)\n-	if (!update_read_field_flags(s, &(orderinfo->fieldflags), flags,\n-	                             primary_drawing_order_field_bytes[orderinfo->ordertype]))\n+	field = get_primary_drawing_order_field_bytes(orderinfo->ordertype, &rc);\n+	if (!rc)\n+		return false;\n+\n+	if (!update_read_field_flags(s, &(orderinfo->fieldflags), flags, field))\ndiff --git a/libfreerdp/core/orders.h b/libfreerdp/core/orders.h\n@@ -189,7 +189,7 @@\n-freerdp_local extern const byte primary_drawing_order_field_bytes[];\n+freerdp_local byte get_primary_drawing_order_field_bytes(uint32 ordertype, bool* pvalid);\ndiff --git a/libfreerdp/core/update.c b/libfreerdp/core/update.c\n@@ -1087,7 +1087,7 @@ static int update_prepare_order_info(rdpcontext* context, order_info* orderinfo,\n-	length += primary_drawing_order_field_bytes[orderinfo->ordertype];\n+	length += get_primary_drawing_order_field_bytes(orderinfo->ordertype, null);\n@@ -1105,7 +1105,7 @@ static int update_write_order_info(rdpcontext* context, wstream* s, order_info*\n-	                         primary_drawing_order_field_bytes[orderinfo->ordertype]);\n+	                         get_primary_drawing_order_field_bytes(orderinfo->ordertype, null));"
CVE-2019-7221,"['http://www.openwall.com/lists/oss-security/2019/02/18/2', 'https://bugs.chromium.org/p/project-zero/issues/detail?id=1760', 'https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=ecec76885bcfe3294685dc363fd1273df0d5d65f']","('CWE-416', 'Use After Free')",MITRE,NVD-CVSS2-Other,torvalds,linux,ecec76885bcfe3294685dc363fd1273df0d5d65f,1,The KVM implementation in the Linux kernel through 4.20.5 has a Use-after-Free .,kvm : nvmx : unconditionally cancel preemption timer in free_nested ( cve-2019-7221 ) bugzilla : 1671904 there are multiple code paths where an hrtimer may have been started to emulate an l1 vmx preemption timer that can result in a call to free_nested without an intervening l2 exit where the hrtimer is normally cancelled . unconditionally cancel in free_nested to cover all cases . embargoed until feb 7th 2019. signed-off-by : peter shier < pshier @ google.com > reported-by : jim mattson < jmattson @ google.com > reviewed-by : jim mattson < jmattson @ google.com > reported-by : felix wilhelm < fwilhelm @ google.com > cc : stable @ kernel.org message-id : < 20181011184646.154065-1-pshier @ google.com > signed-off-by : paolo bonzini < pbonzini @ redhat.com >,"diff - - git a / arch / x86 / kvm / vmx / nested . c b / arch / x86 / kvm / vmx / nested . c \ n @ @ - 211 , 6 + 211 , 7 @ @ static void free_nested ( struct kvm_vcpu * vcpu ) \ n + hrtimer_cancel ( & vmx - > nested . preemption_timer ) ;"
CVE-2021-32435,['https://github.com/leesavide/abcm2ps/commit/3169ace6d63f6f517a64e8df0298f44a490c4a15'],"('CWE-787', 'Out-of-bounds Write')",MITRE,NVD-CVSS2-Other,leesavide,abcm2ps,3169ace6d63f6f517a64e8df0298f44a490c4a15,1,Stack-based buffer overflow in the function get_key in parse.c of abcm2ps v8.14.11 allows remote attackers to cause a Denial of Service ( DoS ) via unspecified vectors .,fix : crash when accidental without a note at start of line after k : issue # 84 .,"diff - - git a / abcparse . c b / abcparse . c \ n @ @ - 2040 , 10 + 2040 , 10 @ @ static int parse_line ( char * p ) \ n - parse . last_sym - > u . note . slur_st = slur ; \ n - slur = 0 ; \ n - if ( parse . last_sym - > u . note . notes [ 0 ] . len > 0 ) /* if not space */ \ n - curvoice - > last_note = parse . last_sym ; \ n + if ( slur & & parse . last_sym - > u . note . notes [ 0 ] . len ) { \ n + parse . last_sym - > u . note . slur_st = slur ; \ n + slur = 0 ; \ n + } \ n @ @ - 2078 , 9 + 2078 , 10 @ @ static int parse_line ( char * p ) \ n - parse . last_sym - > u . note . slur_st = slur ; \ n - slur = 0 ; \ n - curvoice - > last_note = parse . last_sym ; \ n + if ( slur & & parse . last_sym - > u . note . notes [ 0 ] . len ) { \ n + parse . last_sym - > u . note . slur_st = slur ; \ n + slur = 0 ; \ n + } \ n @ @ - 2511 , 6 + 2512 , 8 @ @ add_deco : \ n + if ( s - > u . note . notes [ 0 ] . len > 0 ) /* if not space */ \ n + curvoice - > last_note = s ;"
CVE-2020-27787,"['https://github.com/upx/upx/commit/e2f60adc95334f47e286838dac33160819c5d74d', 'https://github.com/upx/upx/issues/333']","('CWE-119', 'Improper Restriction of Operations within the Bounds of a Memory Buffer')","Red Hat, Inc.",NVD-CVSS2-Other,upx,upx,e2f60adc95334f47e286838dac33160819c5d74d,1,A Segmentaation fault was found in UPX in invert_pt_dynamic ( ) function in p_lx_elf.cpp . An attacker with a crafted input file allows invalid memory address access that could lead to a denial of service .,detect 0==dt_symtab in invert_pt_dynamic ( ) https : //github.com/upx/upx/issues/333 modified : p_lx_elf.cpp,"diff - - git a / src / p_lx_elf . cpp b / src / p_lx_elf . cpp \ n @ @ - 1639 , 8 + 1639 , 8 @ @ packlinuxelf32 : : invert_pt_dynamic ( elf32_dyn const * dynp ) \ n - unsigned const v_sym = get_te32 ( & dynp0 [ - 1 + x_sym ] . d_val ) ; \ n - if ( ! nbucket \ n + unsigned const v_sym = ! x_sym ? 0 : get_te32 ( & dynp0 [ - 1 + x_sym ] . d_val ) ; \ n + if ( ! nbucket | | ! v_sym \ n + sizeof ( * buckets ) * nbucket // buckets\n@@ -1670,8 +1670,8 @@ packlinuxelf32::invert_pt_dynamic(elf32_dyn const *dynp)\n-        unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);\n-        if (!n_bucket || !n_bitmask\n+        unsigned const v_sym = !x_sym ? 0 : get_te32(&dynp0[-1+ x_sym].d_val);\n+        if (!n_bucket || !n_bitmask || !v_sym\n@@ -5139,8 +5139,8 @@ packlinuxelf64::invert_pt_dynamic(elf64_dyn const *dynp)\n-        unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);\n-        if (!nbucket\n+        unsigned const v_sym = !x_sym ? 0 : get_te32(&dynp0[-1+ x_sym].d_val);\n+        if (!nbucket || !v_sym\n+ sizeof(*buckets)*nbucket  // buckets\n@@ -5170,8 +5170,8 @@ packlinuxelf64::invert_pt_dynamic(elf64_dyn const *dynp)\n-        upx_uint64_t const v_sym = get_te64(&dynp0[-1+ x_sym].d_val);\n-        if (!n_bucket || !n_bitmask\n+        upx_uint64_t const v_sym = !x_sym ? 0 : get_te64(&dynp0[-1+ x_sym].d_val);\n+        if (!n_bucket || !n_bitmask || !v_sym"
CVE-2019-3558,['https://github.com/facebook/fbthrift/commit/c5d6e07588cd03061bc54d451a7fa6e84883d62b'],"('CWE-834', 'Excessive Iteration')","Facebook, Inc.",NVD-CVSS2-Other,facebook,fbthrift,c5d6e07588cd03061bc54d451a7fa6e84883d62b,1,"Python Facebook Thrift servers would not error upon receiving messages with containers of fields of unknown type . As a result , malicious clients could send short messages which would take a long time for the server to parse , potentially leading to denial of service . This issue affects Facebook Thrift prior to v2019.02.18.00 .","throw on bad types during skipping data summary : the current code silently returns on bad types . in case when we have an invalid data , we may get a container of a large size with a bad type , this would lead to us running long loop doing nothing ( though we already can say that the data is invalid ) . the new code would throw an exception as soon as we try to skip a value of invalid type . fixes cve-2019-3552 reviewed by : yfeldblum , stevegury differential revision : d8344920 fbshipit-source-id : f12e8f3442f7ad5e1a81d822380701e929b80f0d","diff - - git a / thrift / lib / cpp / protocol / tprotocolexception . cpp b / thrift / lib / cpp / protocol / tprotocolexception . cpp \ n @ @ - 57 , 4 + 57 , 12 @ @ namespace apache { namespace thrift { namespace protocol { \ n + \ n + [ [ noreturn ] ] void tprotocolexception : : throwinvalidskiptype ( ttype type ) { \ n + throw tprotocolexception ( \ n + tprotocolexception : : invalid_data , \ n + folly : : sformat ( \ n + ""encountered invalid field/element type ({}) during skipping"" , \ n + static_cast < uint8_t > ( type ) ) ) ; \ n + } \ ndiff - - git a / thrift / lib / cpp / protocol / tprotocolexception . h b / thrift / lib / cpp / protocol / tprotocolexception . h \ n @ @ - 23 , 6 + 23 , 7 @ @ \ n + #include <thrift/lib/cpp/protocol/ttype.h>\n@@ -106,6 +107,7 @@ class tprotocolexception : public apache::thrift::tlibraryexception {\n+  [[noreturn]] static void throwinvalidskiptype(ttype type);\ndiff --git a/thrift/lib/cpp2/protocol/protocol.h b/thrift/lib/cpp2/protocol/protocol.h\n@@ -176,8 +176,9 @@ void skip(protocol_& prot, ttype arg_type) {\n-    default:\n-      return;\n+    default: {\n+      tprotocolexception::throwinvalidskiptype(arg_type);\n+    }\ndiff --git a/thrift/lib/py/protocol/tprotocol.py b/thrift/lib/py/protocol/tprotocol.py\n@@ -177,9 +177,7 @@ class tprotocolbase:\n-        if type == ttype.stop:\n-            return\n-        elif type == ttype.bool:\n+        if type == ttype.bool:\n@@ -220,6 +218,11 @@ class tprotocolbase:\n+        else:\n+            raise tprotocolexception(\n+                tprotocolexception.invalid_data,\n+                ""unexpected type for skipping {}"".format(type)\n+            )\ndiff --git a/thrift/test/protocolskiptest.cpp b/thrift/test/protocolskiptest.cpp\n@@ -0,0 +1,68 @@\n+/*\n+ * copyright 2004-present facebook, inc.\n+ *\n+ * licensed under the apache license, version 2.0 (the ""license"");\n+ * you may not use this file except in compliance with the license.\n+ * you may obtain a copy of the license at\n+ *\n+ *   http://www.apache.org/licenses/license-2.0\n+ *\n+ * unless required by applicable law or agreed to in writing, software\n+ * distributed under the license is distributed on an ""as is"" basis,\n+ * without warranties or conditions of any kind, either express or implied.\n+ * see the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+\n+#include <gtest/gtest.h>\n+\n+#include <thrift/lib/cpp2/protocol/compactprotocol.h>\n+\n+using namespace apache::thrift;\n+\n+test(protocolskiptest, skipint) {\n+  iobufqueue queue;\n+  compactprotocolwriter writer;\n+  writer.setoutput(&queue);\n+  writer.writei32(123);\n+  auto buf = queue.move();\n+  compactprotocolreader reader;\n+  reader.setinput(buf.get());\n+  reader.skip(ttype::t_i32);\n+}\n+\n+test(protocolskiptest, skipstop) {\n+  iobufqueue queue;\n+  compactprotocolwriter writer;\n+  writer.setoutput(&queue);\n+  writer.writefieldstop();\n+  auto buf = queue.move();\n+  compactprotocolreader reader;\n+  reader.setinput(buf.get());\n+  bool thrown = false;\n+  try {\n+    reader.skip(ttype::t_stop);\n+  } catch (const tprotocolexception& ex) {\n+    expect_eq(tprotocolexception::invalid_data, ex.gettype());\n+    thrown = true;\n+  }\n+  expect_true(thrown);\n+}\n+\n+test(protocolskiptest, skipstopincontainer) {\n+  iobufqueue queue;\n+  compactprotocolwriter writer;\n+  writer.setoutput(&queue);\n+  writer.writelistbegin(ttype::t_stop, 1u << 30);\n+  auto buf = queue.move();\n+  compactprotocolreader reader;\n+  reader.setinput(buf.get());\n+  bool thrown = false;\n+  try {\n+    reader.skip(ttype::t_list);\n+  } catch (const tprotocolexception& ex) {\n+    expect_eq(tprotocolexception::invalid_data, ex.gettype());\n+    thrown = true;\n+  }\n+  expect_true(thrown);\n+}"
CVE-2020-2221,[],"('CWE-79', ""Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"")",Jenkins Project,NVD-CVSS2-Other,jenkinsci,jenkins,f6e575381bdba85afaf27c529d7298091f226e49,1,"Jenkins 2.244 and earlier , LTS 2.235.1 and earlier does not escape the upstream job 's display name shown as part of a build cause , resulting in a stored cross-site scripting vulnerability .",[ security-1901 ],"diff - - git a / core / src / main / resources / hudson / model / cause / upstreamcause / description . jelly b / core / src / main / resources / hudson / model / cause / upstreamcause / description . jelly \ n @ @ - 29 , 20 + 29 , 20 @ @ the software . \ n - < j : out value = ""${%started_by_project(app.getitembyfullname(it.upstreamproject).fulldisplayname,it.upstreambuild.tostring(),it.upstreamurl,rooturl)}"" / > \ n + $ { % started_by_project ( app . getitembyfullname ( it . upstreamproject ) . fulldisplayname , it . upstreambuild . tostring ( ) , it . upstreamurl , rooturl ) } \ n - < j : out value = ""${%started_by_project_with_deleted_build(app.getitembyfullname(it.upstreamproject).fulldisplayname,it.upstreambuild.tostring(),it.upstreamurl,rooturl)}"" / > \ n + $ { % started_by_project_with_deleted_build ( app . getitembyfullname ( it . upstreamproject ) . fulldisplayname , it . upstreambuild . tostring ( ) , it . upstreamurl , rooturl ) } \ n - < j : out value = ""${it.shortdescription}"" / > \ n + $ { it . shortdescription } \ n - < br / > < j : out value = ""${%caused_by}"" / > \ n + < br / > $ { % caused_by } \ ndiff - - git a / test / src / test / java / hudson / model / upstreamcausesec1901test . java b / test / src / test / java / hudson / model / upstreamcausesec1901test . java \ n @ @ - 0 , 0 + 1 , 167 @ @ \ n + /*\n+ * the mit license\n+ *\n+ * copyright (c) 2020 cloudbees, inc.\n+ *\n+ * permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the ""software""), to deal\n+ * in the software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the software, and to permit persons to whom the software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * the above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the software.\n+ *\n+ * the software is provided ""as is"", without warranty of any kind, express or\n+ * implied, including but not limited to the warranties of merchantability,\n+ * fitness for a particular purpose and noninfringement. in no event shall the\n+ * authors or copyright holders be liable for any claim, damages or other\n+ * liability, whether in an action of contract, tort or otherwise, arising from,\n+ * out of or in connection with the software or the use or other dealings in\n+ * the software.\n+ */ \ n + package hudson . model ; \ n + \ n + import hudson . tasks . buildtrigger ; \ n + import jenkins . model . jenkins ; \ n + import org . junit . rule ; \ n + import org . junit . test ; \ n + import org . jvnet . hudson . test . issue ; \ n + import org . jvnet . hudson . test . jenkinsrule ; \ n + import org . jvnet . hudson . test . testextension ; \ n + \ n + import java . io . ioexception ; \ n + import java . util . concurrent . atomic . atomicboolean ; \ n + \ n + import static org . junit . assert . assertfalse ; \ n + \ n + public class upstreamcausesec1901test { \ n + \ n + @ rule \ n + public jenkinsrule j = new jenkinsrule ( ) ; \ n + \ n + @ test \ n + @ issue ( ""security-1901"" ) \ n + public void preventxssinupstreamdisplayname ( ) throws exception { \ n + j . jenkins . setquietperiod ( 0 ) ; \ n + freestyleproject up = j . createfreestyleproject ( ""up"" ) ; \ n + up . setdisplayname ( ""up<script>alert(123)</script>project"" ) ; \ n + \ n + freestyleproject down = j . createfreestyleproject ( ""down"" ) ; \ n + \ n + up . getpublisherslist ( ) . add ( new buildtrigger ( down . getfullname ( ) , false ) ) ; \ n + \ n + j . jenkins . rebuilddependencygraph ( ) ; \ n + \ n + j . buildandassertsuccess ( up ) ; \ n + \ n + freestylebuild downbuild = this . waitfordownbuild ( down ) ; \ n + \ n + ensurexssisprevented ( downbuild ) ; \ n + } \ n + \ n + @ test \ n + @ issue ( ""security-1901"" ) \ n + public void preventxssinupstreamdisplayname_deleted ( ) throws exception { \ n + j . jenkins . setquietperiod ( 0 ) ; \ n + freestyleproject up = j . createfreestyleproject ( ""up"" ) ; \ n + up . setdisplayname ( ""up<script>alert(123)</script>project"" ) ; \ n + \ n + freestyleproject down = j . createfreestyleproject ( ""down"" ) ; \ n + \ n + up . getpublisherslist ( ) . add ( new buildtrigger ( down . getfullname ( ) , false ) ) ; \ n + \ n + j . jenkins . rebuilddependencygraph ( ) ; \ n + \ n + freestylebuild upbuild = j . buildandassertsuccess ( up ) ; \ n + \ n + freestylebuild downbuild = this . waitfordownbuild ( down ) ; \ n + \ n + // that will display a different part\n+        upbuild.delete();\n+\n+        ensurexssisprevented(downbuild);\n+    }\n+\n+    @test\n+    @issue(""security-1901"")\n+    public void preventxssinupstreamshortdescription() throws exception {\n+        fullnamechangingproject up = j.createproject(fullnamechangingproject.class, ""up"");\n+\n+        freestyleproject down = j.createfreestyleproject(""down"");\n+\n+        custombuild upbuild = j.buildandassertsuccess(up);\n+\n+        up.setvirtualname(""up<script>alert(123)</script>project"");\n+        j.assertbuildstatussuccess(down.schedulebuild2(0, new cause.upstreamcause(upbuild)));\n+        up.setvirtualname(null);\n+\n+        freestylebuild downbuild = this.waitfordownbuild(down);\n+\n+        ensurexssisprevented(downbuild);\n+    }\n+\n+    private void ensurexssisprevented(freestylebuild downbuild) throws exception {\n+        atomicboolean alertcalled = new atomicboolean(false);\n+\n+        jenkinsrule.webclient wc = j.createwebclient();\n+        wc.setalerthandler((page, s) -> alertcalled.set(true));\n+        wc.goto(downbuild.geturl());\n+\n+        assertfalse(""xss not prevented"", alertcalled.get());\n+    }\n+\n+    private <b extends build<?, b>> b waitfordownbuild(project<?, b> down) throws exception {\n+        j.waituntilnoactivity();\n+        b result = down.getbuilds().getlastbuild();\n+\n+        return result;\n+    }\n+\n+    public static class custombuild extends build<fullnamechangingproject, custombuild> {\n+        public custombuild(fullnamechangingproject job) throws ioexception {\n+            super(job);\n+        }\n+    }\n+\n+    static class fullnamechangingproject extends project<fullnamechangingproject, custombuild> implements toplevelitem {\n+        private volatile string virtualname;\n+\n+        public fullnamechangingproject(itemgroup parent, string name) {\n+            super(parent, name);\n+        }\n+\n+        public void setvirtualname(string virtualname) {\n+            this.virtualname = virtualname;\n+        }\n+\n+        @override\n+        public string getname() {\n+            if (virtualname != null) {\n+                return virtualname;\n+            } else {\n+                return super.getname();\n+            }\n+        }\n+\n+        @override\n+        protected class<custombuild> getbuildclass() {\n+            return custombuild.class;\n+        }\n+\n+        @override\n+        public toplevelitemdescriptor getdescriptor() {\n+            return (freestyleproject.descriptorimpl) jenkins.get().getdescriptorordie(getclass());\n+        }\n+\n+        @testextension\n+        public static class descriptorimpl extends abstractprojectdescriptor {\n+\n+            @override\n+            public fullnamechangingproject newinstance(itemgroup parent, string name) {\n+                return new fullnamechangingproject(parent, name);\n+            }\n+        }\n+    }\n+}"
CVE-2020-26934,['https://www.phpmyadmin.net/security/PMASA-2020-5/'],"('CWE-79', ""Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"")",MITRE,NVD-CVSS2-Other,phpmyadmin,phpmyadmin,19df63b0365621427697edc185ff7c9c5707c523,1,phpMyAdmin before 4.9.6 and 5.x before 5.0.3 allows XSS through the transformation feature via a crafted link .,fix # 314 - make sure where_clause is not modified signed-off-by : william desportes < williamdes @ wdes.fr >,"diff - - git a / libraries / classes / display / results . php b / libraries / classes / display / results . php \ n @ @ - 3001 , 6 + 3001 , 7 @ @ private function _getrowvalues ( \ n + 'where_clause_sign' = > core : : signsqlquery ( $ whereclausemap [ $ row_no ] [ $ meta - > orgtable ] ) , \ ndiff - - git a / libraries / classes / insertedit . php b / libraries / classes / insertedit . php \ n @ @ - 18 , 6 + 18 , 7 @ @ \ n + use phpmyadmin \ core ; \ n @ @ - 2480 , 6 + 2481 , 7 @ @ public function transformeditedvalues ( \ n + 'where_clause_sign' = > core : : signsqlquery ( $ _post [ 'where_clause' ] ) , \ n @ @ - 3275 , 6 + 3277 , 7 @ @ private function gethtmlforinserteditformcolumn ( \ n + 'where_clause_sign' = > core : : signsqlquery ( $ where_clause ) , \ ndiff - - git a / transformation_wrapper . php b / transformation_wrapper . php \ n @ @ - 63 , 6 + 63 , 12 @ @ \ n + \ n + if ( ! core : : checksqlquerysignature ( $ where_clause , isset ( $ _get [ 'where_clause_sign' ] ) ? $ _get [ 'where_clause_sign' ] : '' ) ) { \ n + /* l10n: in case a sql query did not pass a security check  */ \ n + core : : fatalerror ( __ ( 'there is an issue with your request.' ) ) ; \ n + exit ; \ n + }"
CVE-2021-32786,"['https://github.com/zmartzone/mod_auth_openidc/commit/3a115484eb927bc6daa5737dd84f88ff4bbc5544', 'https://www.oracle.com/security-alerts/cpuapr2022.html']","('CWE-601', ""URL Redirection to Untrusted Site ('Open Redirect')"")","GitHub, Inc.",NVD-CVSS2-Other,zmartzone,mod_auth_openidc,3a115484eb927bc6daa5737dd84f88ff4bbc5544,1,"mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party , authenticating users against an OpenID Connect Provider . In versions prior to 2.4.9 , ` oidc_validate_redirect_url ( ) ` does not parse URLs the same way as most browsers do . As a result , this function can be bypassed and leads to an Open Redirect vulnerability in the logout functionality . This bug has been fixed in version 2.4.9 by replacing any backslash of the URL to redirect with slashes to address a particular breaking change between the different specifications ( RFC2396 / RFC3986 and WHATWG ) . As a workaround , this vulnerability can be mitigated by configuring ` mod_auth_openidc ` to only allow redirection whose destination matches a given regular expression .",merge pull request from ghsa-xm4c-5wm5-jqv7 replace potentially harmful backslashes with forward slashes when val…,"diff - - git a / changelog b / changelog \ n @ @ - 1 , 5 + 1 , 6 @ @ \ n - use redisvcommand to avoid crash with crafted key when using redis without encryption ; thanks @ thomas - chauchefoin - sonarsource \ n + - replace potentially harmful backslashes with forward slashes when validating redirection urls ; thanks @ thomas - chauchefoin - sonarsource \ n - verify that ""alg"" is not none in logout_token explicitly \ ndiff - - git a / src / mod_auth_openidc . c b / src / mod_auth_openidc . c \ n @ @ - 2920 , 12 + 2920 , 21 @ @ static int oidc_handle_logout_backchannel ( request_rec * r , oidc_cfg * cfg ) { \ n + #define oidc_max_url_length default_limit_request_line * 2\n+\n-		const char *url, apr_byte_t restrict_to_host, char **err_str,\n+		const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,\n+	size_t i = 0;\n+	char *url = apr_pstrndup(r->pool, redirect_to_url, oidc_max_url_length);\n+\n+	// replace potentially harmful backslashes with forward slashes\n+	for (i = 0; i < strlen(url); i++)\n+		if (url[i] == '\\')\n+			url[i] = '/';"
CVE-2020-15197,['https://github.com/tensorflow/tensorflow/commit/3cbb917b4714766030b28eba9fb41bb97ce9ee02'],"('CWE-20', 'Improper Input Validation')","GitHub, Inc.",NVD-CVSS2-Other,tensorflow,tensorflow,3cbb917b4714766030b28eba9fb41bb97ce9ee02,1,"In Tensorflow before version 2.3.1 , the ` SparseCountSparseOutput ` implementation does not validate that the input arguments form a valid sparse tensor . In particular , there is no validation that the ` indices ` tensor has rank 2 . This tensor must be a matrix because code assumes its elements are accessed as elements of a matrix . However , malicious users can pass in tensors of different rank , resulting in a ` CHECK ` assertion failure and a crash . This can be used to cause denial of service in serving installations , if users are allowed to control the components of the input sparse tensor . The issue is patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02 and is released in TensorFlow version 2.3.1 .","fix multiple vulnerabilities in ` tf.raw_ops. * countsparseoutput ` . also add tests for these api points , both for the happy paths and for the vulnerable ones . piperorigin-revid : 332563222 change-id : ib3b52116a83a134c2e742a7c66e5e956db8fba05","diff - - git a / tensorflow / core / kernels / count_ops . cc b / tensorflow / core / kernels / count_ops . cc \ n @ @ - 178 , 10 + 178 , 30 @ @ class sparsecount : public opkernel { \ n + op_requires ( context , tensorshapeutils : : ismatrix ( indices . shape ( ) ) , \ n + errors : : invalidargument ( \ n + ""input indices must be a 2-dimensional tensor. got: "" , \ n + indices . shape ( ) . debugstring ( ) ) ) ; \ n + \ n + if ( use_weights ) { \ n + op_requires ( \ n + context , weights . shape ( ) = = values . shape ( ) , \ n + errors : : invalidargument ( \ n + ""weights and values must have the same shape. weight shape: "" , \ n + weights . shape ( ) . debugstring ( ) , \ n + ""; values shape: "" , values . shape ( ) . debugstring ( ) ) ) ; \ n + } \ n + \ n + op_requires ( context , num_values = = indices . shape ( ) . dim_size ( 0 ) , \ n + errors : : invalidargument ( \ n + ""number of values must match first dimension of indices."" , \ n + ""got "" , num_values , \ n + "" values, indices shape: "" , indices . shape ( ) . debugstring ( ) ) ) ; \ n + \ n @ @ - 235 , 12 + 255 , 33 @ @ class raggedcount : public opkernel { \ n + if ( use_weights ) { \ n + op_requires ( \ n + context , weights . shape ( ) = = values . shape ( ) , \ n + errors : : invalidargument ( \ n + ""weights and values must have the same shape. weight shape: "" , \ n + weights . shape ( ) . debugstring ( ) , \ n + ""; values shape: "" , values . shape ( ) . debugstring ( ) ) ) ; \ n + } \ n + \ n + op_requires ( \ n + context , num_batches > 0 , \ n + errors : : invalidargument ( \ n + ""must provide at least 2 elements for the splits argument"" ) ) ; \ n + op_requires ( context , splits_values ( 0 ) = = 0 , \ n + errors : : invalidargument ( ""splits must start with 0, not with "" , \ n + splits_values ( 0 ) ) ) ; \ n + op_requires ( context , splits_values ( num_batches ) = = num_values , \ n + errors : : invalidargument ( \ n + ""splits must end with the number of values, got "" , \ n + splits_values ( num_batches ) , "" instead of "" , num_values ) ) ; \ n + \ ndiff - - git a / tensorflow / python / ops / bincount_ops_test . py b / tensorflow / python / ops / bincount_ops_test . py \ n @ @ - 25 , 7 + 25 , 9 @ @ from tensorflow . python . eager import context \ n + from tensorflow . python . framework import test_util \ n + from tensorflow . python . ops import gen_count_ops \ n @ @ - 834 , 5 + 836 , 121 @ @ class testsparsecountfailuremodes ( test . testcase ) : \ n + @ test_util . run_all_in_graph_and_eager_modes \ n + @ test_util . disable_tfrt \ n + class rawopstest ( test . testcase , parameterized . testcase ) : \ n + \ n + def testsparsecountsparseoutputbadindicesshape ( self ) : \ n + indices = [ [ [ 0 ] , [ 0 ] ] , [ [ 0 ] , [ 1 ] ] , [ [ 1 ] , [ 0 ] ] , [ [ 1 ] , [ 2 ] ] ] \ n + values = [ 1 , 1 , 1 , 10 ] \ n + weights = [ 1 , 2 , 4 , 6 ] \ n + dense_shape = [ 2 , 3 ] \ n + with self . assertraisesregex ( errors . invalidargumenterror , \ n + ""input indices must be a 2-dimensional tensor"" ) : \ n + self . evaluate ( \ n + gen_count_ops . sparsecountsparseoutput ( \ n + indices = indices , \ n + values = values , \ n + dense_shape = dense_shape , \ n + weights = weights , \ n + binary_output = false ) ) \ n + \ n + def testsparsecountsparseoutputbadweightsshape ( self ) : \ n + indices = [ [ 0 , 0 ] , [ 0 , 1 ] , [ 1 , 0 ] , [ 1 , 2 ] ] \ n + values = [ 1 , 1 , 1 , 10 ] \ n + weights = [ 1 , 2 , 4 ] \ n + dense_shape = [ 2 , 3 ] \ n + with self . assertraisesregex ( errors . invalidargumenterror , \ n + ""weights and values must have the same shape"" ) : \ n + self . evaluate ( \ n + gen_count_ops . sparsecountsparseoutput ( \ n + indices = indices , \ n + values = values , \ n + dense_shape = dense_shape , \ n + weights = weights , \ n + binary_output = false ) ) \ n + \ n + def testsparsecountsparseoutputbadnumberofvalues ( self ) : \ n + indices = [ [ 0 , 0 ] , [ 0 , 1 ] , [ 1 , 0 ] ] \ n + values = [ 1 , 1 , 1 , 10 ] \ n + weights = [ 1 , 2 , 4 , 6 ] \ n + dense_shape = [ 2 , 3 ] \ n + with self . assertraisesregex ( \ n + errors . invalidargumenterror , \ n + ""number of values must match first dimension of indices"" ) : \ n + self . evaluate ( \ n + gen_count_ops . sparsecountsparseoutput ( \ n + indices = indices , \ n + values = values , \ n + dense_shape = dense_shape , \ n + weights = weights , \ n + binary_output = false ) ) \ n + \ n + def testraggedcountsparseoutput ( self ) : \ n + splits = [ 0 , 4 , 7 ] \ n + values = [ 1 , 1 , 2 , 1 , 2 , 10 , 5 ] \ n + weights = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] \ n + output_indices , output_values , output_shape = self . evaluate ( \ n + gen_count_ops . raggedcountsparseoutput ( \ n + splits = splits , values = values , weights = weights , binary_output = false ) ) \ n + self . assertallequal ( [ [ 0 , 1 ] , [ 0 , 2 ] , [ 1 , 2 ] , [ 1 , 5 ] , [ 1 , 10 ] ] , \ n + output_indices ) \ n + self . assertallequal ( [ 7 , 3 , 5 , 7 , 6 ] , output_values ) \ n + self . assertallequal ( [ 2 , 11 ] , output_shape ) \ n + \ n + def testraggedcountsparseoutputbadweightsshape ( self ) : \ n + splits = [ 0 , 4 , 7 ] \ n + values = [ 1 , 1 , 2 , 1 , 2 , 10 , 5 ] \ n + weights = [ 1 , 2 , 3 , 4 , 5 , 6 ] \ n + with self . assertraisesregex ( errors . invalidargumenterror , \ n + ""weights and values must have the same shape"" ) : \ n + self . evaluate ( \ n + gen_count_ops . raggedcountsparseoutput ( \ n + splits = splits , \ n + values = values , \ n + weights = weights , \ n + binary_output = false ) ) \ n + \ n + def testraggedcountsparseoutputemptysplits ( self ) : \ n + splits = [ ] \ n + values = [ 1 , 1 , 2 , 1 , 2 , 10 , 5 ] \ n + weights = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] \ n + with self . assertraisesregex ( \ n + errors . invalidargumenterror , \ n + ""must provide at least 2 elements for the splits argument"" ) : \ n + self . evaluate ( \ n + gen_count_ops . raggedcountsparseoutput ( \ n + splits = splits , \ n + values = values , \ n + weights = weights , \ n + binary_output = false ) ) \ n + \ n + def testraggedcountsparseoutputbadsplitsstart ( self ) : \ n + splits = [ 1 , 7 ] \ n + values = [ 1 , 1 , 2 , 1 , 2 , 10 , 5 ] \ n + weights = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] \ n + with self . assertraisesregex ( errors . invalidargumenterror , \ n + ""splits must start with 0"" ) : \ n + self . evaluate ( \ n + gen_count_ops . raggedcountsparseoutput ( \ n + splits = splits , \ n + values = values , \ n + weights = weights , \ n + binary_output = false ) ) \ n + \ n + def testraggedcountsparseoutputbadsplitsend ( self ) : \ n + splits = [ 0 , 5 ] \ n + values = [ 1 , 1 , 2 , 1 , 2 , 10 , 5 ] \ n + weights = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] \ n + with self . assertraisesregex ( errors . invalidargumenterror , \ n + ""splits must end with the number of values"" ) : \ n + self . evaluate ( \ n + gen_count_ops . raggedcountsparseoutput ( \ n + splits = splits , \ n + values = values , \ n + weights = weights , \ n + binary_output = false ) ) \ n + \ n +"
CVE-2020-1893,['https://github.com/facebook/hhvm/commit/bd586671a3c22eb2f07e55f11b3ce64e1f7961e7'],"('CWE-125', 'Out-of-bounds Read')","Facebook, Inc.",NVD-CVSS2-Other,facebook,hhvm,bd586671a3c22eb2f07e55f11b3ce64e1f7961e7,1,"Insufficient boundary checks when decoding JSON in TryParse reads out of bounds memory , potentially leading to DOS . This issue affects HHVM 4.45.0 , 4.44.0 , 4.43.0 , 4.42.0 , 4.41.0 , 4.40.0 , 4.39.0 , versions between 4.33.0 and 4.38.0 ( inclusive ) , versions between 4.9.0 and 4.32.0 ( inclusive ) , and versions prior to 4.8.7 .","fix a buffer-overrun in simpleparser summary : in the failure case , we might have already consumed the entire string . reviewed by : binliu19 , ottoni differential revision : d19610775 fbshipit-source-id : d387df15994a310f5a31cfbb5fa11679997f7ae7","diff - - git a / hphp / runtime / ext / json / json_parser . cpp b / hphp / runtime / ext / json / json_parser . cpp \ n @ @ - 342 , 8 + 342 , 8 @ @ struct simpleparser { \ n - parser . skipspace ( ) ; \ n - if ( ! ok | | parser . p ! = inp + length ) { \ n + if ( ! ok | | \ n + ( parser . skipspace ( ) , parser . p ! = inp + length ) ) { \ ndiff - - git a / hphp / test / slow / ext_json / decode_crash . php b / hphp / test / slow / ext_json / decode_crash . php \ ndiff - - git a / hphp / test / slow / ext_json / decode_crash . php . expect b / hphp / test / slow / ext_json / decode_crash . php . expect"
CVE-2020-25641,"['https://bugzilla.redhat.com/show_bug.cgi?id=1881424', 'https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7e24969022cbd61ddc586f14824fc205661bb124']","('CWE-835', ""Loop with Unreachable Exit Condition ('Infinite Loop')"")","Red Hat, Inc.",NVD-CVSS2-Other,torvalds,linux,7e24969022cbd61ddc586f14824fc205661bb124,1,"A flaw was found in the Linux kernel 's implementation of biovecs in versions before 5.9-rc7 . A zero-length biovec request issued by the block subsystem could cause the kernel to enter an infinite loop , causing a denial of service . This flaw allows a local attacker with basic privileges to issue requests to a block device , resulting in a denial of service . The highest threat from this vulnerability is to system availability .","block : allow for_each_bvec to support zero len bvec block layer usually does n't support or allow zero-length bvec . since commit 1bdc76aea115 ( `` iov_iter : use bvec iterator to implement iterate_bvec ( ) '' ) , iterate_bvec ( ) switches to bvec iterator . however , al mentioned that 'zero-length segments are not disallowed ' in iov_iter . fixes for_each_bvec ( ) so that it can move on after seeing one zero length bvec . fixes : 1bdc76aea115 ( `` iov_iter : use bvec iterator to implement iterate_bvec ( ) '' ) reported-by : syzbot < syzbot+61acc40a49a3e46e25ea @ syzkaller.appspotmail.com > signed-off-by : ming lei < ming.lei @ redhat.com > tested-by : tetsuo handa < penguin-kernel @ i-love.sakura.ne.jp > cc : al viro < viro @ zeniv.linux.org.uk > cc : matthew wilcox < willy @ infradead.org > cc : < stable @ vger.kernel.org > link : https : //www.mail-archive.com/linux-kernel @ vger.kernel.org/msg2262077.html signed-off-by : jens axboe < axboe @ kernel.dk >","diff - - git a / include / linux / bvec . h b / include / linux / bvec . h \ n @ @ - 117 , 11 + 117 , 18 @ @ static inline bool bvec_iter_advance ( const struct bio_vec * bv , \ n + static inline void bvec_iter_skip_zero_bvec ( struct bvec_iter * iter ) \ n + { \ n + iter - > bi_bvec_done = 0 ; \ n + iter - > bi_idx + + ; \ n + } \ n + \ n - bvec_iter_advance ( ( bio_vec ) , & ( iter ) , ( bvl ) . bv_len ) ) \ n + ( bvl ) . bv_len ? ( void ) bvec_iter_advance ( ( bio_vec ) , & ( iter ) , \ \ n + ( bvl ) . bv_len ) : bvec_iter_skip_zero_bvec ( & ( iter ) ) )"
CVE-2021-33364,"['https://github.com/gpac/gpac/commit/fe5155cf047252d1c4cb91602048bfa682af0ea7', 'https://github.com/gpac/gpac/issues/1783']","('CWE-401', 'Missing Release of Memory after Effective Lifetime')",MITRE,NVD-CVSS2-Other,gpac,gpac,fe5155cf047252d1c4cb91602048bfa682af0ea7,1,Memory leak in the def_parent_box_new function in MP4Box in GPAC 1.0.1 allows attackers to read memory via a crafted file .,fixed # 1783 ( fuzz ),"diff - - git a / src / isomedia / isom_intern . c b / src / isomedia / isom_intern . c \ n @ @ - 497 , 6 + 497 , 7 @ @ static gf_err gf_isom_parse_movie_boxes_internal ( gf_isofile * mov , u32 * boxtype , \ n + gf_isom_box_del ( a ) ;"
CVE-2021-29540,['https://github.com/tensorflow/tensorflow/commit/c570e2ecfc822941335ad48f6e10df4e21f11c96'],"('CWE-120', ""Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')"")","GitHub, Inc.",NVD-CVSS2-Other,tensorflow,tensorflow,c570e2ecfc822941335ad48f6e10df4e21f11c96,1,"TensorFlow is an end-to-end open source platform for machine learning . An attacker can cause a heap buffer overflow to occur in ` Conv2DBackpropFilter ` . This is because the implementation ( https : //github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc # L495-L497 ) computes the size of the filter tensor but does not validate that it matches the number of elements in ` filter_sizes ` . Later , when reading/writing to this buffer , code uses the value computed here , instead of the number of elements in the tensor . The fix will be included in TensorFlow 2.5.0 . We will also cherrypick this commit on TensorFlow 2.4.2 , TensorFlow 2.3.3 , TensorFlow 2.2.3 and TensorFlow 2.1.4 , as these are also affected and still in supported range .",fix issues in conv2dbackpropfilter . piperorigin-revid : 369772454 change-id : i49b465f2ae2ce91def61b56cea8000197d5177d8,"diff - - git a / tensorflow / core / kernels / conv_grad_filter_ops . cc b / tensorflow / core / kernels / conv_grad_filter_ops . cc \ n @ @ - 495 , 6 + 495 , 14 @ @ class conv2dcustombackpropfilterop : public opkernel { \ n + op_requires ( \ n + context , \ n + filter_total_size * dims . out_depth = = filter_backprop - > numelements ( ) , \ n + errors : : invalidargument ( \ n + ""filter_size does not have enough elements, requested "" , \ n + filter_total_size * dims . out_depth , "", got "" , \ n + filter_backprop - > numelements ( ) ) ) ; \ n + \ n @ @ - 518 , 6 + 526 , 11 @ @ class conv2dcustombackpropfilterop : public opkernel { \ n + op_requires ( \ n + context , work_unit_size ! = 0 , \ n + errors : : invalidargument ( \ n + ""work size for convolution would be 0, which is not acceptable"" ) ) ; \ n +"
CVE-2021-32134,['https://github.com/gpac/gpac/commit/328c6d682698fdb9878dbb4f282963d42c538c01'],"('CWE-476', 'NULL Pointer Dereference')",MITRE,NVD-CVSS2-Other,gpac,gpac,328c6d682698fdb9878dbb4f282963d42c538c01,1,The gf_odf_desc_copy function in GPAC 1.0.1 allows attackers to cause a denial of service ( NULL pointer dereference ) via a crafted file in the MP4Box command .,fixed # 1756,"diff - - git a / src / isomedia / box_code_base . c b / src / isomedia / box_code_base . c \ n @ @ - 4111 , 7 + 4111 , 6 @ @ gf_box * mp4s_box_new ( ) \ n - tmp - > internal_type = gf_isom_sample_entry_mp4s ; \ n @ @ - 4119 , 7 + 4118 , 6 @ @ gf_box * encs_box_new ( ) \ n - tmp - > internal_type = gf_isom_sample_entry_mp4s ; \ ndiff - - git a / src / isomedia / media . c b / src / isomedia / media . c \ n @ @ - 181 , 8 + 181 , 11 @ @ gf_err media_getesd ( gf_mediabox * mdia , u32 sampledescindex , gf_esd * * out_esd , bo \ n + \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_video ) \ n + return gf_isom_invalid_media ; \ n @ @ - 202 , 10 + 205 , 14 @ @ gf_err media_getesd ( gf_mediabox * mdia , u32 sampledescindex , gf_esd * * out_esd , bo \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_video ) \ n + return gf_isom_invalid_media ; \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_video ) \ n + return gf_isom_invalid_media ; \ n @ @ - 214 , 6 + 221 , 8 @ @ gf_err media_getesd ( gf_mediabox * mdia , u32 sampledescindex , gf_esd * * out_esd , bo \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_video ) \ n + return gf_isom_invalid_media ; \ n @ @ - 221 , 15 + 230 , 21 @ @ gf_err media_getesd ( gf_mediabox * mdia , u32 sampledescindex , gf_esd * * out_esd , bo \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_video ) \ n + return gf_isom_invalid_media ; \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_video ) \ n + return gf_isom_invalid_media ; \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_audio ) \ n + return gf_isom_invalid_media ; \ n @ @ - 270 , 6 + 285 , 9 @ @ gf_err media_getesd ( gf_mediabox * mdia , u32 sampledescindex , gf_esd * * out_esd , bo \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_mp4s ) \ n + return gf_isom_invalid_media ; \ n + \ n @ @ - 280 , 6 + 298 , 8 @ @ gf_err media_getesd ( gf_mediabox * mdia , u32 sampledescindex , gf_esd * * out_esd , bo \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_mp4s ) \ n + return gf_isom_invalid_media ; \ n @ @ - 304 , 13 + 324 , 18 @ @ gf_err media_getesd ( gf_mediabox * mdia , u32 sampledescindex , gf_esd * * out_esd , bo \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_audio ) \ n + return gf_isom_invalid_media ; \ n - case gf_isom_subtype_opus : { \ n + case gf_isom_subtype_opus : \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_audio ) \ n + return gf_isom_invalid_media ; \ n + { \ n @ @ - 331 , 6 + 356 , 8 @ @ gf_err media_getesd ( gf_mediabox * mdia , u32 sampledescindex , gf_esd * * out_esd , bo \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_video ) \ n + return gf_isom_invalid_media ; \ n @ @ - 342 , 6 + 369 , 8 @ @ gf_err media_getesd ( gf_mediabox * mdia , u32 sampledescindex , gf_esd * * out_esd , bo \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_audio ) \ n + return gf_isom_invalid_media ; \ n @ @ - 353 , 6 + 382 , 8 @ @ gf_err media_getesd ( gf_mediabox * mdia , u32 sampledescindex , gf_esd * * out_esd , bo \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_mp4s ) \ n + return gf_isom_invalid_media ; \ n @ @ - 371 , 6 + 402 , 9 @ @ gf_err media_getesd ( gf_mediabox * mdia , u32 sampledescindex , gf_esd * * out_esd , bo \ n + if ( entry - > internal_type ! = gf_isom_sample_entry_audio ) \ n + return gf_isom_invalid_media ; \ n + \ ndiff - - git a / src / isomedia / sample_descs . c b / src / isomedia / sample_descs . c \ n @ @ - 45 , 6 + 45 , 7 @ @ void gf_isom_sample_entry_predestroy ( gf_sampleentrybox * ptr ) \ n + ent - > internal_type = gf_isom_sample_entry_mp4s ;"
CVE-2021-32138,"['https://github.com/gpac/gpac/commit/289ffce3e0d224d314f5f92a744d5fe35999f20b', 'https://github.com/gpac/gpac/issues/1767']","('CWE-476', 'NULL Pointer Dereference')",MITRE,NVD-CVSS2-Other,gpac,gpac,289ffce3e0d224d314f5f92a744d5fe35999f20b,1,The DumpTrackInfo function in GPAC 1.0.1 allows attackers to cause a denial of service ( NULL pointer dereference ) via a crafted file in the MP4Box command .,fixed # 1767 ( fuzz ),"diff - - git a / applications / mp4box / filedump . c b / applications / mp4box / filedump . c \ n @ @ - 2880 , 23 + 2880 , 27 @ @ void dumptrackinfo ( gf_isofile * file , gf_isotrackid trackid , bool full_dump , bool \ n - fprintf ( stderr , ""\tversion=%u, profile=%u, level_idx0=%u, tier=%u\n"" , ( u32 ) av1c - > version , ( u32 ) av1c - > seq_profile , ( u32 ) av1c - > seq_level_idx_0 , ( u32 ) av1c - > seq_tier_0 ) ; \ n - fprintf ( stderr , ""\thigh_bitdepth=%u, twelve_bit=%u, monochrome=%u\n"" , ( u32 ) av1c - > high_bitdepth , ( u32 ) av1c - > twelve_bit , ( u32 ) av1c - > monochrome ) ; \ n - fprintf ( stderr , ""\tchroma: subsampling_x=%u, subsampling_y=%u, sample_position=%u\n"" , ( u32 ) av1c - > chroma_subsampling_x , ( u32 ) av1c - > chroma_subsampling_y , ( u32 ) av1c - > chroma_sample_position ) ; \ n + if ( ! av1c ) { \ n + fprintf ( stderr , ""\tcorrupted av1 config\n"" ) ; \ n + } else { \ n + fprintf ( stderr , ""\tversion=%u, profile=%u, level_idx0=%u, tier=%u\n"" , ( u32 ) av1c - > version , ( u32 ) av1c - > seq_profile , ( u32 ) av1c - > seq_level_idx_0 , ( u32 ) av1c - > seq_tier_0 ) ; \ n + fprintf ( stderr , ""\thigh_bitdepth=%u, twelve_bit=%u, monochrome=%u\n"" , ( u32 ) av1c - > high_bitdepth , ( u32 ) av1c - > twelve_bit , ( u32 ) av1c - > monochrome ) ; \ n + fprintf ( stderr , ""\tchroma: subsampling_x=%u, subsampling_y=%u, sample_position=%u\n"" , ( u32 ) av1c - > chroma_subsampling_x , ( u32 ) av1c - > chroma_subsampling_y , ( u32 ) av1c - > chroma_sample_position ) ; \ n - if ( av1c - > initial_presentation_delay_present ) \ n - fprintf ( stderr , ""\tinitial presentation delay %u\n"" , ( u32 ) av1c - > initial_presentation_delay_minus_one + 1 ) ; \ n + if ( av1c - > initial_presentation_delay_present ) \ n + fprintf ( stderr , ""\tinitial presentation delay %u\n"" , ( u32 ) av1c - > initial_presentation_delay_minus_one + 1 ) ; \ n - count = gf_list_count ( av1c - > obu_array ) ; \ n - for ( i = 0 ; i < count ; i + + ) { \ n - u8 hash [ 20 ] ; \ n - gf_av1_obuarrayentry * obu = gf_list_get ( av1c - > obu_array , i ) ; \ n - gf_sha1_csum ( ( u8 * ) obu - > obu , ( u32 ) obu - > obu_length , hash ) ; \ n - fprintf ( stderr , ""\tobu#%d %s hash: "" , i + 1 , gf_av1_get_obu_name ( obu - > obu_type ) ) ; \ n - for ( j = 0 ; j < 20 ; j + + ) fprintf ( stderr , ""%02x"" , hash [ j ] ) ; \ n - fprintf ( stderr , ""\n"" ) ; \ n + count = gf_list_count ( av1c - > obu_array ) ; \ n + for ( i = 0 ; i < count ; i + + ) { \ n + u8 hash [ 20 ] ; \ n + gf_av1_obuarrayentry * obu = gf_list_get ( av1c - > obu_array , i ) ; \ n + gf_sha1_csum ( ( u8 * ) obu - > obu , ( u32 ) obu - > obu_length , hash ) ; \ n + fprintf ( stderr , ""\tobu#%d %s hash: "" , i + 1 , gf_av1_get_obu_name ( obu - > obu_type ) ) ; \ n + for ( j = 0 ; j < 20 ; j + + ) fprintf ( stderr , ""%02x"" , hash [ j ] ) ; \ n + fprintf ( stderr , ""\n"" ) ; \ n + } \ n + gf_odf_av1_cfg_del ( av1c ) ; \ n - gf_odf_av1_cfg_del ( av1c ) ;"
CVE-2021-33366,"['https://github.com/gpac/gpac/commit/0a85029d694f992f3631e2f249e4999daee15cbf', 'https://github.com/gpac/gpac/issues/1785']","('CWE-401', 'Missing Release of Memory after Effective Lifetime')",MITRE,NVD-CVSS2-Other,gpac,gpac,0a85029d694f992f3631e2f249e4999daee15cbf,1,Memory leak in the gf_isom_oinf_read_entry function in MP4Box in GPAC 1.0.1 allows attackers to read memory via a crafted file .,fixed # 1785 ( fuzz ),"diff - - git a / src / isomedia / avc_ext . c b / src / isomedia / avc_ext . c \ n @ @ - 3373 , 8 + 3373 , 10 @ @ gf_err gf_isom_oinf_read_entry ( void * entry , gf_bitstream * bs ) \ n - if ( op - > layer_count > gf_array_length ( op - > layers_info ) ) \ n + if ( op - > layer_count > gf_array_length ( op - > layers_info ) ) { \ n + gf_free ( op ) ; \ n + }"
CVE-2021-29588,"['https://github.com/tensorflow/tensorflow/commit/801c1c6be5324219689c98e1bd3e0ca365ee834d', 'https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vfr4-x8j2-3rf9']","('CWE-369', 'Divide By Zero')","GitHub, Inc.",NVD-CVSS2-Other,tensorflow,tensorflow,801c1c6be5324219689c98e1bd3e0ca365ee834d,1,"TensorFlow is an end-to-end open source platform for machine learning . The optimized implementation of the ` TransposeConv ` TFLite operator is [ vulnerable to a division by zero error ] ( https : //github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/optimized/optimized_ops.h # L5221-L5222 ) . An attacker can craft a model such that ` stride_ { h , w } ` values are 0 . Code calling this function must validate these arguments . The fix will be included in TensorFlow 2.5.0 . We will also cherrypick this commit on TensorFlow 2.4.2 , TensorFlow 2.3.3 , TensorFlow 2.2.3 and TensorFlow 2.1.4 , as these are also affected and still in supported range .",fix another division by 0 in tflite piperorigin-revid : 370800181 change-id : i924809166a6131f5075e6d45c455106538d755f9,"diff - - git a / tensorflow / lite / kernels / transpose_conv . cc b / tensorflow / lite / kernels / transpose_conv . cc \ n @ @ - 591 , 6 + 591 , 10 @ @ tflitestatus eval ( tflitecontext * context , tflitenode * node ) { \ n + // prevent divisions by 0\n+  tf_lite_ensure(context, params->stride_height > 0);\n+  tf_lite_ensure(context, params->stride_width > 0);\n+"
CVE-2021-32137,['https://github.com/gpac/gpac/commit/328def7d3b93847d64ecb6e9e0399684e57c3eca'],"('CWE-787', 'Out-of-bounds Write')",MITRE,NVD-CVSS2-Other,gpac,gpac,328def7d3b93847d64ecb6e9e0399684e57c3eca,1,Heap buffer overflow in the URL_GetProtocolType function in MP4Box in GPAC 1.0.1 allows attackers to cause a denial of service or execute arbitrary code via a crafted file .,fixed # 1766 ( fuzz ),"diff - - git a / src / isomedia / media . c b / src / isomedia / media . c \ n @ @ - 674 , 7 + 674 , 6 @ @ gf_err media_getsample ( gf_mediabox * mdia , u32 samplenumber , gf_isosample * * samp , \ n - \ n @ @ - 685 , 8 + 684 , 10 @ @ gf_err media_checkdataentry ( gf_mediabox * mdia , u32 dataentryindex ) \ n - //we don't know what's a urn yet\n-	if (entry->type == gf_isom_box_type_urn) return gf_not_supported;\n+	//we only support alias and url boxes\n+	if ((entry->type != gf_isom_box_type_url) && (entry->type != gf_qt_box_type_alis) )\n+		return gf_not_supported;\n+"
CVE-2021-37600,['https://github.com/karelzak/util-linux/commit/1c9143d0c1f979c3daf10e1c37b5b1e916c22a1c'],"('CWE-190', 'Integer Overflow or Wraparound')",MITRE,NVD-CVSS2-Other,karelzak,util-linux,1c9143d0c1f979c3daf10e1c37b5b1e916c22a1c,1,"* * DISPUTED * * An integer overflow in util-linux through 2.37.1 can potentially cause a buffer overflow if an attacker were able to use system resources in a way that leads to a large number in the /proc/sysvipc/sem file . NOTE : this is unexploitable in GNU C Library environments , and possibly in all realistic environments .",sys-utils/ipcutils : be careful when call calloc ( ) for uint64 nmembs fix : https : //github.com/karelzak/util-linux/issues/1395 signed-off-by : karel zak < kzak @ redhat.com >,"diff - - git a / sys - utils / ipcutils . c b / sys - utils / ipcutils . c \ n @ @ - 218 , 7 + 218 , 7 @ @ static void get_sem_elements ( struct sem_data * p ) \ n - if ( ! p | | ! p - > sem_nsems | | p - > sem_perm . id < 0 ) \ n + if ( ! p | | ! p - > sem_nsems | | p - > sem_nsems > size_max | | p - > sem_perm . id < 0 )"
CVE-2021-37654,['https://github.com/tensorflow/tensorflow/commit/bc9c546ce7015c57c2f15c168b3d9201de679a1d'],"('CWE-125', 'Out-of-bounds Read')","GitHub, Inc.",NVD-CVSS2-Other,tensorflow,tensorflow,bc9c546ce7015c57c2f15c168b3d9201de679a1d,1,"TensorFlow is an end-to-end open source platform for machine learning . In affected versions an attacker can trigger a crash via a ` CHECK ` -fail in debug builds of TensorFlow using ` tf.raw_ops.ResourceGather ` or a read from outside the bounds of heap allocated data in the same API in a release build . The [ implementation ] ( https : //github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc # L660-L668 ) does not check that the ` batch_dims ` value that the user supplies is less than the rank of the input tensor . Since the implementation uses several for loops over the dimensions of ` tensor ` , this results in reading data from outside the bounds of heap allocated buffer backing the tensor . We have patched the issue in GitHub commit bc9c546ce7015c57c2f15c168b3d9201de679a1d . The fix will be included in TensorFlow 2.6.0 . We will also cherrypick this commit on TensorFlow 2.5.1 , TensorFlow 2.4.3 , and TensorFlow 2.3.4 , as these are also affected and still in supported range .",prevent heap oob access in ` resource_variable_ops.cc ` piperorigin-revid : 387936433 change-id : i9e71ddaa8dbd51ec6afbf163a6b3b591f193b4f6,"diff - - git a / tensorflow / core / kernels / resource_variable_ops . cc b / tensorflow / core / kernels / resource_variable_ops . cc \ n @ @ - 660 , 6 + 660 , 11 @ @ class resourcegatherop : public opkernel { \ n + op_requires ( \ n + c , params . shape ( ) . dims ( ) > = batch_dims_ , \ n + errors : : invalidargument ( ""params must have at least "" , batch_dims_ , \ n + "" (batch_dims) dimensions but it has shape "" , \ n + params . shape ( ) . debugstring ( ) ) ) ;"
CVE-2021-44109,['https://github.com/open5gs/open5gs/commit/d919b2744cd05abae043490f0a3dd1946c1ccb8c'],"('CWE-787', 'Out-of-bounds Write')",MITRE,NVD-CVSS2-Other,open5gs,open5gs,d919b2744cd05abae043490f0a3dd1946c1ccb8c,1,A buffer overflow in lib/sbi/message.c in Open5GS 2.3.6 and earlier allows remote attackers to Denial of Service via a crafted sbi request .,[ amf ] fix the memory problem ( # 1247 ) 1. memory corruption - overflow num_of_part in sbi message 2. null pointer dereference - n2infocontent- > ngap_ie_type,"- overflow num_of_part in sbi message \ n - n2infocontent - > ngap_ie_type \ ndiff - - git a / lib / sbi / message . c b / lib / sbi / message . c \ n @ @ - 924 , 7 + 924 , 7 @ @ static int parse_json ( ogs_sbi_message_t * message , \ n - ogs_error ( ""json parse error"" ) ; \ n + ogs_error ( ""json parse error [%s]"" , json ) ; \ n @ @ - 1833 , 18 + 1833 , 16 @ @ static int on_header_value ( \ n - if ( at & & length ) { \ n + if ( data - > num_of_part < ogs_sbi_max_num_of_part & & at & & length ) { \ n - if ( data - > part [ data - > num_of_part ] . content_type ) \ n - ogs_free ( data - > part [ data - > num_of_part ] . content_type ) ; \ n + ogs_assert ( data - > part [ data - > num_of_part ] . content_type = = null ) ; \ n - if ( data - > part [ data - > num_of_part ] . content_id ) \ n - ogs_free ( data - > part [ data - > num_of_part ] . content_id ) ; \ n + ogs_assert ( data - > part [ data - > num_of_part ] . content_id = = null ) ; \ n @ @ - 1867 , 7 + 1865 , 7 @ @ static int on_part_data ( \ n - if ( at & & length ) { \ n + if ( data - > num_of_part < ogs_sbi_max_num_of_part & & at & & length ) { \ n @ @ - 1901 , 9 + 1899 , 9 @ @ static int on_part_data ( \ n - ogs_log_hexdump ( ogs_log_fatal , ( unsigned char * ) at , length ) ; \ n + ogs_log_hexdump ( ogs_log_error , ( unsigned char * ) at , length ) ; \ n @ @ - 1917 , 7 + 1915 , 9 @ @ static int on_part_data_end ( multipart_parser * parser ) \ n - data - > num_of_part + + ; \ n + if ( data - > num_of_part < ogs_sbi_max_num_of_part ) { \ n + data - > num_of_part + + ; \ n + } \ n @ @ - 1967 , 6 + 1967 , 11 @ @ static int parse_multipart ( \ n + if ( data . num_of_part > ogs_sbi_max_num_of_part ) { \ n + /* overflow issues #1247 */ \ n + ogs_fatal ( ""overflow num_of_part[%d]"" , data . num_of_part ) ; \ n + ogs_assert_if_reached ( ) ; \ n + } \ n @ @ - 2013 , 14 + 2018 , 14 @ @ static int parse_multipart ( \ n + \ n + if ( data . part [ i ] . content_id ) \ n + ogs_free ( data . part [ i ] . content_id ) ; \ n + if ( data . part [ i ] . content_type ) \ n + ogs_free ( data . part [ i ] . content_type ) ; \ n - if ( data . part [ i ] . content_id ) \ n - ogs_free ( data . part [ i ] . content_id ) ; \ n - if ( data . part [ i ] . content_type ) \ n - ogs_free ( data . part [ i ] . content_type ) ; \ n - \ ndiff - - git a / src / amf / namf - handler . c b / src / amf / namf - handler . c \ n @ @ - 53 , 6 + 53 , 8 @ @ int amf_namf_comm_handle_n1_n2_message_transfer ( \ n + openapi_ngap_ie_type_e ngapietype = openapi_ngap_ie_type_null ; \ n + \ n @ @ - 117 , 12 + 119 , 15 @ @ int amf_namf_comm_handle_n1_n2_message_transfer ( \ n + \ n + ngapietype = n2infocontent - > ngap_ie_type ; \ n + \ n @ @ - 153 , 7 + 158 , 7 @ @ int amf_namf_comm_handle_n1_n2_message_transfer ( \ n - switch ( n2infocontent - > ngap_ie_type ) { \ n + switch ( ngapietype ) { \ n @ @ - 390 , 8 + 395 , 7 @ @ int amf_namf_comm_handle_n1_n2_message_transfer ( \ n - ogs_error ( ""not implemented ngap_ie_type[%d]"" , \ n - n2infocontent - > ngap_ie_type ) ; \ n + ogs_error ( ""not implemented ngapietype[%d]"" , ngapietype ) ;"
CVE-2021-37639,['https://github.com/tensorflow/tensorflow/commit/9e82dce6e6bd1f36a57e08fa85af213e2b2f2622'],"('CWE-125', 'Out-of-bounds Read')","GitHub, Inc.",NVD-CVSS2-Other,tensorflow,tensorflow,9e82dce6e6bd1f36a57e08fa85af213e2b2f2622,1,"TensorFlow is an end-to-end open source platform for machine learning . When restoring tensors via raw APIs , if the tensor name is not provided , TensorFlow can be tricked into dereferencing a null pointer . Alternatively , attackers can read memory outside the bounds of heap allocated data by providing some tensor names but not enough for a successful restoration . The [ implementation ] ( https : //github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/save_restore_tensor.cc # L158-L159 ) retrieves the tensor list corresponding to the ` tensor_name ` user controlled input and immediately retrieves the tensor at the restoration index ( controlled via ` preferred_shard ` argument ) . This occurs without validating that the provided list has enough values . If the list is empty this results in dereferencing a null pointer ( undefined behavior ) . If , however , the list has some elements , if the restoration index is outside the bounds this results in heap OOB read . We have patched the issue in GitHub commit 9e82dce6e6bd1f36a57e08fa85af213e2b2f2622 . The fix will be included in TensorFlow 2.6.0 . We will also cherrypick this commit on TensorFlow 2.5.1 , TensorFlow 2.4.3 , and TensorFlow 2.3.4 , as these are also affected and still in supported range .",fix npe in restoring code . piperorigin-revid : 388303253 change-id : ia8c68568cb854bca538909a182b31a618d68ce55,"diff - - git a / tensorflow / core / kernels / save_restore_tensor . cc b / tensorflow / core / kernels / save_restore_tensor . cc \ n @ @ - 151 , 11 + 151 , 18 @ @ void restoretensor ( opkernelcontext * context , \ n - size , ""elements"" ) ) ; \ n + size , "" elements"" ) ) ; \ n + { \ n + const int64_t size = tensor_name_t . numelements ( ) ; \ n + op_requires ( context , size > restore_index , \ n + errors : : invalidargument ( \ n + ""input 1 (file_pattern) must be a have at least "" , \ n + restore_index + 1 , "" elements"" ) ) ; \ n + }"
CVE-2021-3778,"['https://github.com/vim/vim/commit/65b605665997fad54ef39a93199e305af2fe4d7f', 'https://huntr.dev/bounties/d9c17308-2c99-4f9f-a706-f7f72c24c273']","('CWE-122', 'Heap-based Buffer Overflow')",huntr.dev,NVD-CVSS2-Other,vim,vim,65b605665997fad54ef39a93199e305af2fe4d7f,1,vim is vulnerable to Heap-based Buffer Overflow,patch 8.2.3409 : reading beyond end of line with invalid utf-8 character problem : reading beyond end of line with invalid utf-8 character . solution : check for nul when advancing .,"diff - - git a / src / regexp_nfa . c b / src / regexp_nfa . c \ n @ @ - 5664 , 7 + 5664 , 8 @ @ find_match_text ( colnr_t startcol , int regstart , char_u * match_text ) \ n - len2 + = mb_char2len ( c2 ) ; \ n + len2 + = enc_utf8 ? utf_ptr2len ( rex . line + col + len2 ) \ n + : mb_char2len ( c2 ) ; \ ndiff - - git a / src / testdir / test_regexp_utf8 . vim b / src / testdir / test_regexp_utf8 . vim \ n @ @ - 558 , 4 + 558 , 12 @ @ func test_match_char_class_upper ( ) \ n + func test_match_invalid_byte ( ) \ n + call writefile ( 0z630a . 765d30aa0a . 2e0a . 790a . 4030 , 'xinvalid' ) \ n + new \ n + source xinvalid \ n + bwipe ! \ n + call delete ( 'xinvalid' ) \ n + endfunc \ n + \ ndiff - - git a / src / version . c b / src / version . c \ n @ @ - 755 , 6 + 755 , 8 @ @ static char * ( features [ ] ) = \ n + /**/ \ n + 3409 ,"
CVE-2021-40562,['https://github.com/gpac/gpac/commit/5dd71c7201a3e5cf40732d585bfb21c906c171d3'],"('CWE-697', 'Incorrect Comparison')",MITRE,NVD-CVSS2-Other,gpac,gpac,5dd71c7201a3e5cf40732d585bfb21c906c171d3,1,"A Segmentation fault caused by a floating point exception exists in Gpac through 1.0.1 using mp4box via the naludmx_enqueue_or_dispatch function in reframe_nalu.c , which causes a denial of service .",fixed # 1901,"diff - - git a / src / filters / reframe_nalu . c b / src / filters / reframe_nalu . c \ n @ @ - 1352 , 9 + 1352 , 9 @ @ void naludmx_create_avc_decoder_config ( gf_naludmxctx * ctx , u8 * * dsi , u32 * dsi_si \ n - if ( ! ctx - > timescale ) { \ n + if ( ! ctx - > timescale & & sps - > vui . time_scale & & sps - > vui . num_units_in_tick ) { \ n - ctx - > cur_fps . den = 2 * sps - > vui . num_units_in_tick * deltatfidivisoridx ; \ n + ctx - > cur_fps . den = 2 * sps - > vui . num_units_in_tick * deltatfidivisoridx ;"
CVE-2021-38597,['https://github.com/wolfSSL/wolfssl/commit/f93083be72a3b3d956b52a7ec13f307a27b6e093'],"('CWE-345', 'Insufficient Verification of Data Authenticity')",MITRE,NVD-CVSS2-Other,wolfSSL,wolfssl,f93083be72a3b3d956b52a7ec13f307a27b6e093,1,wolfSSL before 4.8.1 incorrectly skips OCSP verification in certain situations of irrelevant response data that contains the NoCheck extension .,ocsp : improve handling of ocsp no check extension,"diff - - git a / wolfcrypt / src / asn . c b / wolfcrypt / src / asn . c \ n @ @ - 10212 , 9 + 10212 , 13 @ @ int parsecertrelative ( decodedcert * cert , int type , int verify , void * cm ) \ n - /* trust for the lifetime of the responder's cert*/ \ n - if ( cert - > ocspnocheckset & & verify = = verify_ocsp ) \ n - verify = no_verify ; \ n + if ( verify = = verify_ocsp_cert ) { \ n + /* trust for the lifetime of the responder's cert*/ \ n + if ( cert - > ocspnocheckset ) \ n + verify = verify ; \ n + else \ n + verify = verify_ocsp ; \ n + } \ n @ @ - 17957 , 7 + 17961 , 7 @ @ static int decodebasicocspresponse ( byte * source , word32 * ioindex , \ n - noverify ? no_verify : verify_ocsp , cm ) ; \ n + noverify ? no_verify : verify_ocsp_cert , cm ) ; \ ndiff - - git a / wolfssl / wolfcrypt / asn . h b / wolfssl / wolfcrypt / asn . h \ n @ @ - 599 , 6 + 599 , 7 @ @ enum verifytype { \ n + verify_ocsp_cert = 6 ,"
CVE-2021-3962,"['https://bugzilla.redhat.com/show_bug.cgi?id=2023196', 'https://github.com/ImageMagick/ImageMagick/commit/82775af03bbb10a0a1d0e15c0156c75673b4525e']","('CWE-416', 'Use After Free')","Red Hat, Inc.",NVD-CVSS2-Other,ImageMagick,ImageMagick,82775af03bbb10a0a1d0e15c0156c75673b4525e,1,"A flaw was found in ImageMagick where it did not properly sanitize certain input before using it to invoke convert processes . This flaw allows an attacker to create a specially crafted image that leads to a use-after-free vulnerability when processed by ImageMagick . The highest threat from this vulnerability is to confidentiality , integrity , as well as system availability .",moved the free to the correct position to fix # 4446 .,"diff - - git a / coders / dcm . c b / coders / dcm . c \ n @ @ - 3996 , 10 + 3996 , 11 @ @ static image * readdcmimage ( const imageinfo * image_info , exceptioninfo * exception ) \ n - relinquishdcmmemory ( & info , & map , stream_info , stack , data ) ; \ n + else \ n + relinquishdcmmemory ( & info , & map , stream_info , stack , data ) ;"
CVE-2022-0080,"['https://github.com/mruby/mruby/commit/28ccc664e5dcd3f9d55173e9afde77c4705a9ab6', 'https://huntr.dev/bounties/59a70392-4864-4ce3-8e35-6ac2111d1e2e']","('CWE-122', 'Heap-based Buffer Overflow')",huntr.dev,NVD-CVSS2-Other,mruby,mruby,28ccc664e5dcd3f9d55173e9afde77c4705a9ab6,1,mruby is vulnerable to Heap-based Buffer Overflow,proc.c : should not reference ` irep ` when copying failed . it may cause broken reference count numbers .,"diff - - git a / src / proc . c b / src / proc . c \ n @ @ - 207 , 12 + 207 , 12 @ @ mrb_proc_copy ( mrb_state * mrb , struct rproc * a , struct rproc * b ) \ n + if ( ! mrb_proc_cfunc_p ( b ) & & b - > body . irep ) { \ n + mrb_irep_incref ( mrb , ( mrb_irep * ) b - > body . irep ) ; \ n + } \ n - if ( ! mrb_proc_cfunc_p ( a ) & & a - > body . irep ) { \ n - mrb_irep_incref ( mrb , ( mrb_irep * ) a - > body . irep ) ; \ n - }"
CVE-2022-0139,"['https://github.com/radareorg/radare2/commit/37897226a1a31f982bfefdc4aeefc2e50355c73c', 'https://huntr.dev/bounties/3dcb6f40-45cd-403b-929f-db123fde32c0']","('CWE-416', 'Use After Free')",huntr.dev,NVD-CVSS2-Other,radareorg,radare2,37897226a1a31f982bfefdc4aeefc2e50355c73c,1,Use After Free in GitHub repository radareorg/radare2 prior to 5.6.0 .,fix use-after-free in iobank rbtree usage # # io * see havoc4 bin for reproducer * reported via huntr.dev by 'cen zhang ',"diff - - git a / libr / io / io_bank . c b / libr / io / io_bank . c \ n @ @ - 230 , 7 + 230 , 10 @ @ r_api bool r_io_bank_map_add_top ( rio * io , const ut32 bankid , const ut32 mapid ) { \ n - r_crbtree_delete ( bank - > submaps , entry - > data , _find_sm_by_from_vaddr_cb , null ) ; \ n + bool a = r_crbtree_delete ( bank - > submaps , entry - > data , _find_sm_by_from_vaddr_cb , null ) ; \ n + if ( ! a ) { \ n + break ; \ n + }"
CVE-2021-41227,"['https://github.com/tensorflow/tensorflow/commit/1cb6bb6c2a6019417c9adaf9e6843ba75ee2580b', 'https://github.com/tensorflow/tensorflow/commit/3712a2d3455e6ccb924daa5724a3652a86f6b585', 'https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j8c8-67vp-6mx7']","('CWE-125', 'Out-of-bounds Read')","GitHub, Inc.",NVD-CVSS2-Other,tensorflow,tensorflow,3712a2d3455e6ccb924daa5724a3652a86f6b585,1,"TensorFlow is an open source platform for machine learning . In affected versions the ` ImmutableConst ` operation in TensorFlow can be tricked into reading arbitrary memory contents . This is because the ` tstring ` TensorFlow string class has a special case for memory mapped strings but the operation itself does not offer any support for this datatype . The fix will be included in TensorFlow 2.7.0 . We will also cherrypick this commit on TensorFlow 2.6.1 , TensorFlow 2.5.2 , and TensorFlow 2.4.4 , as these are also affected and still in supported range .","fix macros for converting little endian to host for tf_tsrt_offset getsize make the macro that converts little endian data do nothing on little endian hosts , and byte swap otherwise . this only affects getting the size of tstrings of type `` offset '' . added a test for tstrings of type `` offset '' that checks if type and size are consistent . piperorigin-revid : 400789721 change-id : i1398bffd842ab1631614b212b7c3a2af88d99538","diff - - git a / tensorflow / core / platform / ctstring_internal . h b / tensorflow / core / platform / ctstring_internal . h \ n @ @ - 63 , 9 + 63 , 9 @ @ static inline uint32_t tf_swap32 ( uint32_t host_int ) { \ n - #define tf_le32toh(x) tf_swap32(x)\n-#else  // tf_tstring_little_endian\n+#else  // tf_tstring_little_endian\n+#define tf_le32toh(x) tf_swap32(x)\ndiff --git a/tensorflow/core/platform/ctstring_test.cc b/tensorflow/core/platform/ctstring_test.cc\n@@ -18,6 +18,7 @@ limitations under the license.\n+#include ""tensorflow/core/platform/ctstring_internal.h""\n@@ -380,3 +381,29 @@ test(tf_ctstringtest, resizereserve) {\n+\n+test(tf_ctstringtest, offsettype) {\n+  {\n+    tf_tstring s71;\n+\n+    tf_tstring_init(&s71);\n+    size_t header_length = 24;\n+    size_t size = 8;\n+    tf_tstring_resizeuninitialized(&s71, header_length + size);\n+    uint32_t save_size = s71.u.offset.size;\n+    uint32_t save_offset = s71.u.offset.offset;\n+    uint32_t save_count = s71.u.offset.count;\n+\n+    s71.u.offset.size = tf_tstring_tointernalsizet(size, tf_tstr_offset);\n+    s71.u.offset.offset = header_length;\n+    s71.u.offset.count = 0;\n+    expect_eq(size, tf_tstring_getsize(&s71));\n+    expect_eq(tf_tstr_offset, tf_tstring_gettype(&s71));\n+\n+    // restore state so string can be deallocated\n+    s71.u.offset.size = save_size;\n+    s71.u.offset.offset = save_offset;\n+    s71.u.offset.count = save_count;\n+    tf_tstring_dealloc(&s71);\n+  }\n+}"
CVE-2021-41197,"['https://github.com/tensorflow/tensorflow/commit/7c1692bd417eb4f9b33ead749a41166d6080af85', 'https://github.com/tensorflow/tensorflow/commit/a871989d7b6c18cdebf2fb4f0e5c5b62fbc19edf', 'https://github.com/tensorflow/tensorflow/commit/d81b1351da3e8c884ff836b64458d94e4a157c15', 'https://github.com/tensorflow/tensorflow/security/advisories/GHSA-prcg-wp5q-rv7p']","('CWE-190', 'Integer Overflow or Wraparound')","GitHub, Inc.",NVD-CVSS2-Other,tensorflow,tensorflow,d81b1351da3e8c884ff836b64458d94e4a157c15,1,"TensorFlow is an open source platform for machine learning . In affected versions TensorFlow allows tensor to have a large number of dimensions and each dimension can be as large as desired . However , the total number of elements in a tensor must fit within an ` int64_t ` . If an overflow occurs , ` MultiplyWithoutOverflow ` would return a negative result . In the majority of TensorFlow codebase this then results in a ` CHECK ` -failure . Newer constructs exist which return a ` Status ` instead of crashing the binary . This is similar to CVE-2021-29584 . The fix will be included in TensorFlow 2.7.0 . We will also cherrypick this commit on TensorFlow 2.6.1 , TensorFlow 2.5.2 , and TensorFlow 2.4.4 , as these are also affected and still in supported range .",merge pull request # 51717 from yongtang:46890-tf.image.pad_to_bounding_box piperorigin-revid : 398351034 change-id : ia11abe3ab57683ca2efea786fd095338d0c8c3b7,"+ def testinvalidinput ( self ) : \ n + # test case for github issue 46890.\n+     with self.session():\n+       with self.assertraises(errors_impl.internalerror):\n+         v = image_ops.pad_to_bounding_box(\n+             image=np.ones((1, 1, 1)),\n+             target_height=5191549470,\n+             target_width=5191549470,\n-            offset_height=1, offset_width=1)\n+         self.evaluate(v)\n+"
CVE-2021-37686,['https://github.com/tensorflow/tensorflow/commit/dfa22b348b70bb89d6d6ec0ff53973bacb4f4695'],"('CWE-835', ""Loop with Unreachable Exit Condition ('Infinite Loop')"")","GitHub, Inc.",NVD-CVSS2-Other,tensorflow,tensorflow,dfa22b348b70bb89d6d6ec0ff53973bacb4f4695,1,"TensorFlow is an end-to-end open source platform for machine learning . In affected versions the strided slice implementation in TFLite has a logic bug which can allow an attacker to trigger an infinite loop . This arises from newly introduced support for [ ellipsis in axis definition ] ( https : //github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/strided_slice.cc # L103-L122 ) . An attacker can craft a model such that ` ellipsis_end_idx ` is smaller than ` i ` ( e.g. , always negative ) . In this case , the inner loop does not increase ` i ` and the ` continue ` statement causes execution to skip over the preincrement at the end of the outer loop . We have patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695 . TensorFlow 2.6.0 is the only affected version .",prevent a division by 0 in average ops . piperorigin-revid : 385184660 change-id : i7affd4554f9b336fca29ac68f633232c094d0bd3,"diff - - git a / tensorflow / lite / kernels / internal / averagepool_quantized_test . cc b / tensorflow / lite / kernels / internal / averagepool_quantized_test . cc \ n @ @ - 40 , 12 + 40 , 14 @ @ void runoneaveragepooltest ( const poolparams & params , \ n - reference_integer_ops : : averagepool ( params , input_shape , input_data , \ n - output_shape , \ n - reference_averagepool_output . data ( ) ) ; \ n - optimized_integer_ops : : averagepool ( params , input_shape , input_data , \ n - output_shape , \ n - optimized_averagepool_output . data ( ) ) ; \ n + bool reference_success = reference_integer_ops : : averagepool ( \ n + params , input_shape , input_data , output_shape , \ n + reference_averagepool_output . data ( ) ) ; \ n + bool optimized_success = optimized_integer_ops : : averagepool ( \ n + params , input_shape , input_data , output_shape , \ n + optimized_averagepool_output . data ( ) ) ; \ n + expect_true ( reference_success ) ; \ n + expect_true ( optimized_success ) ; \ ndiff - - git a / tensorflow / lite / kernels / internal / optimized / integer_ops / pooling . h b / tensorflow / lite / kernels / internal / optimized / integer_ops / pooling . h \ n @ @ - 144 , 7 + 144 , 7 @ @ inline void maxpool ( const poolparams & params , const runtimeshape & input_shape , \ n - inline void averagepool ( const poolparams & params , \ n + inline bool averagepool ( const poolparams & params , \ n @ @ - 192 , 6 + 192 , 7 @ @ inline void averagepool ( const poolparams & params , \ n + if ( filter_count = = 0 ) return false ; \ n @ @ - 267 , 6 + 268 , 7 @ @ inline void averagepool ( const poolparams & params , \ n + return true ; \ ndiff - - git a / tensorflow / lite / kernels / internal / optimized / legacy_optimized_ops . h b / tensorflow / lite / kernels / internal / optimized / legacy_optimized_ops . h \ n @ @ - 3761 , 7 + 3761 , 7 @ @ inline void broadcastmul ( const uint8 * input1_data , const dims < 4 > & input1_dims , \ n - inline void averagepool ( const float * input_data , const dims < 4 > & input_dims , \ n + inline bool averagepool ( const float * input_data , const dims < 4 > & input_dims , \ n @ @ - 3776 , 35 + 3776 , 37 @ @ inline void averagepool ( const float * input_data , const dims < 4 > & input_dims , \ n - averagepool ( params , dimstoshape ( input_dims ) , input_data , \ n - dimstoshape ( output_dims ) , output_data ) ; \ n + return averagepool ( params , dimstoshape ( input_dims ) , input_data , \ n + dimstoshape ( output_dims ) , output_data ) ; \ n - void averagepool ( const float * input_data , const dims < 4 > & input_dims , \ n + bool averagepool ( const float * input_data , const dims < 4 > & input_dims , \ n - averagepool ( input_data , input_dims , stride_width , stride_height , pad_width , \ n - pad_height , kwidth , kheight , output_activation_min , \ n - output_activation_max , output_data , output_dims ) ; \ n + return averagepool ( input_data , input_dims , stride_width , stride_height , \ n + pad_width , pad_height , kwidth , kheight , \ n + output_activation_min , output_activation_max , output_data , \ n + output_dims ) ; \ n - void averagepool ( const float * input_data , const dims < 4 > & input_dims , int stride , \ n + bool averagepool ( const float * input_data , const dims < 4 > & input_dims , int stride , \ n - averagepool < ac > ( input_data , input_dims , stride , stride , pad_width , pad_height , \ n - filter_width , filter_height , output_data , output_dims ) ; \ n + return averagepool < ac > ( input_data , input_dims , stride , stride , pad_width , \ n + pad_height , filter_width , filter_height , output_data , \ n + output_dims ) ; \ n - inline void averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , \ n + inline bool averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , \ n @ @ - 3819 , 13 + 3821 , 13 @ @ inline void averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , \ n - averagepool ( params , dimstoshape ( input_dims ) , input_data , \ n - dimstoshape ( output_dims ) , output_data ) ; \ n + return averagepool ( params , dimstoshape ( input_dims ) , input_data , \ n + dimstoshape ( output_dims ) , output_data ) ; \ n - void averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , \ n + bool averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , \ n @ @ - 3839 , 21 + 3841 , 23 @ @ void averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , \ n - averagepool ( input_data , input_dims , stride_width , stride_height , pad_width , \ n - pad_height , filter_width , filter_height , output_activation_min , \ n - output_activation_max , output_data , output_dims ) ; \ n + return averagepool ( input_data , input_dims , stride_width , stride_height , \ n + pad_width , pad_height , filter_width , filter_height , \ n + output_activation_min , output_activation_max , output_data , \ n + output_dims ) ; \ n - void averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , int stride , \ n + bool averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , int stride , \ n - averagepool < ac > ( input_data , input_dims , stride , stride , pad_width , pad_height , \ n - filter_width , filter_height , output_activation_min , \ n - output_activation_max , output_data , output_dims ) ; \ n + return averagepool < ac > ( input_data , input_dims , stride , stride , pad_width , \ n + pad_height , filter_width , filter_height , \ n + output_activation_min , output_activation_max , \ n + output_data , output_dims ) ; \ ndiff - - git a / tensorflow / lite / kernels / internal / optimized / optimized_ops . h b / tensorflow / lite / kernels / internal / optimized / optimized_ops . h \ n @ @ - 3172 , 7 + 3172 , 7 @ @ inline int nodeoffset ( int b , int h , int w , int height , int width ) { \ n - inline void averagepool ( const poolparams & params , \ n + inline bool averagepool ( const poolparams & params , \ n @ @ - 3187 , 6 + 3187 , 9 @ @ inline void averagepool ( const poolparams & params , \ n + if ( stride_height = = 0 ) return false ; \ n + if ( stride_width = = 0 ) return false ; \ n + \ n @ @ - 3232 , 9 + 3235 , 11 @ @ inline void averagepool ( const poolparams & params , \ n + \ n + return true ; \ n - inline void averagepool ( const poolparams & params , \ n + inline bool averagepool ( const poolparams & params , \ n @ @ - 3283 , 6 + 3288 , 7 @ @ inline void averagepool ( const poolparams & params , \ n + if ( filter_count = = 0 ) return false ; \ n @ @ - 3369 , 6 + 3375 , 7 @ @ inline void averagepool ( const poolparams & params , \ n + return true ; \ ndiff - - git a / tensorflow / lite / kernels / internal / reference / integer_ops / pooling . h b / tensorflow / lite / kernels / internal / reference / integer_ops / pooling . h \ n @ @ - 21 , 7 + 21 , 7 @ @ limitations under the license . \ n - inline void averagepool ( const poolparams & params , \ n + inline bool averagepool ( const poolparams & params , \ n @ @ - 66 , 6 + 66 , 7 @ @ inline void averagepool ( const poolparams & params , \ n + if ( filter_count = = 0 ) return false ; \ n @ @ - 77 , 6 + 78 , 7 @ @ inline void averagepool ( const poolparams & params , \ n + return true ; \ n @ @ - 136 , 7 + 138 , 7 @ @ inline void maxpool ( const poolparams & params , const runtimeshape & input_shape , \ n - inline void averagepool ( const poolparams & params , \ n + inline bool averagepool ( const poolparams & params , \ n @ @ - 182 , 6 + 184 , 7 @ @ inline void averagepool ( const poolparams & params , \ n + if ( filter_count = = 0 ) return false ; \ n @ @ - 193 , 6 + 196 , 7 @ @ inline void averagepool ( const poolparams & params , \ n + return true ; \ ndiff - - git a / tensorflow / lite / kernels / internal / reference / legacy_reference_ops . h b / tensorflow / lite / kernels / internal / reference / legacy_reference_ops . h \ n @ @ - 1487 , 7 + 1487 , 7 @ @ void sub ( const t * input1_data , const dims < 4 > & input1_dims , const t * input2_data , \ n - inline void averagepool ( const float * input_data , const dims < 4 > & input_dims , \ n + inline bool averagepool ( const float * input_data , const dims < 4 > & input_dims , \ n @ @ - 1502 , 8 + 1502 , 8 @ @ inline void averagepool ( const float * input_data , const dims < 4 > & input_dims , \ n - averagepool ( params , dimstoshape ( input_dims ) , input_data , \ n - dimstoshape ( output_dims ) , output_data ) ; \ n + return averagepool ( params , dimstoshape ( input_dims ) , input_data , \ n + dimstoshape ( output_dims ) , output_data ) ; \ n @ @ - 1562 , 29 + 1562 , 31 @ @ inline void broadcastmul ( const uint8 * input1_data , const dims < 4 > & input1_dims , \ n - void averagepool ( const float * input_data , const dims < 4 > & input_dims , \ n + bool averagepool ( const float * input_data , const dims < 4 > & input_dims , \ n - averagepool ( input_data , input_dims , stride_width , stride_height , pad_width , \ n - pad_height , kwidth , kheight , output_activation_min , \ n - output_activation_max , output_data , output_dims ) ; \ n + return averagepool ( input_data , input_dims , stride_width , stride_height , \ n + pad_width , pad_height , kwidth , kheight , \ n + output_activation_min , output_activation_max , output_data , \ n + output_dims ) ; \ n - void averagepool ( const float * input_data , const dims < 4 > & input_dims , int stride , \ n + bool averagepool ( const float * input_data , const dims < 4 > & input_dims , int stride , \ n - averagepool < ac > ( input_data , input_dims , stride , stride , pad_width , pad_height , \ n - filter_width , filter_height , output_data , output_dims ) ; \ n + return averagepool < ac > ( input_data , input_dims , stride , stride , pad_width , \ n + pad_height , filter_width , filter_height , output_data , \ n + output_dims ) ; \ n - inline void averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , \ n + inline bool averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , \ n @ @ - 1599 , 13 + 1601 , 13 @ @ inline void averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , \ n - averagepool ( params , dimstoshape ( input_dims ) , input_data , \ n - dimstoshape ( output_dims ) , output_data ) ; \ n + return averagepool ( params , dimstoshape ( input_dims ) , input_data , \ n + dimstoshape ( output_dims ) , output_data ) ; \ n - void averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , \ n + bool averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , \ n @ @ - 1619 , 21 + 1621 , 23 @ @ void averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , \ n - averagepool ( input_data , input_dims , stride_width , stride_height , pad_width , \ n - pad_height , filter_width , filter_height , output_activation_min , \ n - output_activation_max , output_data , output_dims ) ; \ n + return averagepool ( input_data , input_dims , stride_width , stride_height , \ n + pad_width , pad_height , filter_width , filter_height , \ n + output_activation_min , output_activation_max , output_data , \ n + output_dims ) ; \ n - void averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , int stride , \ n + bool averagepool ( const uint8 * input_data , const dims < 4 > & input_dims , int stride , \ n - averagepool < ac > ( input_data , input_dims , stride , stride , pad_width , pad_height , \ n - filter_width , filter_height , output_activation_min , \ n - output_activation_max , output_data , output_dims ) ; \ n + return averagepool < ac > ( input_data , input_dims , stride , stride , pad_width , \ n + pad_height , filter_width , filter_height , \ n + output_activation_min , output_activation_max , \ n + output_data , output_dims ) ; \ ndiff - - git a / tensorflow / lite / kernels / internal / reference / pooling . h b / tensorflow / lite / kernels / internal / reference / pooling . h \ n @ @ - 23 , 7 + 23 , 7 @ @ limitations under the license . \ n - inline void averagepool ( const poolparams & params , \ n + inline bool averagepool ( const poolparams & params , \ n @ @ - 66 , 6 + 66 , 7 @ @ inline void averagepool ( const poolparams & params , \ n + if ( filter_count = = 0 ) return false ; \ n @ @ - 74 , 9 + 75 , 10 @ @ inline void averagepool ( const poolparams & params , \ n + return true ; \ n - inline void averagepool ( const poolparams & params , \ n + inline bool averagepool ( const poolparams & params , \ n @ @ - 122 , 6 + 124 , 7 @ @ inline void averagepool ( const poolparams & params , \ n + if ( filter_count = = 0 ) return false ; \ n @ @ - 131 , 6 + 134 , 7 @ @ inline void averagepool ( const poolparams & params , \ n + return true ; \ ndiff - - git a / tensorflow / lite / kernels / pooling . cc b / tensorflow / lite / kernels / pooling . cc \ n @ @ - 117 , 117 + 117 , 126 @ @ tflitestatus genericprepare ( tflitecontext * context , tflitenode * node ) { \ n - void averageevalfloat ( tflitecontext * context , tflitenode * node , \ n - tflitepoolparams * params , opdata * data , \ n - const tflitetensor * input , tflitetensor * output ) { \ n + tflitestatus averageevalfloat ( tflitecontext * context , tflitenode * node , \ n + tflitepoolparams * params , opdata * data , \ n + const tflitetensor * input , tflitetensor * output ) { \ n - #define tf_lite_average_pool(type)                                       \\n-  tflite::poolparams op_params;                                          \\n-  op_params.stride_height = params->stride_height;                       \\n-  op_params.stride_width = params->stride_width;                         \\n-  op_params.filter_height = params->filter_height;                       \\n-  op_params.filter_width = params->filter_width;                         \\n-  op_params.padding_values.height = data->padding.height;                \\n-  op_params.padding_values.width = data->padding.width;                  \\n-  op_params.float_activation_min = activation_min;                       \\n-  op_params.float_activation_max = activation_max;                       \\n-  type::averagepool(op_params, gettensorshape(input),                    \\n-                    gettensordata<float>(input), gettensorshape(output), \\n-                    gettensordata<float>(output))\n+#define tf_lite_average_pool(type)                                            \\n+  tflite::poolparams op_params;                                               \\n+  op_params.stride_height = params->stride_height;                            \\n+  op_params.stride_width = params->stride_width;                              \\n+  op_params.filter_height = params->filter_height;                            \\n+  op_params.filter_width = params->filter_width;                              \\n+  op_params.padding_values.height = data->padding.height;                     \\n+  op_params.padding_values.width = data->padding.width;                       \\n+  op_params.float_activation_min = activation_min;                            \\n+  op_params.float_activation_max = activation_max;                            \\n+  tf_lite_ensure(context, type::averagepool(op_params, gettensorshape(input), \\n+                                            gettensordata<float>(input),      \\n+                                            gettensorshape(output),           \\n+                                            gettensordata<float>(output)))\n+  return ktfliteok;\n-void averageevalquantizeduint8(tflitecontext* context, tflitenode* node,\n-                               tflitepoolparams* params, opdata* data,\n-                               const tflitetensor* input,\n-                               tflitetensor* output) {\n+tflitestatus averageevalquantizeduint8(tflitecontext* context, tflitenode* node,\n+                                       tflitepoolparams* params, opdata* data,\n+                                       const tflitetensor* input,\n+                                       tflitetensor* output) {\n-#define tf_lite_average_pool(type)                                         \\n-  tflite::poolparams op_params;                                            \\n-  op_params.stride_height = params->stride_height;                         \\n-  op_params.stride_width = params->stride_width;                           \\n-  op_params.filter_height = params->filter_height;                         \\n-  op_params.filter_width = params->filter_width;                           \\n-  op_params.padding_values.height = data->padding.height;                  \\n-  op_params.padding_values.width = data->padding.width;                    \\n-  op_params.quantized_activation_min = activation_min;                     \\n-  op_params.quantized_activation_max = activation_max;                     \\n-  type::averagepool(op_params, gettensorshape(input),                      \\n-                    gettensordata<uint8_t>(input), gettensorshape(output), \\n-                    gettensordata<uint8_t>(output))\n+#define tf_lite_average_pool(type)                                            \\n+  tflite::poolparams op_params;                                               \\n+  op_params.stride_height = params->stride_height;                            \\n+  op_params.stride_width = params->stride_width;                              \\n+  op_params.filter_height = params->filter_height;                            \\n+  op_params.filter_width = params->filter_width;                              \\n+  op_params.padding_values.height = data->padding.height;                     \\n+  op_params.padding_values.width = data->padding.width;                       \\n+  op_params.quantized_activation_min = activation_min;                        \\n+  op_params.quantized_activation_max = activation_max;                        \\n+  tf_lite_ensure(context, type::averagepool(op_params, gettensorshape(input), \\n+                                            gettensordata<uint8_t>(input),    \\n+                                            gettensorshape(output),           \\n+                                            gettensordata<uint8_t>(output)))\n+  return ktfliteok;\n-void averageevalquantizedint8(tflitecontext* context, tflitenode* node,\n-                              tflitepoolparams* params, opdata* data,\n-                              const tflitetensor* input, tflitetensor* output) {\n+tflitestatus averageevalquantizedint8(tflitecontext* context, tflitenode* node,\n+                                      tflitepoolparams* params, opdata* data,\n+                                      const tflitetensor* input,\n+                                      tflitetensor* output) {\n-#define tf_lite_average_pool(type)                                        \\n-  tflite::poolparams op_params;                                           \\n-  op_params.stride_height = params->stride_height;                        \\n-  op_params.stride_width = params->stride_width;                          \\n-  op_params.filter_height = params->filter_height;                        \\n-  op_params.filter_width = params->filter_width;                          \\n-  op_params.padding_values.height = data->padding.height;                 \\n-  op_params.padding_values.width = data->padding.width;                   \\n-  op_params.quantized_activation_min = activation_min;                    \\n-  op_params.quantized_activation_max = activation_max;                    \\n-  type::averagepool(op_params, gettensorshape(input),                     \\n-                    gettensordata<int8_t>(input), gettensorshape(output), \\n-                    gettensordata<int8_t>(output))\n+#define tf_lite_average_pool(type)                                            \\n+  tflite::poolparams op_params;                                               \\n+  op_params.stride_height = params->stride_height;                            \\n+  op_params.stride_width = params->stride_width;                              \\n+  op_params.filter_height = params->filter_height;                            \\n+  op_params.filter_width = params->filter_width;                              \\n+  op_params.padding_values.height = data->padding.height;                     \\n+  op_params.padding_values.width = data->padding.width;                       \\n+  op_params.quantized_activation_min = activation_min;                        \\n+  op_params.quantized_activation_max = activation_max;                        \\n+  tf_lite_ensure(context, type::averagepool(op_params, gettensorshape(input), \\n+                                            gettensordata<int8_t>(input),     \\n+                                            gettensorshape(output),           \\n+                                            gettensordata<int8_t>(output)))\n+  return ktfliteok;\n-void averageevalquantizedint16(tflitecontext* context, tflitenode* node,\n-                               tflitepoolparams* params, opdata* data,\n-                               const tflitetensor* input,\n-                               tflitetensor* output) {\n+tflitestatus averageevalquantizedint16(tflitecontext* context, tflitenode* node,\n+                                       tflitepoolparams* params, opdata* data,\n+                                       const tflitetensor* input,\n+                                       tflitetensor* output) {\n-#define tf_lite_average_pool(type)                                         \\n-  tflite::poolparams op_params;                                            \\n-  op_params.stride_height = params->stride_height;                         \\n-  op_params.stride_width = params->stride_width;                           \\n-  op_params.filter_height = params->filter_height;                         \\n-  op_params.filter_width = params->filter_width;                           \\n-  op_params.padding_values.height = data->padding.height;                  \\n-  op_params.padding_values.width = data->padding.width;                    \\n-  op_params.quantized_activation_min = activation_min;                     \\n-  op_params.quantized_activation_max = activation_max;                     \\n-  type::averagepool(op_params, gettensorshape(input),                      \\n-                    gettensordata<int16_t>(input), gettensorshape(output), \\n-                    gettensordata<int16_t>(output))\n+#define tf_lite_average_pool(type)                                            \\n+  tflite::poolparams op_params;                                               \\n+  op_params.stride_height = params->stride_height;                            \\n+  op_params.stride_width = params->stride_width;                              \\n+  op_params.filter_height = params->filter_height;                            \\n+  op_params.filter_width = params->filter_width;                              \\n+  op_params.padding_values.height = data->padding.height;                     \\n+  op_params.padding_values.width = data->padding.width;                       \\n+  op_params.quantized_activation_min = activation_min;                        \\n+  op_params.quantized_activation_max = activation_max;                        \\n+  tf_lite_ensure(context, type::averagepool(op_params, gettensorshape(input), \\n+                                            gettensordata<int16_t>(input),    \\n+                                            gettensorshape(output),           \\n+                                            gettensordata<int16_t>(output)))\n+  return ktfliteok;\n@@ -380,20 +389,17 @@ tflitestatus averageeval(tflitecontext* context, tflitenode* node) {\n-      averageevalfloat<kernel_type>(context, node, params, data, input, output);\n-      break;\n+      return averageevalfloat<kernel_type>(context, node, params, data, input,\n+                                           output);\n-      averageevalquantizeduint8<kernel_type>(context, node, params, data, input,\n-                                             output);\n-      break;\n+      return averageevalquantizeduint8<kernel_type>(context, node, params, data,\n+                                                    input, output);\n-      averageevalquantizedint8<kernel_type>(context, node, params, data, input,\n-                                            output);\n-      break;\n+      return averageevalquantizedint8<kernel_type>(context, node, params, data,\n+                                                   input, output);\n-      averageevalquantizedint16<kernel_type>(context, node, params, data, input,\n-                                             output);\n-      break;\n+      return averageevalquantizedint16<kernel_type>(context, node, params, data,\n+                                                    input, output);"
CVE-2022-0319,"['https://github.com/vim/vim/commit/05b27615481e72e3b338bb12990fb3e0c2ecc2a9', 'https://huntr.dev/bounties/ba622fd2-e6ef-4ad9-95b4-17f87b68755b']","('CWE-125', 'Out-of-bounds Read')",huntr.dev,NVD-CVSS2-Other,vim,vim,05b27615481e72e3b338bb12990fb3e0c2ecc2a9,1,Out-of-bounds Read in vim/vim prior to 8.2 .,patch 8.2.4154 : ml_get error when exchanging windows in visual mode problem : ml_get error when exchanging windows in visual mode . solution : correct end of visual area when entering another buffer .,"diff - - git a / src / testdir / test_visual . vim b / src / testdir / test_visual . vim \ n @ @ - 1318 , 5 + 1318 , 15 @ @ func test_visual_block_insert_round_off ( ) \ n + "" this was causing an ml_get error\n+func test_visual_exchange_windows()\n+  enew!\n+  new\n+  call setline(1, ['foo', 'bar'])\n+  exe "" normal g \ < c - v > gg \ < c - w > \ < c - x > oo \ < esc > "" \ n + bwipe ! \ n + bwipe ! \ n + endfunc \ n + \ ndiff - - git a / src / version . c b / src / version . c \ n @ @ - 750 , 6 + 750 , 8 @ @ static char * ( features [ ] ) = \ n + /**/ \ n + 4154 , \ ndiff - - git a / src / window . c b / src / window . c \ n @ @ - 1691 , 6 + 1691 , 11 @ @ win_exchange ( long prenum ) \ n + if ( wp - > w_buffer ! = curbuf ) \ n + reset_visual_and_resel ( ) ; \ n + else if ( visual_active ) \ n + wp - > w_cursor = curwin - > w_cursor ; \ n + \ n @ @ - 5332 , 7 + 5337 , 7 @ @ frame_remove ( frame_t * frp ) \ n - wp - > w_lines = alloc_clear_mult ( wline_t , rows ) ; \ n + wp - > w_lines = alloc_clear_mult ( wline_t , rows ) ;"
CVE-2022-1207,"['https://github.com/radareorg/radare2/commit/605785b65dd356d46d4487faa41dbf90943b8bc1', 'https://huntr.dev/bounties/7b979e76-ae54-4132-b455-0833e45195eb']","('CWE-125', 'Out-of-bounds Read')",huntr.dev,NVD-CVSS2-Other,radareorg,radare2,605785b65dd356d46d4487faa41dbf90943b8bc1,1,Out-of-bounds read in GitHub repository radareorg/radare2 prior to 5.6.8 . This vulnerability allows attackers to read sensitive information from outside the allocated buffer boundary .,fix 1 byte oobread in the cris analysis plugin # # crash,"diff - - git a / libr / anal / p / anal_cris . c b / libr / anal / p / anal_cris . c \ n @ @ - 1 , 4 + 1 , 4 @ @ \ n - /* radare2 - lgpl - copyright 2014-2015 - pancake */ \ n + /* radare2 - lgpl - copyright 2014-2022 - pancake */ \ n @ @ - 7 , 6 + 7 , 9 @ @ static int analop ( ranal * a , ranalop * op , ut64 addr , const ut8 * buf , int len , ran \ n + if ( len < 1 ) { \ n + return - 1 ; \ n + } \ n @ @ - 21 , 9 + 24 , 9 @ @ static int analop ( ranal * a , ranalop * op , ut64 addr , const ut8 * buf , int len , ran \ n - op - > ptr | = buf [ 3 ] < < 8 ; \ n - op - > ptr | = buf [ 4 ] < < 16 ; \ n - op - > ptr | = ( ( ut32 ) ( 0xff & buf [ 5 ] ) ) < < 24 ; \ n + op - > ptr | = buf [ 3 ] < < 8 ; \ n + op - > ptr | = buf [ 4 ] < < 16 ; \ n + op - > ptr | = ( ( ut32 ) ( 0xff & buf [ 5 ] ) ) < < 24 ; \ n @ @ - 35 , 9 + 38 , 9 @ @ static int analop ( ranal * a , ranalop * op , ut64 addr , const ut8 * buf , int len , ran \ n - delta | = buf [ 3 ] < < 8 ; \ n - delta | = buf [ 4 ] < < 16 ; \ n - delta | = buf [ 5 ] < < 24 ; \ n + delta | = buf [ 3 ] < < 8 ; \ n + delta | = buf [ 4 ] < < 16 ; \ n + delta | = buf [ 5 ] < < 24 ; \ n @ @ - 46 , 6 + 49 , 9 @ @ static int analop ( ranal * a , ranalop * op , ut64 addr , const ut8 * buf , int len , ran \ n + if ( len < 2 ) { \ n + break ; \ n + } \ n @ @ - 57 , 11 + 63 , 17 @ @ static int analop ( ranal * a , ranalop * op , ut64 addr , const ut8 * buf , int len , ran \ n - if ( buf [ 1 ] = = 0xb9 ) { \ n + if ( len < 2 ) { \ n + break ; \ n + } \ n + if ( buf [ 1 ] = = 0xb9 ) { \ n + if ( len < 2 ) { \ n + break ; \ n + } \ n @ @ - 70 , 7 + 82 , 7 @ @ static int analop ( ranal * a , ranalop * op , ut64 addr , const ut8 * buf , int len , ran \ n - if ( buf [ 0 ] > = 0xc0 ) { \ n + if ( buf [ 0 ] > = 0xc0 ) { \ n @ @ - 242 , 6 + 254 , 7 @ @ static bool set_reg_profile ( ranal * anal ) { \ n + ""=sn	r0\n"""
CVE-2022-0890,"['https://github.com/mruby/mruby/commit/da48e7dbb20024c198493b8724adae1b842083aa', 'https://huntr.dev/bounties/68e09ec1-6cc7-48b8-981d-30f478c70276']","('CWE-476', 'NULL Pointer Dereference')",huntr.dev,NVD-CVSS2-Other,mruby,mruby,da48e7dbb20024c198493b8724adae1b842083aa,1,NULL Pointer Dereference in GitHub repository mruby/mruby prior to 3.2 .,fiber.c : should pack 15+ arguments in an array .,"diff - - git a / mrbgems / mruby - fiber / src / fiber . c b / mrbgems / mruby - fiber / src / fiber . c \ n @ @ - 208 , 15 + 208 , 22 @ @ fiber_switch ( mrb_state * mrb , mrb_value self , mrb_int len , const mrb_value * a , mr \ n - mrb_stack_extend ( mrb , len + 2 ) ; /* for receiver and (optional) block */ \ n - b = c - > stbase + 1 ; \ n - e = b + len ; \ n - while ( b < e ) { \ n - * b + + = * a + + ; \ n - } \ n + if ( len > = 15 ) { \ n + mrb_stack_extend ( mrb , 3 ) ; /* for receiver, args and (optional) block */ \ n + c - > stbase [ 1 ] = mrb_ary_new_from_values ( mrb , len , a ) ; \ n + len = 15 ; \ n + } \ n + else { \ n + mrb_stack_extend ( mrb , len + 2 ) ; /* for receiver and (optional) block */ \ n + b = c - > stbase + 1 ; \ n + e = b + len ; \ n + while ( b < e ) { \ n + * b + + = * a + + ; \ n + } \ n + }"
CVE-2021-42779,"['https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28843', 'https://bugzilla.redhat.com/show_bug.cgi?id=2016086', 'https://github.com/OpenSC/OpenSC/commit/1db88374']","('CWE-416', 'Use After Free')","Red Hat, Inc.",NVD-CVSS2-Other,OpenSC,OpenSC,1db88374,1,A heap use after free issue was found in Opensc before version 0.22.0 in sc_file_valid .,oberthur : correctly check for return values thanks oss-fuzz https : //bugs.chromium.org/p/oss-fuzz/issues/detail ? id=28843,"diff - - git a / src / libopensc / pkcs15 - oberthur . c b / src / libopensc / pkcs15 - oberthur . c \ n @ @ - 304 , 7 + 304 , 7 @ @ sc_oberthur_read_file ( struct sc_pkcs15_card * p15card , const char * in_path , \ n - int ii ; \ n + int ii , nobjs ; \ n @ @ - 313 , 18 + 313 , 19 @ @ sc_oberthur_read_file ( struct sc_pkcs15_card * p15card , const char * in_path , \ n - rv = sc_pkcs15_get_objects ( p15card , sc_pkcs15_type_auth_pin , objs , 0x10 ) ; \ n - if ( rv ! = sc_success ) { \ n + nobjs = sc_pkcs15_get_objects ( p15card , sc_pkcs15_type_auth_pin , objs , 0x10 ) ; \ n + if ( nobjs < 1 ) { \ n - log_test_ret ( ctx , rv , ""cannot read oberthur file: get auth objects error"" ) ; \ n + log_test_ret ( ctx , sc_error_data_object_not_found , \ n + ""cannot read oberthur file: get auth objects error"" ) ; \ n - for ( ii = 0 ; ii < rv ; ii + + ) { \ n + for ( ii = 0 ; ii < nobjs ; ii + + ) { \ n - auth_info - > attrs . pin . reference , acl - > key_ref , auth_info - > auth_method , acl - > method ) ; \ n + auth_info - > attrs . pin . reference , acl - > key_ref , auth_info - > auth_method , acl - > method ) ;"
CVE-2022-0570,['https://github.com/mruby/mruby/commit/38b164ace7d6ae1c367883a3d67d7f559783faad'],"('CWE-122', 'Heap-based Buffer Overflow')",huntr.dev,NVD-CVSS2-Other,mruby,mruby,38b164ace7d6ae1c367883a3d67d7f559783faad,1,Heap-based Buffer Overflow in Homebrew mruby prior to 3.2 .,codegen.c : fix a bug in ` gen_values ( ) ` . - fix limit handling that fails 15 arguments method calls . - fix too early argument packing in arrays .,"- fix limit handling that fails 15 arguments method calls . \ n - fix too early argument packing in arrays . \ ndiff - - git a / mrbgems / mruby - compiler / core / codegen . c b / mrbgems / mruby - compiler / core / codegen . c \ n @ @ - 1551 , 7 + 1551 , 7 @ @ gen_values ( codegen_scope * s , node * t , int val , int limit ) \ n - if ( is_splat | | n > limit | | cursp ( ) > = slimit ) { /* flush stack */ \ n + if ( is_splat | | cursp ( ) > = slimit ) { /* flush stack */ \ n @ @ - 1590 , 6 + 1590 , 11 @ @ gen_values ( codegen_scope * s , node * t , int val , int limit ) \ n + else if ( n > limit ) { \ n + pop_n ( n ) ; \ n + genop_2 ( s , op_array , cursp ( ) , n ) ; \ n + return - 1 ; \ n + }"
CVE-2022-0476,"['https://github.com/radareorg/radare2/commit/27fe8031782d3a06c3998eaa94354867864f9f1b', 'https://huntr.dev/bounties/81ddfbda-6c9f-4b69-83ff-85b15141e35d']","('CWE-400', 'Uncontrolled Resource Consumption')",huntr.dev,NVD-CVSS2-Other,radareorg,radare2,27fe8031782d3a06c3998eaa94354867864f9f1b,1,Denial of Service in GitHub repository radareorg/radare2 prior to 5.6.4 .,fix dos in the minidump parser # # crash * reported by lazymio via huntr.dev * reproducer : mdmp-dos,"diff - - git a / libr / bin / format / mdmp / mdmp . c b / libr / bin / format / mdmp / mdmp . c \ n @ @ - 369 , 9 + 369 , 15 @ @ static bool r_bin_mdmp_init_hdr ( struct r_bin_mdmp_obj * obj ) { \ n - static void read_module ( rbuffer * b , ut64 addr , struct minidump_module * module ) { \ n + static struct minidump_module * read_module ( rbuffer * b , ut64 addr ) { \ n - r_buf_seek ( b , addr , r_buf_set ) ; \ n + if ( r_buf_seek ( b , addr , r_buf_set ) = = - 1 ) { \ n + return null ; \ n + } \ n + struct minidump_module * module = r_new0 ( struct minidump_module ) ; \ n + if ( ! module ) { \ n + return null ; \ n + } \ n @ @ - 397 , 6 + 403 , 7 @ @ static void read_module ( rbuffer * b , ut64 addr , struct minidump_module * module ) { \ n + return module ; \ n @ @ - 477 , 12 + 484 , 11 @ @ static bool r_bin_mdmp_init_directory_entry ( struct r_bin_mdmp_obj * obj , struct m \ n - for ( i = 0 ; i < module_list . number_of_modules ; i + + ) { \ n - struct minidump_module * module = r_new ( struct minidump_module ) ; \ n + for ( i = 0 ; i < module_list . number_of_modules & & offset < obj - > size ; i + + ) { \ n + struct minidump_module * module = read_module ( obj - > b , offset ) ; \ n - break ; \ n + break ; \ n - read_module ( obj - > b , offset , module ) ; \ n @ @ - 503 , 7 + 509 , 7 @ @ static bool r_bin_mdmp_init_directory_entry ( struct r_bin_mdmp_obj * obj , struct m \ n - for ( i = 0 ; i < memory_list . number_of_memory_ranges ; i + + ) { \ n + for ( i = 0 ; i < memory_list . number_of_memory_ranges & & offset < obj - > size ; i + + ) { \ n @ @ - 586 , 7 + 592 , 7 @ @ static bool r_bin_mdmp_init_directory_entry ( struct r_bin_mdmp_obj * obj , struct m \ n - for ( i = 0 ; i < thread_ex_list . number_of_threads ; i + + ) { \ n + for ( i = 0 ; i < thread_ex_list . number_of_threads & & offset < obj - > size ; i + + ) { \ n @ @ - 613 , 7 + 619 , 7 @ @ static bool r_bin_mdmp_init_directory_entry ( struct r_bin_mdmp_obj * obj , struct m \ n - for ( i = 0 ; i < memory64_list . number_of_memory_ranges ; i + + ) { \ n + for ( i = 0 ; i < memory64_list . number_of_memory_ranges & & offset < obj - > size ; i + + ) { \ n @ @ - 708 , 7 + 714 , 7 @ @ static bool r_bin_mdmp_init_directory_entry ( struct r_bin_mdmp_obj * obj , struct m \ n - for ( i = 0 ; i < unloaded_module_list . number_of_entries ; i + + ) { \ n + for ( i = 0 ; i < unloaded_module_list . number_of_entries & & offset < obj - > size ; i + + ) { \ n @ @ - 763 , 7 + 769 , 7 @ @ static bool r_bin_mdmp_init_directory_entry ( struct r_bin_mdmp_obj * obj , struct m \ n - for ( i = 0 ; i < memory_info_list . number_of_entries ; i + + ) { \ n + for ( i = 0 ; i < memory_info_list . number_of_entries & & offset < obj - > size ; i + + ) { \ n @ @ - 793 , 7 + 799 , 7 @ @ static bool r_bin_mdmp_init_directory_entry ( struct r_bin_mdmp_obj * obj , struct m \ n - for ( i = 0 ; i < thread_info_list . number_of_entries ; i + + ) { \ n + for ( i = 0 ; i < thread_info_list . number_of_entries & & offset < obj - > size ; i + + ) { \ n @ @ - 819 , 7 + 825 , 7 @ @ static bool r_bin_mdmp_init_directory_entry ( struct r_bin_mdmp_obj * obj , struct m \ n - for ( i = 0 ; i < handle_operation_list . number_of_entries ; i + + ) { \ n + for ( i = 0 ; i < handle_operation_list . number_of_entries & & offset < obj - > size ; i + + ) { \ n @ @ - 849 , 7 + 855 , 7 @ @ static bool r_bin_mdmp_init_directory_entry ( struct r_bin_mdmp_obj * obj , struct m \ n - for ( i = 0 ; i < token_info_list . number_of_entries ; i + + ) { \ n + for ( i = 0 ; i < token_info_list . number_of_entries & & offset < obj - > size ; i + + ) {"
CVE-2022-0518,"['https://github.com/radareorg/radare2/commit/9650e3c352f675687bf6c6f65ff2c4a3d0e288fa', 'https://huntr.dev/bounties/10051adf-7ddc-4042-8fd0-8e9e0c5b1184']","('CWE-122', 'Heap-based Buffer Overflow')",huntr.dev,NVD-CVSS2-Other,radareorg,radare2,9650e3c352f675687bf6c6f65ff2c4a3d0e288fa,1,Heap-based Buffer Overflow in GitHub repository radareorg/radare2 prior to 5.6.2 .,fix oobread segfault in java arith8.class # # crash * reported by cen zhang via huntr.dev,"diff - - git a / shlr / java / class . c b / shlr / java / class . c \ n @ @ - 3733 , 6 + 3733 , 10 @ @ r_api rbinjavaattrinfo * r_bin_java_inner_classes_attr_new ( rbinjavaobj * bin , ut8 \ n + if ( buf_offset + offset + 8 > sz ) { \ n + eprintf ( ""invalid amount of inner classes\n"" ) ; \ n + return null ; \ n + } \ n @ @ - 3743 , 7 + 3747 , 7 @ @ r_api rbinjavaattrinfo * r_bin_java_inner_classes_attr_new ( rbinjavaobj * bin , ut8 \ n - if ( offset + 8 > sz ) { \ n + if ( buf_offset + offset + 8 > sz ) {"
CVE-2022-0525,['https://github.com/mruby/mruby/commit/0849a2885f81cfd82134992c06df3ccd59052ac7'],"('CWE-125', 'Out-of-bounds Read')",huntr.dev,NVD-CVSS2-Other,mruby,mruby,0849a2885f81cfd82134992c06df3ccd59052ac7,1,Out-of-bounds Read in Homebrew mruby prior to 3.2 .,codegen.c : stack position may be wrong on assignments . when ` [ ] = ` access includes keyword arguments .,"diff - - git a / mrbgems / mruby - compiler / core / codegen . c b / mrbgems / mruby - compiler / core / codegen . c \ n @ @ - 1865 , 15 + 1865 , 21 @ @ gen_assignment ( codegen_scope * s , node * tree , node * rhs , int sp , int val ) \ n + if ( n = = 14 ) { \ n + pop_n ( n ) ; \ n + genop_2 ( s , op_array , cursp ( ) , n ) ; \ n + push ( ) ; \ n + n = 15 ; \ n + } \ n - push ( ) ; \ n - pop ( ) ; \ n + pop_n ( 2 ) ; \ n + push ( ) ;"
CVE-2022-2126,"['https://github.com/vim/vim/commit/156d3911952d73b03d7420dc3540215247db0fe8', 'https://huntr.dev/bounties/8d196d9b-3d10-41d2-9f70-8ef0d08c946e']","('CWE-125', 'Out-of-bounds Read')",huntr.dev,NVD-CVSS2-Other,vim,vim,156d3911952d73b03d7420dc3540215247db0fe8,1,Out-of-bounds Read in GitHub repository vim/vim prior to 8.2 .,patch 8.2.5123 : using invalid index when looking for spell suggestions problem : using invalid index when looking for spell suggestions . solution : do not decrement the index when it is zero .,"diff - - git a / src / spellsuggest . c b / src / spellsuggest . c \ n @ @ - 1973 , 7 + 1973 , 8 @ @ suggest_trie_walk ( \ n - else if ( sp - > ts_isdiff = = diff_insert ) \ n + else if ( sp - > ts_isdiff = = diff_insert \ n + & & sp - > ts_fidx > 0 ) \ ndiff - - git a / src / testdir / test_spell . vim b / src / testdir / test_spell . vim \ n @ @ - 70 , 6 + 70 , 16 @ @ func test_z_equal_on_invalid_utf8_word ( ) \ n + func test_z_equal_on_single_character ( ) \ n + "" this was decrementing the index below zero \ n + new \ n + norm a0 \ � \ n + norm zw \ n + norm  z = \ n + \ n + bwipe ! \ n + endfunc \ n + \ ndiff - - git a / src / version . c b / src / version . c \ n @ @ - 734 , 6 + 734 , 8 @ @ static char * ( features [ ] ) = \ n + /**/ \ n + 5123 ,"
CVE-2022-2210,"['https://github.com/vim/vim/commit/c101abff4c6756db4f5e740fde289decb9452efa', 'https://huntr.dev/bounties/020845f8-f047-4072-af0f-3726fe1aea25']","('CWE-787', 'Out-of-bounds Write')",huntr.dev,NVD-CVSS2-Other,vim,vim,c101abff4c6756db4f5e740fde289decb9452efa,1,Out-of-bounds Write in GitHub repository vim/vim prior to 8.2 .,patch 8.2.5164 : invalid memory access after diff buffer manipulations problem : invalid memory access after diff buffer manipulations . solution : use zero offset when change removes all lines in a diff block .,"diff - - git a / src / diff . c b / src / diff . c \ n @ @ - 403 , 9 + 403 , 9 @ @ diff_mark_adjust_tp ( \ n + off = 0 ; \ n - off = dp - > df_lnum [ idx ] - lnum_deleted ; \ n @ @ - 426 , 6 + 426 , 7 @ @ diff_mark_adjust_tp ( \ n + off = dp - > df_lnum [ idx ] - lnum_deleted ; \ n @ @ - 434 , 7 + 435 , 6 @ @ diff_mark_adjust_tp ( \ n - off = 0 ; \ ndiff - - git a / src / testdir / test_diffmode . vim b / src / testdir / test_diffmode . vim \ n @ @ - 1615 , 5 + 1615 , 17 @ @ func test_diff_only ( ) \ n + "" this was causing invalid diff block values\n+"" fixme : somehow this causes a valgrind error when run directly but not when \ n + "" run as a test . \ n + func test_diff_manipulations ( ) \ n + set diff \ n + split 0 \ n + sil ! norm r \ n  doo  bdeu   r \ n  doo  bdeu   r \ n  doo  bdeu \ n + \ n + set nodiff \ n + % bwipe ! \ n + endfunc \ n + \ ndiff - - git a / src / version . c b / src / version . c \ n @ @ - 735 , 6 + 735 , 8 @ @ static char * ( features [ ] ) = \ n + /**/ \ n + 5164 ,"
CVE-2022-1851,"['https://github.com/vim/vim/commit/78d52883e10d71f23ab72a3d8b9733b00da8c9ad', 'https://huntr.dev/bounties/f8af901a-9a46-440d-942a-8f815b59394d']","('CWE-125', 'Out-of-bounds Read')",huntr.dev,NVD-CVSS2-Other,vim,vim,78d52883e10d71f23ab72a3d8b9733b00da8c9ad,1,Out-of-bounds Read in GitHub repository vim/vim prior to 8.2 .,patch 8.2.5013 : after text formatting cursor may be in an invalid position problem : after text formatting the cursor may be in an invalid position . solution : correct the cursor position after formatting .,"diff - - git a / src / testdir / test_textformat . vim b / src / testdir / test_textformat . vim \ n @ @ - 1291 , 4 + 1291 , 16 @ @ func test_fo_2 ( ) \ n + "" this was leaving the cursor after the end of a line.  complicated way to\n+"" have the problem show up with valgrind . \ n + func test_correct_cursor_position ( ) \ n + set encoding = iso8859 \ n + new \ n + norm a000           0 \ n + sil ! norm gggg0i0    gw0gg \ n + \ n + bwipe ! \ n + set encoding = utf8 \ n + endfunc \ n + \ ndiff - - git a / src / textformat . c b / src / textformat . c \ n @ @ - 870 , 6 + 870 , 9 @ @ op_format ( \ n + \ n + // formatting may have made the cursor position invalid\n+	check_cursor();\ndiff --git a/src/version.c b/src/version.c\n@@ -734,6 +734,8 @@ static char *(features[]) =\n+/**/\n+    5013,"
CVE-2022-2288,['https://github.com/vim/vim/commit/c6fdb15d423df22e1776844811d082322475e48a'],"('CWE-787', 'Out-of-bounds Write')",huntr.dev,NVD-CVSS2-Other,vim,vim,c6fdb15d423df22e1776844811d082322475e48a,1,Out-of-bounds Write in GitHub repository vim/vim prior to 9.0 .,"patch 9.0.0025 : accessing beyond allocated memory with the cmdline window problem : accessing beyond allocated memory when using the cmdline window in ex mode . solution : use `` * '' instead of `` ' < , ' > '' for visual mode .","diff - - git a / src / ex_docmd . c b / src / ex_docmd . c \ n @ @ - 3118 , 9 + 3118 , 11 @ @ parse_command_modifiers ( \ n - //  ""'<,'>mods"" -> ""mods'<,'>+\n+		//  ""'<,'>mods"" -> ""mods *+\n+		//  use ""*"" instead of ""'<,'>"" to avoid the command getting\n+		//  longer, in case is was allocated.\n-		strcpy(orig_cmd + len, ""'<,'>+"");\n+		strcpy(orig_cmd + len, "" *+"");\ndiff --git a/src/testdir/test_cmdline.vim b/src/testdir/test_cmdline.vim\n@@ -2103,6 +2103,14 @@ func test_cmdwin_insert_mode_close()\n+func test_cmdwin_ex_mode_with_modifier()\n+  "" this was accessing memory after allocated text in ex mode\n+  new\n+  call setline(1, ['some', 'text', 'lines'])\n+  silent! call feedkeys(""gqnormal vq:atopleft\<c-v>\<cr>\<cr>"", 'xt')\n+  bwipe!\n+endfunc\n+\ndiff --git a/src/version.c b/src/version.c\n@@ -735,6 +735,8 @@ static char *(features[]) =\n+/**/\n+    25,"
CVE-2022-21723,"['http://seclists.org/fulldisclosure/2022/Mar/2', 'https://github.com/pjsip/pjproject/commit/077b465c33f0aec05a49cd2ca456f9a1b112e896', 'https://github.com/pjsip/pjproject/security/advisories/GHSA-7fw8-54cv-r7pm']","('CWE-125', 'Out-of-bounds Read')","GitHub, Inc.",NVD-CVSS2-Other,pjsip,pjproject,077b465c33f0aec05a49cd2ca456f9a1b112e896,1,"PJSIP is a free and open source multimedia communication library written in C language implementing standard based protocols such as SIP , SDP , RTP , STUN , TURN , and ICE . In versions 2.11.1 and prior , parsing an incoming SIP message that contains a malformed multipart can potentially cause out-of-bound read access . This issue affects all PJSIP users that accept SIP multipart . The patch is available as commit in the ` master ` branch . There are no known workarounds .",merge pull request from ghsa-7fw8-54cv-r7pm,"diff - - git a / pjlib - util / src / pjlib - util / scanner . c b / pjlib - util / src / pjlib - util / scanner . c \ n @ @ - 444 , 16 + 444 , 21 @ @ pj_def ( void ) pj_scan_get_n ( pj_scanner * scanner , \ n - int chr = * scanner - > curptr ; \ n + register char * s = scanner - > curptr ; \ n + int chr ; \ n - if ( ! chr ) { \ n + if ( s > = scanner - > end | | ! * s ) { \ n - + + scanner - > curptr ; \ n + chr = * s ; \ n - if ( pj_scan_is_probably_space ( * scanner - > curptr ) & & scanner - > skip_ws ) { \ n + + + s ; \ n + scanner - > curptr = s ; \ n + if ( pj_scan_check_eof ( s ) & & pj_scan_is_probably_space ( * s ) & & \ n + scanner - > skip_ws ) \ n + {"
CVE-2022-1897,"['https://github.com/vim/vim/commit/338f1fc0ee3ca929387448fe464579d6113fa76a', 'https://huntr.dev/bounties/82c12151-c283-40cf-aa05-2e39efa89118']","('CWE-787', 'Out-of-bounds Write')",huntr.dev,NVD-CVSS2-Other,vim,vim,338f1fc0ee3ca929387448fe464579d6113fa76a,1,Out-of-bounds Write in GitHub repository vim/vim prior to 8.2 .,patch 8.2.5023 : substitute overwrites allocated buffer problem : substitute overwrites allocated buffer . solution : disallow undo when in a substitute command .,"diff - - git a / src / normal . c b / src / normal . c \ n @ @ - 183 , 6 + 183 , 22 @ @ find_command ( int cmdchar ) \ n + /*\n+ * if currently editing a cmdline or text is locked: beep and give an error\n+ * message, return true.\n+ */ \ n + static int \ n + check_text_locked ( oparg_t * oap ) \ n + { \ n + if ( text_locked ( ) ) \ n + { \ n + clearopbeep ( oap ) ; \ n + text_locked_msg ( ) ; \ n + return true ; \ n + } \ n + return false ; \ n + } \ n + \ n @ @ - 802 , 14 + 818 , 9 @ @ normal_cmd ( \ n - if ( text_locked ( ) & & ( nv_cmds [ idx ] . cmd_flags & nv_ncw ) ) \ n - { \ n - // this command is not allowed while editing a cmdline: beep.\n-	clearopbeep(oap);\n-	text_locked_msg();\n-	goto normal_end;\n-    }\n-    if ((nv_cmds[idx].cmd_flags & nv_ncw) && curbuf_locked())\n+    if ((nv_cmds[idx].cmd_flags & nv_ncw)\n+				&& (check_text_locked(oap) || curbuf_locked()))\n+	// this command is not allowed now\n@@ -4049,12 +4060,8 @@ nv_gotofile(cmdarg_t *cap)\n-    if (text_locked())\n-    {\n-	clearopbeep(cap->oap);\n-	text_locked_msg();\n+    if (check_text_locked(cap->oap))\n-    }\n@@ -6182,14 +6189,7 @@ nv_g_cmd(cmdarg_t *cap)\n-	if (text_locked())\n-	{\n-	    clearopbeep(cap->oap);\n-	    text_locked_msg();\n-	    break;\n-	}\n-\n-	if (!checkclearopq(oap))\n+	if (!check_text_locked(cap->oap) && !checkclearopq(oap))\ndiff --git a/src/testdir/test_substitute.vim b/src/testdir/test_substitute.vim\n@@ -1013,6 +1013,28 @@ func test_sub_change_window()\n+"" this was undoign a change in between computing the length and using it.\n+func do_test_sub_undo_change()\n+  new\n+  norm o0000000000000000000000000000000000000000000000000000\n+  silent! s/\%')/\=repl()\n+  bwipe!\n+endfunc\n+\n+func test_sub_undo_change()\n+  func repl()\n+    silent! norm g-\n+  endfunc\n+  call do_test_sub_undo_change()\n+\n+  func! repl()\n+    silent earlier\n+  endfunc\n+  call do_test_sub_undo_change()\n+\n+  delfunc repl\n+endfunc\n+\ndiff --git a/src/undo.c b/src/undo.c\n@@ -2327,6 +2327,12 @@ undo_time(\n+    if (text_locked())\n+    {\n+	text_locked_msg();\n+	return;\n+    }\n+\ndiff --git a/src/version.c b/src/version.c\n@@ -734,6 +734,8 @@ static char *(features[]) =\n+/**/\n+    5023,"
CVE-2022-23590,"['https://github.com/tensorflow/tensorflow/commit/955059813cc325dc1db5e2daa6221271406d4439', 'https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pqrv-8r2f-7278']","('CWE-754', 'Improper Check for Unusual or Exceptional Conditions')","GitHub, Inc.",NVD-CVSS2-Other,tensorflow,tensorflow,955059813cc325dc1db5e2daa6221271406d4439,1,"Tensorflow is an Open Source Machine Learning Framework . A ` GraphDef ` from a TensorFlow ` SavedModel ` can be maliciously altered to cause a TensorFlow process to crash due to encountering a ` StatusOr ` value that is an error and forcibly extracting the value from it . We have patched the issue in multiple GitHub commits and these will be included in TensorFlow 2.8.0 and TensorFlow 2.7.1 , as both are affected .",check for type inference error on node construction . piperorigin-revid : 409415804 change-id : ieb6e020906b96f522bf8e2fa103715ddbbdc434a,"diff - - git a / tensorflow / core / graph / graph . cc b / tensorflow / core / graph / graph . cc \ n @ @ - 561 , 6 + 561 , 11 @ @ node * graph : : addnode ( nodedef node_def , status * status ) { \ n + if ( ! ctor_type . ok ( ) ) { \ n + * status = errors : : invalidargument ( ""type error: "" , \ n + ctor_type . status ( ) . tostring ( ) ) ; \ n + return nullptr ; \ n + }"
CVE-2022-21733,"['https://github.com/tensorflow/tensorflow/commit/f68fdab93fb7f4ddb4eb438c8fe052753c9413e8', 'https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98j8-c9q4-r38g']","('CWE-190', 'Integer Overflow or Wraparound')","GitHub, Inc.",NVD-CVSS2-Other,tensorflow,tensorflow,f68fdab93fb7f4ddb4eb438c8fe052753c9413e8,1,"Tensorflow is an Open Source Machine Learning Framework . The implementation of ` StringNGrams ` can be used to trigger a denial of service attack by causing an out of memory condition after an integer overflow . We are missing a validation on ` pad_witdh ` and that result in computing a negative value for ` ngram_width ` which is later used to allocate parts of the output . The fix will be included in TensorFlow 2.8.0 . We will also cherrypick this commit on TensorFlow 2.7.1 , TensorFlow 2.6.3 , and TensorFlow 2.5.3 , as these are also affected and still in supported range .",add a check for pad width to be a positive value . piperorigin-revid : 413275853 change-id : i261a8db9dabf5ce48a806a9e58129080c9fac619,"diff - - git a / tensorflow / core / kernels / string_ngrams_op . cc b / tensorflow / core / kernels / string_ngrams_op . cc \ n @ @ - 152 , 6 + 152 , 16 @ @ class stringngramsop : public tensorflow : : opkernel { \ n + \ n + // if reached here, pad_width should be > 0, pad_width_ = -1,\n+        // which indicates max(ngram_widths) - 1 cannot be used here since\n+        // ngram_width is not known.\n+        op_requires(\n+            context, pad_width_ >= 0,\n+            errors::invalidargument(""pad width should be >= 0 when ""\n+                                    ""preserve_short_sequences is true and ""\n+                                    ""ngram_widths are not provided, got "",\n+                                    pad_width_));\ndiff --git a/tensorflow/python/ops/raw_ops_test.py b/tensorflow/python/ops/raw_ops_test.py\n@@ -28,7 +28,6 @@ from tensorflow.python.platform import test\n-@test_util.disable_tfrt\n@@ -63,8 +62,9 @@ class rawopstest(test.testcase, parameterized.testcase):\n-    with self.assertraisesregex(errors.invalidargumenterror,\n-                                ""invalid split value""):\n+    with self.assertraisesregex(\n+        errors.invalidargumenterror,\n+        r""invalid split value|first split value must be 0""):\n@@ -76,6 +76,25 @@ class rawopstest(test.testcase, parameterized.testcase):\n+  def teststringsplit(self):\n+    data = [""123456""]\n+    data_splits = [0, 1]\n+    separator = ""a"" * 15\n+    ngram_widths = []\n+    pad_width = -5\n+    left_pad = right_pad = """"\n+    with self.assertraisesregex(errors.invalidargumenterror,\n+                                ""pad width should be >= 0""):\n+      self.evaluate(gen_string_ops.string_n_grams(\n+          data=data,\n+          data_splits=data_splits,\n+          separator=separator,\n+          ngram_widths=ngram_widths,\n+          left_pad=left_pad,\n+          right_pad=right_pad,\n+          pad_width=pad_width,\n+          preserve_short_sequences=true))\n+"
CVE-2022-32547,"['https://bugzilla.redhat.com/show_bug.cgi?id=2091813', 'https://github.com/ImageMagick/ImageMagick/commit/eac8ce4d873f28bb6a46aa3a662fb196b49b95d0', 'https://github.com/ImageMagick/ImageMagick6/commit/dc070da861a015d3c97488fdcca6063b44d47a7b']","('CWE-704', 'Incorrect Type Conversion or Cast')","Red Hat, Inc.",NVD-CVSS2-Other,ImageMagick,ImageMagick6,dc070da861a015d3c97488fdcca6063b44d47a7b,1,"In ImageMagick , there is load of misaligned address for type 'double ' , which requires 8 byte alignment and for type 'float ' , which requires 4 byte alignment at MagickCore/property.c . Whenever crafted or untrusted input is processed by ImageMagick , this causes a negative impact to application availability or other problems related to undefined behavior .",https : //github.com/imagemagick/imagemagick/pull/5034,"diff - - git a / magick / property . c b / magick / property . c \ n @ @ - 1526 , 12 + 1526 , 14 @ @ static magickbooleantype getexifproperty ( const image * image , \ n - exifmultiplevalues ( 4 , ""%f"" , ( double ) * ( float * ) p1 ) ; \ n + exifmultiplevalues ( 4 , ""%.20g"" , ( double ) \ n + readpropertysignedlong ( endian , p1 ) ) ; \ n - exifmultiplevalues ( 8 , ""%f"" , * ( double * ) p1 ) ; \ n + exifmultiplevalues ( 8 , ""%.20g"" , ( double ) \ n + readpropertysignedlong ( endian , p1 ) ) ;"
CVE-2022-29199,"['https://github.com/tensorflow/tensorflow/commit/3150642acbbe254e3c3c5d2232143fa591855ac9', 'https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p9rc-rmr5-529j']","('CWE-20', 'Improper Input Validation')","GitHub, Inc.",NVD-CVSS2-Other,tensorflow,tensorflow,3150642acbbe254e3c3c5d2232143fa591855ac9,1,"TensorFlow is an open source platform for machine learning . Prior to versions 2.9.0 , 2.8.1 , 2.7.2 , and 2.6.4 , the implementation of ` tf.raw_ops.LoadAndRemapMatrix does not fully validate the input arguments . This results in a ` CHECK ` -failure which can be used to trigger a denial of service attack . The code assumes ` initializing_values ` is a vector but there is no validation for this before accessing its value . Versions 2.9.0 , 2.8.1 , 2.7.2 , and 2.6.4 contain a patch for this issue .",fix tf.raw_ops.loadandremapmatrix vulnerability with invalid ` row_remapping ` . check that ` row_remapping ` has the correct dims ( ) . piperorigin-revid : 445522800,"diff - - git a / tensorflow / core / kernels / load_and_remap_matrix_op . cc b / tensorflow / core / kernels / load_and_remap_matrix_op . cc \ n @ @ - 74 , 6 + 74 , 11 @ @ class loadandremapmatrixop : public opkernel { \ n + op_requires ( \ n + context , row_remapping_t - > dims ( ) = = 1 , \ n + errors : : invalidargument ( ""the `row_remapping` tensor must be 1-d, got "" \ n + ""a tensor of shape "" , \ n + row_remapping_t - > shape ( ) . debugstring ( ) ) ) ; \ ndiff - - git a / tensorflow / python / kernel_tests / io_ops / checkpoint_ops_test . py b / tensorflow / python / kernel_tests / io_ops / checkpoint_ops_test . py \ n @ @ - 227 , 6 + 227 , 32 @ @ class loadandremapmatrixtest ( test . testcase ) : \ n + def test_load_and_remap_invalid_dims ( self ) : \ n + ckpt_path = constant_op . constant ( \ n + '/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0' , \ n + shape = [ ] , \ n + dtype = dtypes . string ) \ n + old_tensor_name = constant_op . constant ( \ n + '/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0' , \ n + shape = [ ] , \ n + dtype = dtypes . string ) \ n + row_remapping = constant_op . constant ( 0 , shape = [ ] , dtype = dtypes . int64 ) \ n + col_remapping = constant_op . constant ( 3 , shape = [ 3 ] , dtype = dtypes . int64 ) \ n + initializing_values = constant_op . constant ( [ ] , \ n + shape = [ 0 , 1 ] , \ n + dtype = dtypes . float32 ) \ n + with self . cached_session ( ) , self . assertraisesregex ( \ n + ( valueerror , errors . invalidargumenterror ) , 'tensor must be 1-d' ) : \ n + self . evaluate ( \ n + gen_checkpoint_ops . load_and_remap_matrix ( \ n + ckpt_path = ckpt_path , \ n + old_tensor_name = old_tensor_name , \ n + row_remapping = row_remapping , \ n + col_remapping = col_remapping , \ n + initializing_values = initializing_values , \ n + num_rows = 1 , \ n + num_cols = 1 ) ) \ n +"
CVE-2022-29224,['https://github.com/envoyproxy/envoy/commit/9b1c3962172a972bc0359398af6daa3790bb59db'],"('CWE-476', 'NULL Pointer Dereference')","GitHub, Inc.",NVD-CVSS2-Other,envoyproxy,envoy,9b1c3962172a972bc0359398af6daa3790bb59db,1,"Envoy is a cloud-native high-performance proxy . Versions of envoy prior to 1.22.1 are subject to a segmentation fault in the GrpcHealthCheckerImpl . Envoy can perform various types of upstream health checking . One of them uses gRPC . Envoy also has a feature which can â€œholdâ€ ? ( prevent removal ) upstream hosts obtained via service discovery until configured active health checking fails . If an attacker controls an upstream host and also controls service discovery of that host ( via DNS , the EDS API , etc . ) , an attacker can crash Envoy by forcing removal of the host from service discovery , and then failing the gRPC health check request . This will crash Envoy via a null pointer dereference . Users are advised to upgrade to resolve this vulnerability . Users unable to upgrade may disable gRPC health checking and/or replace it with a different health checking type as a mitigation .",healthcheck : fix grpc inline removal crashes ( # 749 ) signed-off-by : matt klein < mklein @ lyft.com > signed-off-by : pradeep rao < pcrao @ google.com >,"diff - - git a / source / common / upstream / health_checker_impl . cc b / source / common / upstream / health_checker_impl . cc \ n @ @ - 815 , 10 + 815 , 17 @ @ void grpchealthcheckerimpl : : grpcactivehealthchecksession : : ongoaway ( \ n - expect_reset_ = true ; \ n - request_encoder_ - > getstream ( ) . resetstream ( http : : streamresetreason : : localreset ) ; \ n + // request_encoder_ can already be destroyed if the host was removed during the failure callback\n+    // above.\n+    if (request_encoder_ != nullptr) {\n+      expect_reset_ = true;\n+      request_encoder_->getstream().resetstream(http::streamresetreason::localreset);\n+    }\n+  }\n+  // client_ can already be destroyed if the host was removed during the failure callback above.\n+  if (client_ != nullptr) {\n+    client_->close();\n-  client_->close();\n@@ -852,12 +859,17 @@ void grpchealthcheckerimpl::grpcactivehealthchecksession::onrpccomplete(\n-    // resetstate() will be called by onresetstream().\n-    expect_reset_ = true;\n-    request_encoder_->getstream().resetstream(http::streamresetreason::localreset);\n+    // request_encoder_ can already be destroyed if the host was removed during the failure callback\n+    // above.\n+    if (request_encoder_ != nullptr) {\n+      // resetstate() will be called by onresetstream().\n+      expect_reset_ = true;\n+      request_encoder_->getstream().resetstream(http::streamresetreason::localreset);\n+    }\n-  if (!parent_.reuse_connection_ || goaway) {\n+  // client_ can already be destroyed if the host was removed during the failure callback above.\n+  if (client_ != nullptr && (!parent_.reuse_connection_ || goaway)) {\ndiff --git a/test/common/upstream/health_checker_impl_test.cc b/test/common/upstream/health_checker_impl_test.cc\n@@ -4737,6 +4737,70 @@ test_f(grpchealthcheckerimpltest, successstartfailedfailfirst) {\n+// verify functionality when a host is removed inline with a failure via rpc that was proceeded\n+// by a goaway.\n+test_f(grpchealthcheckerimpltest, grpchealthfailviarpcremovehostincallback) {\n+  setuphc();\n+  cluster_->priorityset().getmockhostset(0)->hosts_ = {\n+      maketesthost(cluster_->info_, ""tcp://127.0.0.1:80"", simtime())};\n+\n+  expectsessioncreate();\n+  expecthealthcheckstart(0);\n+  expect_call(event_logger_, logunhealthy(_, _, _, true));\n+  health_checker_->start();\n+\n+  expect_call(*this, onhoststatus(_, healthtransition::changed))\n+      .willonce(invoke([&](hostsharedptr host, healthtransition) {\n+        cluster_->priorityset().getmockhostset(0)->hosts_ = {};\n+        cluster_->priorityset().runupdatecallbacks(0, {}, {host});\n+      }));\n+  expect_call(event_logger_, logejectunhealthy(_, _, _));\n+  test_sessions_[0]->codec_client_->raisegoaway(http::goawayerrorcode::noerror);\n+  respondservicestatus(0, grpc::health::v1::healthcheckresponse::not_serving);\n+}\n+\n+// verify functionality when a host is removed inline with a failure via an error goaway.\n+test_f(grpchealthcheckerimpltest, grpchealthfailviagoawayremovehostincallback) {\n+  setuphcwithunhealthythreshold(/*threshold=*/1);\n+  cluster_->priorityset().getmockhostset(0)->hosts_ = {\n+      maketesthost(cluster_->info_, ""tcp://127.0.0.1:80"", simtime())};\n+\n+  expectsessioncreate();\n+  expecthealthcheckstart(0);\n+  expect_call(event_logger_, logunhealthy(_, _, _, true));\n+  health_checker_->start();\n+\n+  expect_call(*this, onhoststatus(_, healthtransition::changed))\n+      .willonce(invoke([&](hostsharedptr host, healthtransition) {\n+        cluster_->priorityset().getmockhostset(0)->hosts_ = {};\n+        cluster_->priorityset().runupdatecallbacks(0, {}, {host});\n+      }));\n+  expect_call(event_logger_, logejectunhealthy(_, _, _));\n+  test_sessions_[0]->codec_client_->raisegoaway(http::goawayerrorcode::other);\n+}\n+\n+// verify functionality when a host is removed inline with by a bad rpc response.\n+test_f(grpchealthcheckerimpltest, grpchealthfailviabadresponseremovehostincallback) {\n+  setuphcwithunhealthythreshold(/*threshold=*/1);\n+  cluster_->priorityset().getmockhostset(0)->hosts_ = {\n+      maketesthost(cluster_->info_, ""tcp://127.0.0.1:80"", simtime())};\n+\n+  expectsessioncreate();\n+  expecthealthcheckstart(0);\n+  expect_call(event_logger_, logunhealthy(_, _, _, true));\n+  health_checker_->start();\n+\n+  expect_call(*this, onhoststatus(_, healthtransition::changed))\n+      .willonce(invoke([&](hostsharedptr host, healthtransition) {\n+        cluster_->priorityset().getmockhostset(0)->hosts_ = {};\n+        cluster_->priorityset().runupdatecallbacks(0, {}, {host});\n+      }));\n+  expect_call(event_logger_, logejectunhealthy(_, _, _));\n+  std::unique_ptr<http::testresponseheadermapimpl> response_headers(\n+      new http::testresponseheadermapimpl{{"":status"", ""500""}});\n+  test_sessions_[0]->stream_response_callbacks_->decodeheaders(std::move(response_headers), false);\n+}\n+"
CVE-2022-35978,['https://github.com/minetest/minetest/commit/da71e86633d0b27cd02d7aac9fdac625d141ca13'],"('CWE-693', 'Protection Mechanism Failure')","GitHub, Inc.",NVD-CVSS2-Other,minetest,minetest,da71e86633d0b27cd02d7aac9fdac625d141ca13,1,"Minetest is a free open-source voxel game engine with easy modding and game creation . In * * single player * * , a mod can set a global setting that controls the Lua script loaded to display the main menu . The script is then loaded as soon as the game session is exited . The Lua environment the menu runs in is not sandboxed and can directly interfere with the user 's system . There are currently no known workarounds .","protect a few more settings from being set from mods of those settings main_menu_script has concrete security impact , the rest are added out of abundance of caution .","diff - - git a / src / script / lua_api / l_settings . cpp b / src / script / lua_api / l_settings . cpp \ n @ @ - 27 , 9 + 27 , 11 @ @ with this program ; if not , write to the free software foundation , inc . , \ n - / * this protects : \ n - * 'secure.*' settings from being set \ n - * some mapgen settings from being set \ n + / * this protects the following from being set : \ n + * 'secure.*' settings \ n + * some security - relevant settings \ n + * ( better solution pending ) \ n + * some mapgen settings \ n @ @ - 41 , 7 + 43 , 7 @ @ with this program ; if not , write to the free software foundation , inc . , \ n - throw luaerror ( ""attempt to set secure setting."" ) ; \ n + throw luaerror ( ""attempted to set secure setting."" ) ; \ n @ @ - 54 , 6 + 56 , 17 @ @ static inline int checksettingsecurity ( lua_state * l , const std : : string & name ) \ n + const char * disallowed [ ] = { \ n + ""main_menu_script"" , ""shader_path"" , ""texture_path"" , ""screenshot_path"" , \ n + ""serverlist_file"" , ""serverlist_url"" , ""map-dir"" , ""contentdb_url"" , \ n + } ; \ n + if ( ! is_mainmenu ) { \ n + for ( const char * name2 : disallowed ) { \ n + if ( name = = name2 ) \ n + throw luaerror ( ""attempted to set disallowed setting."" ) ; \ n + } \ n + } \ n +"
CVE-2022-36012,['https://github.com/tensorflow/tensorflow/commit/ad069af92392efee1418c48ff561fd3070a03d7b'],"('CWE-617', 'Reachable Assertion')","GitHub, Inc.",NVD-CVSS2-Other,tensorflow,tensorflow,ad069af92392efee1418c48ff561fd3070a03d7b,1,"TensorFlow is an open source platform for machine learning . When ` mlir : :tfg : :ConvertGenericFunctionToFunctionDef ` is given empty function attributes , it crashes . We have patched the issue in GitHub commit ad069af92392efee1418c48ff561fd3070a03d7b . The fix will be included in TensorFlow 2.10.0 . We will also cherrypick this commit on TensorFlow 2.9.1 , TensorFlow 2.8.1 , and TensorFlow 2.7.2 , as these are also affected and still in supported range . There are no known workarounds for this issue .",[ tfg ] [ functiondef_import ] error on empty edge names return an error in the generic function importer if an edge name is empty . piperorigin-revid : 449953062,"diff - - git a / tensorflow / core / ir / importexport / functiondef_import . cc b / tensorflow / core / ir / importexport / functiondef_import . cc \ n @ @ - 33 , 6 + 33 , 7 @ @ limitations under the license . \ n + #include ""tensorflow/core/platform/statusor.h""\n@@ -40,6 +41,7 @@ using tensorflow::nodedef;\n+using tensorflow::statusor;\n@@ -166,9 +168,12 @@ status importnodes(valuemapmanager value_manager,\n-    for (const std::string& input : node.input())\n+    for (const std::string& input : node.input()) {\n+      if (input.empty())\n+        return invalidargument(""node '"", node.name(), ""' has an empty input"");\n+    }\n@@ -461,21 +466,31 @@ status importgenericfunction(\n-    if (position == output_name_to_position.end())\n+    if (position == output_name_to_position.end()) {\n+    }\n+    if (ret_val.second.empty()) {\n+      return invalidargument(""function '"", func.signature().name(),\n+                             ""' has empty result name"");\n+    }\n-    if (position == control_output_to_position.end())\n+    if (position == control_output_to_position.end()) {\n+    }\n+    if (ret_val.second.empty()) {\n+      return invalidargument(""function '"", func.signature().name(),\n+                             ""' has empty control result name"");\n+    }\ndiff --git a/tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_func_with_empty_control_result.pbtxt b/tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_func_with_empty_control_result.pbtxt\n@@ -0,0 +1,26 @@\n+# run: not tfg-translate -graphdef-to-mlir %s 2>&1 | filecheck %s\n+\n+# check: function 'foo' has empty control result name\n+\n+library {\n+  function {\n+    signature {\n+      name: ""foo""\n+      control_output: ""output""\n+    }\n+    node_def {\n+      name: ""y""\n+      op: ""noop""\n+      attr {\n+        key: ""t""\n+        value {\n+          placeholder: ""t""\n+        }\n+      }\n+    }\n+    control_ret {\n+      key: ""output""\n+      value: """"\n+    }\n+  }\n+}\ndiff --git a/tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_func_with_empty_input.pbtxt b/tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_func_with_empty_input.pbtxt\n@@ -0,0 +1,22 @@\n+# run: not tfg-translate -graphdef-to-mlir %s 2>&1 | filecheck %s\n+\n+# check: node 'y' has an empty input\n+\n+library {\n+  function {\n+    signature {\n+      name: ""foo""\n+    }\n+    node_def {\n+      name: ""y""\n+      input: """"\n+      op: ""identity""\n+      attr {\n+        key: ""t""\n+        value {\n+          placeholder: ""t""\n+        }\n+      }\n+    }\n+  }\n+}\ndiff --git a/tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_func_with_empty_result.pbtxt b/tensorflow/core/ir/importexport/tests/graphdef_to_mlir/invalid_generic_func_with_empty_result.pbtxt\n@@ -0,0 +1,29 @@\n+# run: not tfg-translate -graphdef-to-mlir %s 2>&1 | filecheck %s\n+\n+# check: function 'foo' has empty result name\n+\n+library {\n+  function {\n+    signature {\n+      name: ""foo""\n+      output_arg {\n+        name: ""output""\n+        type: dt_int32\n+      }\n+    }\n+    node_def {\n+      name: ""y""\n+      op: ""noop""\n+      attr {\n+        key: ""t""\n+        value {\n+          placeholder: ""t""\n+        }\n+      }\n+    }\n+    ret {\n+      key: ""output""\n+      value: """"\n+    }\n+  }\n+}"
CVE-2022-36015,['https://github.com/tensorflow/tensorflow/commit/37e64539cd29fcfb814c4451152a60f5d107b0f0'],"('CWE-190', 'Integer Overflow or Wraparound')","GitHub, Inc.",NVD-CVSS2-Other,tensorflow,tensorflow,37e64539cd29fcfb814c4451152a60f5d107b0f0,1,"TensorFlow is an open source platform for machine learning . When ` RangeSize ` receives values that do not fit into an ` int64_t ` , it crashes . We have patched the issue in GitHub commit 37e64539cd29fcfb814c4451152a60f5d107b0f0 . The fix will be included in TensorFlow 2.10.0 . We will also cherrypick this commit on TensorFlow 2.9.1 , TensorFlow 2.8.1 , and TensorFlow 2.7.2 , as these are also affected and still in supported range . There are no known workarounds for this issue .",fix overflow issue we 're also decreasing the test numbers by 1 as the overflow threshold is 1 less . piperorigin-revid : 449856148,"diff - - git a / tensorflow / core / ops / math_ops . cc b / tensorflow / core / ops / math_ops . cc \ n @ @ - 1487 , 17 + 1487 , 18 @ @ status rangesize ( const tensor * start_t , const tensor * limit_t , \ n - auto size = ( std : : is_integral < t > : : value \ n - ? ( ( eigen : : numext : : abs ( limit - start ) + \ n - eigen : : numext : : abs ( delta ) - t ( 1 ) ) / \ n - eigen : : numext : : abs ( delta ) ) \ n - : ( eigen : : numext : : ceil ( \ n - eigen : : numext : : abs ( ( limit - start ) / delta ) ) ) ) ; \ n - \ n - // undefined behaviour if size will not fit into int64_t\n-  if (size > std::numeric_limits<int64_t>::max()) {\n-    return errors::invalidargument(""requires ((limit - start) / delta) <= "",\n-                                   std::numeric_limits<int64_t>::max());\n+  int64_t size;\n+  if (std::is_integral<t>::value) {\n+    size = eigen::divup(static_cast<int64_t>(eigen::numext::abs(limit - start)),\n+                        static_cast<int64_t>(eigen::numext::abs(delta)));\n+  } else {\n+    auto size_auto =\n+        eigen::numext::ceil(eigen::numext::abs((limit - start) / delta));\n+    if (size_auto > std::numeric_limits<int64_t>::max()) {\n+      return errors::invalidargument(""requires ((limit - start) / delta) <= "",\n+                                     std::numeric_limits<int64_t>::max());\n+    }\n+    size = static_cast<int64_t>(size_auto);"
CVE-2022-35973,"['https://github.com/tensorflow/tensorflow/commit/aca766ac7693bf29ed0df55ad6bfcc78f35e7f48', 'https://github.com/tensorflow/tensorflow/security/advisories/GHSA-689c-r7h2-fv9v']","('CWE-20', 'Improper Input Validation')","GitHub, Inc.",NVD-CVSS2-Other,tensorflow,tensorflow,aca766ac7693bf29ed0df55ad6bfcc78f35e7f48,1,"TensorFlow is an open source platform for machine learning . If ` QuantizedMatMul ` is given nonscalar input for : ` min_a ` , ` max_a ` , ` min_b ` , or ` max_b ` It gives a segfault that can be used to trigger a denial of service attack . We have patched the issue in GitHub commit aca766ac7693bf29ed0df55ad6bfcc78f35e7f48 . The fix will be included in TensorFlow 2.10.0 . We will also cherrypick this commit on TensorFlow 2.9.1 , TensorFlow 2.8.1 , and TensorFlow 2.7.2 , as these are also affected and still in supported range . There are no known workarounds for this issue .",fix tf.raw_ops . quantizedmatmul vulnerability from non scalar min/max a/b arguments . piperorigin-revid : 465364257,"diff - - git a / tensorflow / core / kernels / quantized_matmul_op . cc b / tensorflow / core / kernels / quantized_matmul_op . cc \ n @ @ - 20 , 11 + 20 , 14 @ @ limitations under the license . \ n + #include ""tensorflow/core/framework/op_requires.h""\n+#include ""tensorflow/core/framework/tensor_shape.h""\n+#include ""tensorflow/core/platform/errors.h""\n@@ -75,9 +78,21 @@ class quantizedmatmulop : public opkernel {\n+    op_requires(context, tensorshapeutils::isscalar(context->input(2).shape()),\n+                errors::invalidargument(""min_a must be a scalar, but got shape"",\n+                                        context->input(2).shape()));\n+    op_requires(context, context->input(3).numelements() == 1,\n+                errors::invalidargument(""max_a must be a scalar, but got shape"",\n+                                        context->input(3).shape()));\n+    op_requires(context, context->input(4).numelements() == 1,\n+                errors::invalidargument(""min_b must be a scalar, but got shape"",\n+                                        context->input(4).shape()));\n+    op_requires(context, context->input(5).numelements() == 1,\n+                errors::invalidargument(""max_b must be a scalar, but got shape"",\n+                                        context->input(5).shape()));\ndiff --git a/tensorflow/core/kernels/quantized_matmul_op_test.cc b/tensorflow/core/kernels/quantized_matmul_op_test.cc\n@@ -62,10 +62,10 @@ test_f(quantizedmatmultest, small_noparams) {\n-  addinputfromarray<float>(tensorshape({1}), {0});\n-  addinputfromarray<float>(tensorshape({1}), {255.0f});\n-  addinputfromarray<float>(tensorshape({1}), {0});\n-  addinputfromarray<float>(tensorshape({1}), {255.0f});\n+  addinputfromarray<float>(tensorshape({}), {0});\n+  addinputfromarray<float>(tensorshape({}), {255.0f});\n+  addinputfromarray<float>(tensorshape({}), {0});\n+  addinputfromarray<float>(tensorshape({}), {255.0f});\n@@ -118,10 +118,10 @@ test_f(quantizedmatmultest, verysmall_withparams) {\n-  addinputfromarray<float>(tensorshape({1}), {-12.0f});\n-  addinputfromarray<float>(tensorshape({1}), {243.0f});\n-  addinputfromarray<float>(tensorshape({1}), {1.0f});\n-  addinputfromarray<float>(tensorshape({1}), {256.0f});\n+  addinputfromarray<float>(tensorshape({}), {-12.0f});\n+  addinputfromarray<float>(tensorshape({}), {243.0f});\n+  addinputfromarray<float>(tensorshape({}), {1.0f});\n+  addinputfromarray<float>(tensorshape({}), {256.0f});\n@@ -162,12 +162,50 @@ test_f(quantizedmatmultest, verysmall_badrange) {\n-  addinputfromarray<float>(tensorshape({1}), {-12.0f});\n-  addinputfromarray<float>(tensorshape({1}), {243.0f});\n+  addinputfromarray<float>(tensorshape({}), {-12.0f});\n+  addinputfromarray<float>(tensorshape({}), {243.0f});\n-  addinputfromarray<float>(tensorshape({1}), {1.0f});\n-  addinputfromarray<float>(tensorshape({1}), {1.0f});\n+  addinputfromarray<float>(tensorshape({}), {1.0f});\n+  addinputfromarray<float>(tensorshape({}), {1.0f});\n+  expect_eq(::tensorflow::error::invalid_argument, runopkernel().code());\n+}\n+\n+// this test multiplies two 1x1 8bit matrices, but sets invalid quantized min\n+// and max values, so we expect to get an error\n+test_f(quantizedmatmultest, verysmall_badminmax) {\n+  // these parameters reflect a typical production usage of eight-bit matmuls\n+  // in an inception-style network.\n+  const bool transpose_a = true;\n+  const int a_rows = 1;\n+  const int a_cols = 1;\n+  const int b_rows = 1;\n+  const int b_cols = 1;\n+  const bool transpose_b = false;\n+  tf_assert_ok(nodedefbuilder(""quantized_mat_mul_op"", ""quantizedmatmul"")\n+                   .input(fakeinput(dt_quint8))\n+                   .input(fakeinput(dt_quint8))\n+                   .input(fakeinput(dt_float))\n+                   .input(fakeinput(dt_float))\n+                   .input(fakeinput(dt_float))\n+                   .input(fakeinput(dt_float))\n+                   .attr(""toutput"", datatypetoenum<qint32>::v())\n+                   .attr(""transpose_a"", transpose_a)\n+                   .attr(""transpose_b"", transpose_b)\n+                   .finalize(node_def()));\n+  tf_assert_ok(initop());\n+  // the a matrix is:\n+  // |  -1 |\n+  addinputfromarray<quint8>(tensorshape({a_rows, a_cols}), {11});\n+  // the b matrix is:\n+  // |   1 |\n+  addinputfromarray<quint8>(tensorshape({b_rows, b_cols}), {0});\n+  // here we set the error of a non scalar min_a value, so we expect to see an\n+  // error when we run.\n+  addinputfromarray<float>(tensorshape({1}), {2});\n+  addinputfromarray<float>(tensorshape({}), {243.0f});\n+  addinputfromarray<float>(tensorshape({}), {1.0f});\n+  addinputfromarray<float>(tensorshape({}), {256.0f});\n@@ -233,10 +271,10 @@ test_f(quantizedmatmultest, small_withparams) {\n-  addinputfromarray<float>(tensorshape({1}), {-12.0f});\n-  addinputfromarray<float>(tensorshape({1}), {243.0f});\n-  addinputfromarray<float>(tensorshape({1}), {0});\n-  addinputfromarray<float>(tensorshape({1}), {255.0f});\n+  addinputfromarray<float>(tensorshape({}), {-12.0f});\n+  addinputfromarray<float>(tensorshape({}), {243.0f});\n+  addinputfromarray<float>(tensorshape({}), {0});\n+  addinputfromarray<float>(tensorshape({}), {255.0f});\n@@ -326,10 +364,10 @@ test_f(quantizedmatmultest, medium_withparams) {\n-  addinputfromarray<float>(tensorshape({1}), {a_min});\n-  addinputfromarray<float>(tensorshape({1}), {a_max});\n-  addinputfromarray<float>(tensorshape({1}), {b_min});\n-  addinputfromarray<float>(tensorshape({1}), {b_max});\n+  addinputfromarray<float>(tensorshape({}), {a_min});\n+  addinputfromarray<float>(tensorshape({}), {a_max});\n+  addinputfromarray<float>(tensorshape({}), {b_min});\n+  addinputfromarray<float>(tensorshape({}), {b_max});"
